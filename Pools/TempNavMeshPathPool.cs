// <auto-generated>
//   AI-Refactored: TempNavMeshPathPool.cs (Beyond Diamond, Zero-Alloc & Parity Edition, June 2025)
//   Bulletproof pooling for NavMeshPath objects for high-performance AI pathfinding and navigation.
//   Thread-safe, teardown/reload safe, fully AI-Refactored compliant.
//   MIT License.
// </auto-generated>

namespace AIRefactored.Pools
{
    using System;
    using System.Collections.Generic;
    using UnityEngine.AI;

    /// <summary>
    /// Pool for reusable <see cref="NavMeshPath"/> objects.
    /// Prevents repeated allocations when calculating AI fallback or patrol paths.
    /// </summary>
    public static class TempNavMeshPathPool
    {
        private static readonly Stack<NavMeshPath> Pool = new Stack<NavMeshPath>(32);
        private static readonly object SyncRoot = new object();

        static TempNavMeshPathPool()
        {
            try
            {
                AppDomain.CurrentDomain.DomainUnload += (_, __) => ClearAll();
            }
            catch { }
        }

        /// <summary>
        /// Rents a pooled <see cref="NavMeshPath"/> instance, or allocates a new one.
        /// </summary>
        /// <returns>A reusable NavMeshPath instance.</returns>
        public static NavMeshPath Rent()
        {
            lock (SyncRoot)
            {
                if (Pool.Count > 0)
                    return Pool.Pop();
            }

            return new NavMeshPath();
        }

        /// <summary>
        /// Returns a <see cref="NavMeshPath"/> instance to the pool.
        /// Caller is responsible for clearing any internal state before reuse.
        /// </summary>
        /// <param name="path">The path to return.</param>
        public static void Return(NavMeshPath path)
        {
            if (path == null)
                return;

            lock (SyncRoot)
            {
                Pool.Push(path);
            }
        }

        /// <summary>
        /// Prewarms the pool with a number of <see cref="NavMeshPath"/> instances.
        /// </summary>
        /// <param name="count">Number of paths to preallocate.</param>
        public static void Prewarm(int count)
        {
            if (count <= 0)
                return;

            lock (SyncRoot)
            {
                for (int i = 0; i < count; i++)
                    Pool.Push(new NavMeshPath());
            }
        }

        /// <summary>
        /// Clears all pooled <see cref="NavMeshPath"/> instances.
        /// </summary>
        public static void ClearAll()
        {
            lock (SyncRoot)
            {
                Pool.Clear();
            }
        }
    }
}
