// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Bulletproof: All failures are locally contained, never break other subsystems, and always trigger fallback isolation.
//   See: AIRefactored “Bulletproof Fallback & Isolation Safety Rule Set” for audit compliance.
// </auto-generated>

namespace AIRefactored.Bootstrap
{
	using System;
	using System.Collections.Generic;
	using AIRefactored.AI.Core;
	using AIRefactored.AI.Looting;
	using AIRefactored.Core;
	using AIRefactored.Pools;
	using AIRefactored.Runtime;
	using BepInEx.Logging;
	using EFT;
	using EFT.Interactive;
	using UnityEngine;

	/// <summary>
	/// Registers all lootable containers and loose loot items in the scene.
	/// Links dead player corpses to nearby loot containers for bot prioritization.
	/// All failures are locally contained—never propagate error or break global systems.
	/// </summary>
	public static class LootBootstrapper
	{
		private const float MaxCorpseLinkDistance = 1.5f;
		private static readonly ManualLogSource Logger = Plugin.LoggerInstance;

		public static void RegisterAllLoot()
		{
			if (!GameWorldHandler.IsInitialized || !GameWorldHandler.IsHost)
			{
				Logger.LogDebug("[LootBootstrapper] Skipped loot registration — not host or not ready.");
				return;
			}

			try
			{
				LootableContainer[] containers = null;
				LootItem[] items = null;

				try { containers = UnityEngine.Object.FindObjectsOfType<LootableContainer>(); }
				catch (Exception ex) { Logger.LogError("[LootBootstrapper] Failed to find LootableContainer: " + ex); }

				try { items = UnityEngine.Object.FindObjectsOfType<LootItem>(); }
				catch (Exception ex) { Logger.LogError("[LootBootstrapper] Failed to find LootItem: " + ex); }

				if (containers != null && containers.Length > 0)
					RegisterContainers(containers);

				if (items != null && items.Length > 0)
					RegisterLooseItems(items);
			}
			catch (Exception ex)
			{
				Logger.LogError("[LootBootstrapper] RegisterAllLoot() failed: " + ex);
			}
		}

		private static void RegisterContainers(LootableContainer[] containers)
		{
			for (int i = 0; i < containers.Length; i++)
			{
				var container = containers[i];
				if (container == null || !container.enabled || container.transform == null)
					continue;

				try
				{
					LootRegistry.RegisterContainer(container);
					TryLinkToCorpse(container);
				}
				catch (Exception ex)
				{
					Logger.LogError("[LootBootstrapper] RegisterContainers() failed: " + ex);
				}
			}
		}

		private static void RegisterLooseItems(LootItem[] items)
		{
			for (int i = 0; i < items.Length; i++)
			{
				var item = items[i];
				if (item == null || !item.enabled)
					continue;

				try
				{
					LootRegistry.RegisterItem(item);
				}
				catch (Exception ex)
				{
					Logger.LogError("[LootBootstrapper] RegisterLooseItems() failed: " + ex);
				}
			}
		}

		private static void TryLinkToCorpse(LootableContainer container)
		{
			if (container == null || container.transform == null)
				return;

			var containerPos = container.transform.position;
			var world = GameWorldHandler.Get();
			if (world?.RegisteredPlayers == null || world.RegisteredPlayers.Count == 0)
				return;

			List<Player> deadPlayers = null;

			try
			{
				deadPlayers = TempListPool.Rent<Player>();
				List<IPlayer> all = world.RegisteredPlayers;

				for (int i = 0; i < all.Count; i++)
				{
					var p = EFTPlayerUtil.AsEFTPlayer(all[i]);
					if (p != null && p.HealthController != null && !p.HealthController.IsAlive)
						deadPlayers.Add(p);
				}

				for (int i = 0; i < deadPlayers.Count; i++)
				{
					var corpse = deadPlayers[i];
					string profileId = corpse.Profile?.Id;
					if (string.IsNullOrEmpty(profileId) || DeadBodyContainerCache.Contains(profileId))
						continue;

					var corpsePos = EFTPlayerUtil.GetPosition(corpse);
					if (Vector3.Distance(containerPos, corpsePos) <= MaxCorpseLinkDistance)
					{
						try
						{
							DeadBodyContainerCache.Register(corpse, container);

							string nickname = corpse.Profile?.Info?.Nickname ?? "Unnamed";
							Logger.LogDebug("[LootBootstrapper] Linked container to corpse: " + nickname);
						}
						catch (Exception ex)
						{
							Logger.LogError("[LootBootstrapper] DeadBodyContainerCache.Register() failed: " + ex);
						}
						break;
					}
				}
			}
			catch (Exception ex)
			{
				Logger.LogError("[LootBootstrapper] TryLinkToCorpse() failed: " + ex);
			}
			finally
			{
				if (deadPlayers != null)
					TempListPool.Return(deadPlayers);
			}
		}
	}
}
