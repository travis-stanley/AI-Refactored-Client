// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   All hearing logic is bulletproof, fully self-healing, and designed for realistic, human-like recovery from deafness effects.
// </auto-generated>

namespace AIRefactored.AI.Combat
{
    using System;
    using UnityEngine;

    /// <summary>
    /// Simulates hearing damage effects such as deafness after loud sounds (e.g., grenades, gunfire).
    /// Deafness fades in a nonlinear, human-like way, matching real recovery curves and ear fatigue.
    /// Bulletproof: all logic is local and cannot break parent systems; all errors are isolated and self-healed.
    /// </summary>
    public sealed class HearingDamageComponent
    {
        #region Fields

        private float _targetDeafness;
        private float _deafnessLevel;
        private float _deafDuration;
        private float _elapsedTime;
        private float _recoverySlope;

        #endregion

        #region Properties

        /// <summary>
        /// Gets the current deafness intensity (0.0 to 1.0).
        /// </summary>
        public float Deafness => _deafnessLevel;

        /// <summary>
        /// Gets a value indicating whether the bot is currently affected by deafness.
        /// </summary>
        public bool IsDeafened => _deafnessLevel > 0.08f;

        /// <summary>
        /// Gets the remaining deafness duration in seconds.
        /// </summary>
        public float RemainingTime => Mathf.Max(_deafDuration - _elapsedTime, 0f);

        #endregion

        #region Public Methods

        /// <summary>
        /// Applies a new deafness effect with the specified intensity and duration.
        /// Only overrides if intensity is stronger or will last longer at the same intensity.
        /// </summary>
        /// <param name="intensity">Intensity from 0.0 to 1.0 (clamped).</param>
        /// <param name="duration">Duration in seconds (min 0.1s).</param>
        public void ApplyDeafness(float intensity, float duration)
        {
            try
            {
                float newIntensity = Mathf.Clamp01(intensity);
                float newDuration = Mathf.Max(duration, 0.1f);
                float slope = 1.5f + 2.5f * newIntensity;

                if (newIntensity > _targetDeafness ||
                    (Mathf.Approximately(newIntensity, _targetDeafness) && newDuration > RemainingTime))
                {
                    _targetDeafness = newIntensity;
                    _deafDuration = newDuration;
                    _elapsedTime = 0f;
                    _deafnessLevel = newIntensity;
                    _recoverySlope = slope;
                }
            }
            catch
            {
                Clear(); // Always self-heal
            }
        }

        /// <summary>
        /// Immediately clears all deafness effects.
        /// </summary>
        public void Clear()
        {
            _targetDeafness = 0f;
            _deafnessLevel = 0f;
            _deafDuration = 0f;
            _elapsedTime = 0f;
            _recoverySlope = 2f;
        }

        /// <summary>
        /// Updates the deafness level over time. Call every frame.
        /// Nonlinear fade: fades slow at first, then accelerates—mimicking real ear ringing.
        /// </summary>
        /// <param name="deltaTime">Delta time in seconds.</param>
        public void Tick(float deltaTime)
        {
            try
            {
                if (_targetDeafness <= 0.01f || _deafDuration <= 0f)
                {
                    Clear();
                    return;
                }

                _elapsedTime += Mathf.Max(0f, deltaTime);

                if (_elapsedTime >= _deafDuration)
                {
                    Clear();
                    return;
                }

                float t = Mathf.Clamp01(_elapsedTime / _deafDuration);
                float recovery = 1f - Mathf.Pow(1f - t, _recoverySlope);
                _deafnessLevel = Mathf.Lerp(_targetDeafness, 0f, recovery);
            }
            catch
            {
                Clear(); // Fail-safe recovery
            }
        }

        #endregion
    }
}
