// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Failures in AIRefactored logic must always trigger safe fallback to EFT base AI.
// </auto-generated>

namespace AIRefactored.AI.Combat
{
    using System;
    using System.Collections.Generic;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Navigation;
    using AIRefactored.AI.Optimization;
    using AIRefactored.Core;
    using AIRefactored.Runtime;
    using BepInEx.Logging;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Tracks panic events, visible enemies, and squad losses to trigger escalation behavior.
    /// Applies tuning and personality adaptations based on threat severity.
    /// </summary>
    public sealed class BotThreatEscalationMonitor
    {
        #region Constants

        private const float CheckInterval = 1.0f;
        private const float PanicDurationThreshold = 4.0f;
        private const float SquadCasualtyThreshold = 0.4f;

        #endregion

        #region Fields

        private static readonly ManualLogSource Logger = Plugin.LoggerInstance;

        private BotOwner _bot;
        private float _panicStartTime = -1f;
        private float _nextCheckTime = -1f;
        private bool _hasEscalated;

        #endregion

        #region Public Methods

        public void Initialize(BotOwner botOwner)
        {
            if (botOwner == null)
            {
                throw new ArgumentNullException(nameof(botOwner));
            }

            _bot = botOwner;
            _panicStartTime = -1f;
            _nextCheckTime = -1f;
            _hasEscalated = false;
        }

        public void NotifyPanicTriggered()
        {
            if (_panicStartTime < 0f)
            {
                _panicStartTime = Time.time;
            }
        }

        public void Tick(float time)
        {
            if (_hasEscalated || !IsValid() || time < _nextCheckTime)
            {
                return;
            }

            _nextCheckTime = time + CheckInterval;

            if (ShouldEscalate(time))
            {
                EscalateBot();
            }
        }

        #endregion

        #region Private Methods

        private bool IsValid()
        {
            return _bot != null &&
                   !_bot.IsDead &&
                   _bot.GetPlayer is Player player &&
                   player.IsAI;
        }

        private bool PanicDurationExceeded(float time)
        {
            return _panicStartTime >= 0f && (time - _panicStartTime) > PanicDurationThreshold;
        }

        private bool MultipleEnemiesVisible()
        {
            BotEnemiesController controller = _bot.EnemiesController;
            if (controller?.EnemyInfos == null)
            {
                return false;
            }

            int visibleCount = 0;
            foreach (var kv in controller.EnemyInfos)
            {
                if (kv.Value != null && kv.Value.IsVisible)
                {
                    if (++visibleCount >= 2)
                    {
                        return true;
                    }
                }
            }

            return false;
        }

        private bool SquadHasLostTeammates()
        {
            BotsGroup group = _bot.BotsGroup;
            if (group == null || group.MembersCount <= 1)
            {
                return false;
            }

            int dead = 0;
            for (int i = 0; i < group.MembersCount; i++)
            {
                BotOwner member = group.Member(i);
                if (member == null || member.IsDead)
                {
                    dead++;
                }
            }

            return dead >= Mathf.CeilToInt(group.MembersCount * SquadCasualtyThreshold);
        }

        private bool ShouldEscalate(float time)
        {
            return PanicDurationExceeded(time) ||
                   MultipleEnemiesVisible() ||
                   SquadHasLostTeammates();
        }

        private void EscalateBot()
        {
            _hasEscalated = true;

            string nickname = _bot.Profile?.Info?.Nickname ?? "Unknown";
            Logger.LogDebug($"[AIRefactored-Escalation] Escalating behavior for bot '{nickname}'.");

            AIOptimizationManager.Reset(_bot);
            AIOptimizationManager.Apply(_bot);

            ApplyEscalationTuning(_bot);
            ApplyPersonalityTuning(_bot);

            if (!FikaHeadlessDetector.IsHeadless && _bot.BotTalk != null)
            {
                _bot.BotTalk.TrySay(EPhraseTrigger.OnFight);
            }

            Vector3 fallback = NavPointRegistry.GetClosestPosition(_bot.Position);
            if (fallback != Vector3.zero && _bot.Mover != null && !_bot.Mover.IsMoving)
            {
                _bot.Mover.GoToPoint(fallback, true, 1.0f);
                Logger.LogDebug($"[AIRefactored-Escalation] Bot '{nickname}' moved to nav fallback after escalation.");
            }
        }

        private void ApplyEscalationTuning(BotOwner bot)
        {
            if (bot?.Settings?.FileSettings == null)
            {
                return;
            }

            var file = bot.Settings.FileSettings;

            if (file.Shoot != null)
            {
                file.Shoot.RECOIL_PER_METER = Mathf.Clamp(file.Shoot.RECOIL_PER_METER * 0.85f, 0.1f, 2.0f);
            }

            if (file.Mind != null)
            {
                file.Mind.DIST_TO_FOUND_SQRT = Mathf.Clamp(file.Mind.DIST_TO_FOUND_SQRT * 1.2f, 200f, 800f);
                file.Mind.ENEMY_LOOK_AT_ME_ANG = Mathf.Clamp(file.Mind.ENEMY_LOOK_AT_ME_ANG * 0.75f, 5f, 45f);
                file.Mind.CHANCE_TO_RUN_CAUSE_DAMAGE_0_100 = Mathf.Clamp(file.Mind.CHANCE_TO_RUN_CAUSE_DAMAGE_0_100 + 20f, 0f, 100f);
            }

            if (file.Look != null)
            {
                file.Look.MAX_VISION_GRASS_METERS = Mathf.Clamp(file.Look.MAX_VISION_GRASS_METERS + 5f, 5f, 40f);
            }

            Logger.LogDebug($"[AIRefactored-Tuning] Escalation tuning applied to '{bot.Profile?.Info?.Nickname ?? "Unknown"}'.");
        }

        private void ApplyPersonalityTuning(BotOwner bot)
        {
            string profileId = bot.ProfileId;
            if (string.IsNullOrEmpty(profileId))
            {
                return;
            }

            BotPersonalityProfile profile = BotRegistry.Get(profileId);
            if (profile == null)
            {
                return;
            }

            profile.AggressionLevel = Mathf.Clamp01(profile.AggressionLevel + 0.25f);
            profile.Caution = Mathf.Clamp01(profile.Caution - 0.25f);
            profile.SuppressionSensitivity = Mathf.Clamp01(profile.SuppressionSensitivity * 0.75f);
            profile.AccuracyUnderFire = Mathf.Clamp01(profile.AccuracyUnderFire + 0.2f);
            profile.CommunicationLevel = Mathf.Clamp01(profile.CommunicationLevel + 0.2f);

            Logger.LogDebug(
                $"[AIRefactored-Tuning] Personality tuned for '{bot.Profile?.Info?.Nickname ?? "Unknown"}': " +
                $"Agg={profile.AggressionLevel:F2}, " +
                $"Caution={profile.Caution:F2}, " +
                $"Supp={profile.SuppressionSensitivity:F2}, " +
                $"AccUF={profile.AccuracyUnderFire:F2}");
        }

        #endregion
    }
}
