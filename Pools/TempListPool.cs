// <auto-generated>
//   AI-Refactored: TempListPool.cs (Beyond Diamond, Parity & Zero-Alloc Edition, June 2025)
//   Bulletproof generic List<T> pooling for ultra-high-performance AI and world logic.
//   Fully thread-safe, teardown/reload safe, and compliant with AI-Refactored pooling architecture.
//   MIT License.
// </auto-generated>

namespace AIRefactored.Pools
{
    using System;
    using System.Collections.Generic;

    /// <summary>
    /// Centralized pool for temporary <see cref="List{T}"/> reuse.
    /// Prevents garbage collection churn during frequent AI logic operations.
    /// Designed for safe use in multithreaded and high-frequency scenarios.
    /// </summary>
    public static class TempListPool
    {
        private static readonly Dictionary<Type, Stack<object>> PoolByType = new Dictionary<Type, Stack<object>>(128);
        private static readonly object SyncRoot = new object();

        static TempListPool()
        {
            // DomainUnload safe teardown for hot-reload scenarios (editor, SPT, FIKA).
            try
            {
                AppDomain.CurrentDomain.DomainUnload += (_, __) => ClearAll();
            }
            catch { }
        }

        /// <summary>
        /// Retrieves a pooled list of type <typeparamref name="T"/>, or creates one if the pool is empty.
        /// </summary>
        /// <typeparam name="T">Element type.</typeparam>
        /// <returns>A cleared and ready-to-use list.</returns>
        public static List<T> Rent<T>()
        {
            lock (SyncRoot)
            {
                if (PoolByType.TryGetValue(typeof(T), out Stack<object> stack) && stack.Count > 0)
                    return (List<T>)stack.Pop();
            }

            return new List<T>();
        }

        /// <summary>
        /// Retrieves a pooled list with guaranteed minimum capacity.
        /// </summary>
        /// <typeparam name="T">Element type.</typeparam>
        /// <param name="minCapacity">The minimum list capacity to ensure.</param>
        /// <returns>A cleared and ready-to-use list.</returns>
        public static List<T> Rent<T>(int minCapacity)
        {
            List<T> list = Rent<T>();
            if (list.Capacity < minCapacity)
                list.Capacity = minCapacity;
            return list;
        }

        /// <summary>
        /// Returns a list to the pool after clearing it.
        /// </summary>
        /// <typeparam name="T">Element type.</typeparam>
        /// <param name="list">List to return. Will be cleared before pooling.</param>
        public static void Return<T>(List<T> list)
        {
            if (list == null)
                return;

            list.Clear();

            lock (SyncRoot)
            {
                if (!PoolByType.TryGetValue(typeof(T), out Stack<object> stack))
                {
                    stack = new Stack<object>(32);
                    PoolByType[typeof(T)] = stack;
                }

                stack.Push(list);
            }
        }

        /// <summary>
        /// Pre-warms the pool for a specific type with a fixed number of empty lists.
        /// </summary>
        /// <typeparam name="T">Element type to prewarm.</typeparam>
        /// <param name="count">Number of empty lists to cache.</param>
        public static void Prewarm<T>(int count)
        {
            if (count <= 0)
                return;

            lock (SyncRoot)
            {
                if (!PoolByType.TryGetValue(typeof(T), out Stack<object> stack))
                {
                    stack = new Stack<object>(count);
                    PoolByType[typeof(T)] = stack;
                }

                for (int i = 0; i < count; i++)
                {
                    stack.Push(new List<T>());
                }
            }
        }

        /// <summary>
        /// Clears all pooled data across all types. Use during teardown or reload.
        /// </summary>
        public static void ClearAll()
        {
            lock (SyncRoot)
            {
                foreach (var stack in PoolByType.Values)
                    stack.Clear();

                PoolByType.Clear();
            }
        }
    }
}
