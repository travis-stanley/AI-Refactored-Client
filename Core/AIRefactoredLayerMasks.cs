// <auto-generated>
//   AI-Refactored: AIRefactoredLayerMasks.cs (Final Patched — NavMeshAll Support)
//   All layer logic is null/NaN-safe and multiplayer/headless compatible.
//   Licensed under the MIT License.
// </auto-generated>

namespace AIRefactored.Core
{
    using UnityEngine;
    using UnityEngine.AI;

    /// <summary>
    /// Centralized layer mask definitions aligned with Tarkov's internal physics layers.
    /// Bulletproof: Vision, suppression, collision, and nav masks. Fully safe for NavMesh.SamplePosition and ray validation.
    /// </summary>
    public static class AIRefactoredLayerMasks
    {
        #region EFT-Validated Layer Indices

        public static readonly int Default = SafeLayer("Default");
        public static readonly int Terrain = SafeLayer("Terrain");
        public static readonly int Grass = SafeLayer("Grass");
        public static readonly int HighPolyCollider = SafeLayer("HighPolyCollider");
        public static readonly int LowPolyCollider = SafeLayer("LowPolyCollider");
        public static readonly int DeadBody = SafeLayer("Deadbody");
        public static readonly int HitCollider = SafeLayer("HitCollider");
        public static readonly int DoorLowPolyCollider = SafeLayer("DoorLowPolyCollider");
        public static readonly int Interactive = SafeLayer("Interactive");
        public static readonly int Loot = SafeLayer("Loot");
        public static readonly int Player = SafeLayer("Player");
        public static readonly int Shells = SafeLayer("Shells");
        public static readonly int Triggers = SafeLayer("Triggers");

        #endregion

        #region Precomputed LayerMasks

        public static readonly LayerMask DefaultMask = MaskSafe(Default);
        public static readonly LayerMask TerrainMask = MaskSafe(Terrain);
        public static readonly LayerMask HighPolyMask = MaskSafe(HighPolyCollider);
        public static readonly LayerMask LowPolyMask = MaskSafe(LowPolyCollider);
        public static readonly LayerMask PlayerMask = MaskSafe(Player);
        public static readonly LayerMask HitColliderMask = MaskSafe(HitCollider);
        public static readonly LayerMask LootMask = MaskSafe(Loot);
        public static readonly LayerMask InteractiveMask = MaskSafe(Interactive);
        public static readonly LayerMask TriggersMask = MaskSafe(Triggers);

        #endregion

        #region Compound Masks

        public static readonly LayerMask TerrainHighLow =
            MaskSafe(Terrain) | MaskSafe(HighPolyCollider) | MaskSafe(LowPolyCollider);

        public static readonly LayerMask SuppressionMask =
            TerrainHighLow | MaskSafe(Grass);

        public static readonly LayerMask VisionBlockers =
            MaskSafe(HighPolyCollider) | MaskSafe(Terrain);

        public static readonly LayerMask LineOfSightMask =
            MaskSafe(HighPolyCollider) | MaskSafe(Terrain);

        public static readonly LayerMask AimRayMask =
            MaskSafe(HighPolyCollider) | MaskSafe(LowPolyCollider) | MaskSafe(DeadBody);

        public static readonly LayerMask CoverRayMask =
            MaskSafe(HighPolyCollider) | MaskSafe(LowPolyCollider) | MaskSafe(DoorLowPolyCollider) | MaskSafe(Terrain);

        public static readonly LayerMask CoverColliderMask =
            MaskSafe(HighPolyCollider) | MaskSafe(LowPolyCollider) | MaskSafe(DoorLowPolyCollider) | MaskSafe(Terrain);

        public static readonly LayerMask JumpRayMask =
            MaskSafe(Terrain) | MaskSafe(HighPolyCollider) | MaskSafe(LowPolyCollider);

        public static readonly LayerMask LootObstructionMask =
            MaskSafe(HighPolyCollider) | MaskSafe(LowPolyCollider) | MaskSafe(DeadBody);

        public static readonly LayerMask LootRaycastMask =
            MaskSafe(Loot) | MaskSafe(Interactive) | MaskSafe(Player);

        public static readonly LayerMask NavObstacleMask =
            MaskSafe(Terrain) | MaskSafe(HighPolyCollider) | MaskSafe(LowPolyCollider) | MaskSafe(DeadBody);

        public static readonly LayerMask ObstacleRayMask =
            MaskSafe(Terrain) | MaskSafe(HighPolyCollider) | MaskSafe(LowPolyCollider) | MaskSafe(Grass);

        public static readonly LayerMask PlayerCollisionTestMask =
            MaskSafe(LowPolyCollider) | MaskSafe(DoorLowPolyCollider) | MaskSafe(Terrain) | MaskSafe(Player);

        public static readonly LayerMask MovementBlockerMask =
            MaskSafe(Terrain) | MaskSafe(HighPolyCollider) | MaskSafe(LowPolyCollider) | MaskSafe(DoorLowPolyCollider);

        /// <summary>
        /// For use with NavMesh.SamplePosition() to search across all NavMesh areas.
        /// </summary>
        public const int NavMeshAll = -1;

        /// <summary>
        /// Preconfigured NavMesh query filter for validation and sampling logic.
        /// </summary>
        public static readonly NavMeshQueryFilter NavMeshValidationFilter = new NavMeshQueryFilter
        {
            agentTypeID = 0, // Unity default agent (usually human)
            areaMask = NavMesh.AllAreas
        };

        #endregion

        #region Utilities

        private static int SafeLayer(string name)
        {
            int layer = LayerMask.NameToLayer(name);
            if (layer < 0 || layer > 31)
            {
                Plugin.LoggerInstance?.LogWarning("[AIRefactoredLayerMasks] Invalid or missing layer: " + name);
                return 0;
            }
            return layer;
        }

        private static LayerMask MaskSafe(int layer)
        {
            return (layer >= 0 && layer < 32) ? (1 << layer) : 0;
        }

        public static bool IsValidLayer(int layer) => layer >= 0 && layer < 32;

        public static bool IsWorldGeometry(int layer)
        {
            return IsValidLayer(layer) && (
                layer == Terrain
                || layer == HighPolyCollider
                || layer == LowPolyCollider
                || layer == DoorLowPolyCollider
            );
        }

        public static bool IsDoorLayer(int layer) => IsValidLayer(layer) && layer == DoorLowPolyCollider;

        public static bool IsObstacleLayer(int layer)
        {
            return IsValidLayer(layer) && (
                layer == Terrain
                || layer == HighPolyCollider
                || layer == LowPolyCollider
                || layer == Grass
            );
        }

        public static bool IsPlayerLayer(int layer) => IsValidLayer(layer) && layer == Player;
        public static bool IsLootLayer(int layer) => IsValidLayer(layer) && layer == Loot;
        public static bool IsInteractiveLayer(int layer) => IsValidLayer(layer) && (layer == Interactive || layer == Triggers);

        #endregion
    }
}
