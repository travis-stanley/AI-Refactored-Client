// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

namespace AIRefactored.AI.Hotspots
{
    using System;
    using System.Collections.Generic;
    using AIRefactored.Bootstrap;
    using AIRefactored.Pools;
    using AIRefactored.Runtime;
    using BepInEx.Logging;
    using UnityEngine;

    /// <summary>
    /// Global registry for map-specific hotspots (loot zones, patrol targets, tactical nodes).
    /// Dynamically builds spatial indexes (quadtree or grid) depending on map type.
    /// </summary>
    public static class HotspotRegistry
    {
        #region Static Fields

        private static readonly ManualLogSource Logger = Plugin.LoggerInstance;

        private static readonly List<Hotspot> All = new List<Hotspot>(256);
        private static readonly Dictionary<string, List<Hotspot>> ByZone = new Dictionary<string, List<Hotspot>>(StringComparer.OrdinalIgnoreCase);

        private static readonly Dictionary<string, SpatialIndexMode> IndexModeMap = new Dictionary<string, SpatialIndexMode>(StringComparer.OrdinalIgnoreCase)
        {
            { "woods", SpatialIndexMode.Quadtree },
            { "shoreline", SpatialIndexMode.Quadtree },
            { "lighthouse", SpatialIndexMode.Quadtree },
            { "interchange", SpatialIndexMode.Quadtree },
            { "bigmap", SpatialIndexMode.Quadtree },
            { "sandbox", SpatialIndexMode.Grid },
            { "sandbox_high", SpatialIndexMode.Grid },
            { "factory4_day", SpatialIndexMode.Grid },
            { "factory4_night", SpatialIndexMode.Grid },
            { "laboratory", SpatialIndexMode.Grid },
            { "tarkovstreets", SpatialIndexMode.Grid },
            { "rezervbase", SpatialIndexMode.Grid }
        };

        private enum SpatialIndexMode { None, Quadtree, Grid }

        private static SpatialIndexMode _activeMode = SpatialIndexMode.None;
        private static string _loadedMap = "none";
        private static HotspotQuadtree _quadtree;
        private static HotspotSpatialGrid _grid;

        #endregion

        #region Lifecycle

        public static void Clear()
        {
            All.Clear();
            ByZone.Clear();
            _quadtree = null;
            _grid = null;
            _loadedMap = "none";
            _activeMode = SpatialIndexMode.None;
        }

        public static void Initialize(string mapId)
        {
            if (!WorldInitState.IsInPhase(WorldPhase.WorldReady))
            {
                Logger.LogWarning("[HotspotRegistry] ⚠ Initialization attempted outside of WorldReady phase. Skipping.");
                return;
            }

            if (string.IsNullOrEmpty(mapId))
            {
                Logger.LogWarning("[HotspotRegistry] ⚠ Null mapId passed to Initialize.");
                return;
            }

            string normalizedMapId = mapId.Trim().ToLowerInvariant();
            if (_loadedMap.Equals(normalizedMapId, StringComparison.OrdinalIgnoreCase))
            {
                return;
            }

            Clear();
            _loadedMap = normalizedMapId;
            _activeMode = IndexModeMap.TryGetValue(_loadedMap, out var mode) ? mode : SpatialIndexMode.None;

            HotspotSet set = HardcodedHotspots.GetForMap(_loadedMap);
            if (set == null || set.Points == null || set.Points.Count == 0)
            {
                Logger.LogWarning($"[HotspotRegistry] ⚠ No hotspots found for map '{_loadedMap}'");
                return;
            }

            for (int i = 0; i < set.Points.Count; i++)
            {
                HotspotData data = set.Points[i];
                if (data == null || string.IsNullOrWhiteSpace(data.Zone))
                {
                    continue;
                }

                string zone = data.Zone.Trim();
                Hotspot h = new Hotspot(data.Position, zone);
                All.Add(h);

                if (!ByZone.TryGetValue(zone, out var list))
                {
                    list = new List<Hotspot>(8);
                    ByZone[zone] = list;
                }

                list.Add(h);
            }

            switch (_activeMode)
            {
                case SpatialIndexMode.Quadtree:
                    BuildQuadtree();
                    break;
                case SpatialIndexMode.Grid:
                    BuildGrid();
                    break;
            }

            Logger.LogDebug($"[HotspotRegistry] ✅ Registered {All.Count} hotspots for map '{_loadedMap}' using {_activeMode}");
        }

        #endregion

        #region Query API

        public static IReadOnlyList<Hotspot> GetAll() => All;

        public static IReadOnlyList<Hotspot> GetAllInZone(string zone)
        {
            if (string.IsNullOrEmpty(zone))
                return Array.Empty<Hotspot>();

            return ByZone.TryGetValue(zone.Trim(), out var result) ? result : Array.Empty<Hotspot>();
        }

        public static Hotspot GetRandomHotspot()
        {
            int count = All.Count;
            return count == 0 ? new Hotspot(Vector3.zero, "none") : All[UnityEngine.Random.Range(0, count)];
        }

        public static List<Hotspot> QueryNearby(Vector3 position, float radius, Predicate<Hotspot> filter)
        {
            if (_activeMode == SpatialIndexMode.Quadtree && _quadtree != null)
                return _quadtree.Query(position, radius, filter);

            if (_activeMode == SpatialIndexMode.Grid && _grid != null)
                return _grid.Query(position, radius, filter);

            return FallbackQuery(position, radius, filter);
        }

        #endregion

        #region Spatial Index Builders

        private static void BuildQuadtree()
        {
            Vector2 center = EstimateCenter();
            float size = EstimateBoundsSize(center);

            _quadtree = new HotspotQuadtree(center, size);
            for (int i = 0; i < All.Count; i++)
            {
                _quadtree.Insert(All[i]);
            }
        }

        private static void BuildGrid()
        {
            _grid = new HotspotSpatialGrid(10f);
            for (int i = 0; i < All.Count; i++)
            {
                _grid.Insert(All[i]);
            }
        }

        private static Vector2 EstimateCenter()
        {
            float minX = float.MaxValue, maxX = float.MinValue;
            float minZ = float.MaxValue, maxZ = float.MinValue;

            for (int i = 0; i < All.Count; i++)
            {
                Vector3 pos = All[i].Position;
                if (pos.x < minX) minX = pos.x;
                if (pos.x > maxX) maxX = pos.x;
                if (pos.z < minZ) minZ = pos.z;
                if (pos.z > maxZ) maxZ = pos.z;
            }

            return new Vector2((minX + maxX) * 0.5f, (minZ + maxZ) * 0.5f);
        }

        private static float EstimateBoundsSize(Vector2 center)
        {
            float maxDist = 0f;
            for (int i = 0; i < All.Count; i++)
            {
                Vector3 pos = All[i].Position;
                float dist = Vector2.Distance(center, new Vector2(pos.x, pos.z));
                if (dist > maxDist)
                    maxDist = dist;
            }

            // Use next power of two for quadtree grid sizing
            return Mathf.NextPowerOfTwo(Mathf.CeilToInt(maxDist * 2f));
        }

        private static List<Hotspot> FallbackQuery(Vector3 position, float radius, Predicate<Hotspot> filter)
        {
            List<Hotspot> result = TempListPool.Rent<Hotspot>();
            float radiusSq = radius * radius;

            for (int i = 0; i < All.Count; i++)
            {
                Hotspot h = All[i];
                if ((h.Position - position).sqrMagnitude <= radiusSq && (filter == null || filter(h)))
                {
                    result.Add(h);
                }
            }

            return result;
        }

        #endregion

        #region Types

        /// <summary>
        /// Represents a runtime hotspot: a tactical point on the map with a zone label.
        /// </summary>
        public sealed class Hotspot
        {
            public Hotspot(Vector3 position, string zone)
            {
                Position = position;
                Zone = string.IsNullOrEmpty(zone) ? "none" : zone;
            }

            public Vector3 Position { get; }
            public string Zone { get; }
        }

        #endregion
    }
}
