// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Bulletproof: No cache can be left incomplete or with missing critical references. All wiring is atomic; all failures are isolated and only logged. No fallback logic exists.
// </auto-generated>

namespace AIRefactored.AI.Core
{
    using System;
    using System.Collections.Generic;
    using AIRefactored.AI;
    using AIRefactored.AI.Combat;
    using AIRefactored.AI.Combat.States;
    using AIRefactored.AI.Groups;
    using AIRefactored.AI.Looting;
    using AIRefactored.AI.Medical;
    using AIRefactored.AI.Memory;
    using AIRefactored.AI.Movement;
    using AIRefactored.AI.Navigation;
    using AIRefactored.AI.Optimization;
    using AIRefactored.AI.Perception;
    using AIRefactored.AI.Reactions;
    using AIRefactored.Core;
    using AIRefactored.Runtime;
    using BepInEx.Logging;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Atomic per-bot AI subsystem registry. Guarantees no partial states. All wiring and teardown is bulletproof and squad/loot aware.
    /// </summary>
    public sealed class BotComponentCache
    {
        #region Static

        public static readonly BotComponentCache Empty = new BotComponentCache();
        private static readonly ManualLogSource Logger = Plugin.LoggerInstance;
        private static readonly HashSet<string> InitializedBots = new HashSet<string>(StringComparer.OrdinalIgnoreCase);

        #endregion

        #region Fields

        private AIRefactoredBotOwner _owner;
        private FallbackHandler _fallbackHandler;

        #endregion

        #region Core References

        public BotOwner Bot { get; internal set; }
        public AIRefactoredBotOwner AIRefactoredBotOwner => _owner;
        public BotMemoryClass Memory => Bot?.Memory;
        public string Nickname => Bot?.Profile?.Info?.Nickname ?? "Unknown";
        public Vector3 Position => Bot != null ? Bot.Position : Vector3.zero;

        #endregion

        #region Personality

        public BotPersonalityProfile PersonalityProfile { get; private set; } = new BotPersonalityProfile();

        #endregion

        #region Runtime Flags

        public bool IsBlinded { get; set; }
        public float BlindUntilTime { get; set; }
        public float LastFlashTime { get; set; }
        public float LastHeardTime { get; private set; } = -999f;
        public Vector3 LastHeardDirection { get; private set; }
        public bool HasHeardDirection { get; private set; }

        #endregion

        #region AI Subsystems

        public CombatStateMachine Combat { get; private set; }
        public BotMovementController Movement { get; private set; }
        public BotPoseController PoseController { get; private set; }
        public BotLookController LookController { get; private set; }
        public BotTilt Tilt { get; private set; }
        public BotTacticalDeviceController Tactical { get; private set; }
        public BotGroupBehavior GroupBehavior { get; private set; }
        public BotThreatSelector ThreatSelector { get; private set; }
        public BotTacticalMemory TacticalMemory { get; private set; }
        public BotLastShotTracker LastShotTracker { get; private set; }
        public BotGroupComms GroupComms { get; private set; }
        public BotSuppressionReactionComponent Suppression { get; private set; }
        public BotPanicHandler PanicHandler { get; private set; }
        public BotThreatEscalationMonitor Escalation { get; private set; }
        public BotInjurySystem InjurySystem { get; private set; }
        public BotDeadBodyScanner DeadBodyScanner { get; private set; }
        public BotLootScanner LootScanner { get; private set; }
        public BotLootDecisionSystem LootDecisionSystem { get; private set; }
        public BotOwnerPathfindingCache Pathing { get; private set; }
        public SquadPathCoordinator SquadPath { get; private set; }
        public BotDoorInteractionSystem DoorInteraction { get; private set; }
        public BotHealingBySomebody HealReceiver { get; private set; }
        public BotHealAnotherTarget SquadHealer { get; private set; }
        public FlashGrenadeComponent FlashGrenade { get; private set; }
        public HearingDamageComponent HearingDamage { get; private set; }
        public TrackedEnemyVisibility VisibilityTracker { get; set; }

        public BotPerceptionSystem Perception { get; private set; }
        public BotCoverRetreatPlanner CoverPlanner { get; private set; }

        public BotGroupSyncCoordinator GroupSync => GroupBehavior?.GroupSync;
        public BotPanicHandler Panic => PanicHandler;
        public FallbackHandler Fallback => _fallbackHandler;

        #endregion

        #region Properties

        public bool IsReady =>
            Bot != null &&
            Movement != null &&
            Suppression != null &&
            PanicHandler != null &&
            Tactical != null &&
            FlashGrenade != null &&
            ThreatSelector != null &&
            _owner != null &&
            LootScanner != null &&
            LootDecisionSystem != null &&
            GroupComms != null &&
            GroupBehavior != null;

        #endregion

        #region Initialization

        /// <summary>
        /// Initializes and wires all critical AIRefactored subsystems for this bot.
        /// All failures are locally isolated and never result in a half-initialized bot.
        /// </summary>
        public void Initialize(BotOwner bot)
        {
            if (bot == null)
            {
                Logger.LogError("[BotComponentCache] Initialize called with null bot.");
                return;
            }

            string id = bot.Profile?.Id ?? "null";
            if (Bot != null || InitializedBots.Contains(id))
                return;

            InitializedBots.Add(id);
            Bot = bot;

            WildSpawnType role = bot.Profile?.Info?.Settings?.Role ?? WildSpawnType.assault;
            PersonalityProfile = BotRegistry.GetOrGenerate(id, PersonalityType.Balanced, role);

            // --- All wiring is atomic; each system's failure is isolated and only disables that subsystem ---
            TryInit(() => Pathing = new BotOwnerPathfindingCache(), "Pathing");
            TryInit(() => { TacticalMemory = new BotTacticalMemory(); TacticalMemory.Initialize(this); }, "TacticalMemory");
            TryInit(() => { _fallbackHandler = new FallbackHandler(this); }, "FallbackHandler");
            TryInit(() => { Combat = new CombatStateMachine(); Combat.Initialize(this); }, "Combat");
            TryInit(() => { FlashGrenade = new FlashGrenadeComponent(); FlashGrenade.Initialize(this); }, "FlashGrenade");
            TryInit(() => { PanicHandler = new BotPanicHandler(); PanicHandler.Initialize(this); }, "PanicHandler");
            TryInit(() => { Suppression = new BotSuppressionReactionComponent(); Suppression.Initialize(this); }, "Suppression");
            TryInit(() => { Escalation = new BotThreatEscalationMonitor(); Escalation.Initialize(bot); }, "Escalation");
            TryInit(() => { GroupBehavior = new BotGroupBehavior(); GroupBehavior.Initialize(this); }, "GroupBehavior");
            TryInit(() => { Movement = new BotMovementController(); Movement.Initialize(this); }, "Movement");
            TryInit(() => LookController = new BotLookController(bot, this), "LookController");
            TryInit(() => { Tactical = new BotTacticalDeviceController(); Tactical.Initialize(this); }, "Tactical");
            TryInit(() => PoseController = new BotPoseController(bot, this), "PoseController");
            TryInit(() => Tilt = new BotTilt(bot), "Tilt");
            TryInit(() => HearingDamage = new HearingDamageComponent(), "HearingDamage");
            TryInit(() => { SquadPath = new SquadPathCoordinator(); SquadPath.Initialize(this); }, "SquadPath");
            TryInit(() => { LootScanner = new BotLootScanner(); LootScanner.Initialize(this); }, "LootScanner");
            TryInit(() => { LootDecisionSystem = new BotLootDecisionSystem(); LootDecisionSystem.Initialize(this); }, "LootDecisionSystem");
            TryInit(() => { DeadBodyScanner = new BotDeadBodyScanner(); DeadBodyScanner.Initialize(this); }, "DeadBodyScanner");
            TryInit(() => DoorInteraction = new BotDoorInteractionSystem(bot), "DoorInteraction");
            TryInit(() => InjurySystem = new BotInjurySystem(this), "InjurySystem");
            TryInit(() => LastShotTracker = new BotLastShotTracker(), "LastShotTracker");
            TryInit(() => GroupComms = new BotGroupComms(this), "GroupComms");
            TryInit(() => SquadHealer = bot.HealAnotherTarget ?? new BotHealAnotherTarget(bot), "SquadHealer");
            TryInit(() => HealReceiver = bot.HealingBySomebody ?? new BotHealingBySomebody(bot), "HealReceiver");
            TryInit(() => ThreatSelector = new BotThreatSelector(this), "ThreatSelector");
            TryInit(() => { Perception = new BotPerceptionSystem(); Perception.Initialize(this); }, "Perception");
            TryInit(() => { CoverPlanner = new BotCoverRetreatPlanner(bot, Pathing); }, "CoverPlanner");
        }

        private void TryInit(Action action, string name)
        {
            try { action(); }
            catch (Exception ex)
            {
                Logger.LogError($"[BotComponentCache] Subsystem {name} failed: {ex}");
            }
        }

        #endregion

        #region External Setters

        public void SetOwner(AIRefactoredBotOwner owner)
        {
            if (owner == null)
            {
                Logger.LogError("[BotComponentCache] SetOwner() called with null.");
                return;
            }

            if (_owner != null && !ReferenceEquals(_owner, owner))
            {
                Logger.LogWarning("[BotComponentCache] SetOwner() attempted to overwrite existing owner.");
                return;
            }

            _owner = owner;
        }

        public void RegisterHeardSound(Vector3 source)
        {
            if (Bot == null)
                return;

            LastHeardTime = Time.time;
            LastHeardDirection = source - Position;
            HasHeardDirection = true;
        }

        #endregion

        #region Teardown

        public void Dispose()
        {
            try
            {
                _fallbackHandler?.Dispose();
            }
            catch (Exception ex)
            {
                Logger.LogWarning("[BotComponentCache] Dispose failed: " + ex);
            }

            _fallbackHandler = null;
        }

        #endregion
    }
}
