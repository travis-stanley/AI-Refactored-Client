// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Failures in AIRefactored logic must always trigger safe fallback to EFT base AI.
// </auto-generated>

namespace AIRefactored.AI.Combat.States
{
    using System;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Helpers;
    using AIRefactored.AI.Navigation;
    using AIRefactored.Core;
    using AIRefactored.Pools;
    using AIRefactored.Runtime;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Controls direct combat engagement logic.
    /// Pushes toward the enemy, recalculates stance and movement based on distance, visibility, and cover presence.
    /// </summary>
    public sealed class AttackHandler
    {
        #region Constants

        private const float PositionUpdateThresholdSqr = 1.0f;

        #endregion

        #region Fields

        private readonly BotOwner _bot;
        private readonly BotComponentCache _cache;

        private Vector3 _lastTargetPosition;
        private bool _hasLastTarget;

        #endregion

        #region Constructor

        /// <summary>
        /// Initializes the attack handler with bot component cache.
        /// </summary>
        public AttackHandler(BotComponentCache cache)
        {
            if (cache == null || cache.Bot == null)
            {
                Plugin.LoggerInstance.LogError("[AttackHandler] Null cache or BotOwner during construction.");
                throw new ArgumentException("AttackHandler requires a valid cache with BotOwner.");
            }

            _cache = cache;
            _bot = cache.Bot;
            _lastTargetPosition = Vector3.zero;
            _hasLastTarget = false;
        }

        #endregion

        #region Public Methods

        /// <summary>
        /// Clears last known enemy position tracking.
        /// </summary>
        public void ClearTarget()
        {
            _hasLastTarget = false;
            _lastTargetPosition = Vector3.zero;
        }

        /// <summary>
        /// Determines if the bot currently has a valid target to attack.
        /// </summary>
        public bool ShallUseNow()
        {
            Player _;
            return TryResolveEnemy(out _);
        }

        /// <summary>
        /// Executes per-frame attack logic: move toward enemy and adjust stance.
        /// </summary>
        public void Tick(float deltaTime)
        {
            try
            {
                Player enemy;
                if (!TryResolveEnemy(out enemy))
                {
                    return;
                }

                Transform enemyTransform = EFTPlayerUtil.GetTransform(enemy);
                if (enemyTransform == null)
                {
                    return;
                }

                Vector3 currentTargetPos = enemyTransform.position;
                float deltaSqr = (currentTargetPos - _lastTargetPosition).sqrMagnitude;

                if (!_hasLastTarget || deltaSqr > PositionUpdateThresholdSqr)
                {
                    _lastTargetPosition = currentTargetPos;
                    _hasLastTarget = true;

                    Vector3 destination = (_cache.SquadPath != null)
                        ? _cache.SquadPath.ApplyOffsetTo(currentTargetPos)
                        : currentTargetPos;

                    if (!BotNavValidator.Validate(_bot, "AttackHandlerTarget"))
                    {
                        destination = FallbackNavPointProvider.GetSafePoint(_bot.Position);
                    }

                    BotMovementHelper.SmoothMoveTo(_bot, destination);
                    BotCoverHelper.TrySetStanceFromNearbyCover(_cache, destination);
                }
            }
            catch (Exception ex)
            {
                Plugin.LoggerInstance.LogError("[AttackHandler] Exception in Tick: " + ex);
                BotFallbackUtility.FallbackToEFTLogic(_bot);
            }
        }

        #endregion

        #region Private Methods

        /// <summary>
        /// Attempts to resolve the most appropriate enemy target for attack.
        /// </summary>
        private bool TryResolveEnemy(out Player result)
        {
            result = null;

            BotThreatSelector selector = _cache.ThreatSelector;
            if (selector != null && EFTPlayerUtil.IsValid(selector.CurrentTarget))
            {
                result = selector.CurrentTarget;
                return true;
            }

            if (_bot.Memory?.GoalEnemy?.Person is Player fallback && EFTPlayerUtil.IsValid(fallback))
            {
                result = fallback;
                return true;
            }

            return false;
        }

        #endregion
    }
}
