// <auto-generated>
//   AI-Refactored: PatrolHandler.cs (Beyond Diamond, BotBrain/Fallback-Safe, June 2025)
//   Patrol/fallback is NavMesh-only, squad/personality-aware, overlay/event-driven, pooled, error-isolated, FSM-compliant.
//   All fallback triggers routed through CombatStateMachine/Brain. No disables, no teleport, never direct transform assign.
//   SPT/FIKA/headless/client parity. MIT License.
// </auto-generated>

namespace AIRefactored.AI.Combat.States
{
    using System;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Helpers;
    using AIRefactored.AI.Hotspots;
    using AIRefactored.AI.Navigation;
    using AIRefactored.Core;
    using EFT;
    using UnityEngine;
    using UnityEngine.AI;

    /// <summary>
    /// Handles humanized, pooled, overlay-only patrol and fallback logic for bots.
    /// - Patrol/fallback is NavMesh-only, squad/personality/cover aware, error-isolated, FSM/Brain routed.
    /// - All fallback triggers use CombatStateMachine/Brain, never disables or teleports, no direct transform assign.
    /// - Fully pooled, robust, SPT/FIKA/headless/client parity, StyleCop/ReSharper compliant.
///  </summary>
    public sealed class PatrolHandler
    {
        #region Constants

        private const float DeadAllyRadius = 10f;
        private const float InvestigateSoundDelay = 3f;
        private const float PanicThreshold = 0.25f;
        private const float MinHumanDelay = 0.07f;
        private const float MaxHumanDelay = 0.21f;
        private const float MinHotspotRandomOffset = 0.17f;
        private const float MaxHotspotRandomOffset = 1.1f;
        private const float NavMeshSampleRadius = 1.2f;
        private const float MaxPatrolDistance = 18f;
        private const float PatrolLookPauseMin = 0.35f;
        private const float PatrolLookPauseMax = 0.95f;
        private const float SquadSpread = 1.13f;
        private const float IdleLookVariance = 0.22f;
        private const float FallbackVoiceChance = 0.22f;
        private const float GroupAggroSpread = 0.18f;
        private const float FollowerLagSeconds = 0.65f;
        private const float LeaderFastTrackChance = 0.34f;

        #endregion

        #region Fields

        private readonly BotOwner _bot;
        private readonly BotComponentCache _cache;
        private readonly float _minStateDuration;
        private readonly float _switchCooldownBase;

        private float _nextSwitchTime;
        private float _lastPatrolTime = -1000f;
        private float _nextPatrolLookTime = -1000f;
        private bool _isLeader;
        private bool _isFollower;
        private float _followerLagUntil = -1000f;

        #endregion

        #region Constructor

        public PatrolHandler(BotComponentCache cache, float minStateDuration, float switchCooldownBase)
        {
            _cache = cache;
            _bot = cache?.Bot;
            _minStateDuration = minStateDuration;
            _switchCooldownBase = switchCooldownBase;
            _isLeader = IsSquadLeader(_bot);
            _isFollower = !_isLeader && (_bot?.BotsGroup?.MembersCount ?? 0) > 1;
        }

        #endregion

        #region Main API

        public bool ShallUseNow() => _bot != null && _cache != null;

        public bool ShouldTransitionToInvestigate(float time)
        {
            if (_cache?.Combat == null || _cache.AIRefactoredBotOwner?.PersonalityProfile == null)
                return false;

            try
            {
                if (_cache.AIRefactoredBotOwner.PersonalityProfile.Caution <= 0.35f)
                    return false;

                return (_cache.LastHeardTime + InvestigateSoundDelay > time) &&
                       (time - _cache.Combat.LastStateChangeTime > _minStateDuration);
            }
            catch (Exception ex)
            {
                Plugin.LoggerInstance.LogError($"[PatrolHandler] ShouldTransitionToInvestigate failed: {ex}");
                return false;
            }
        }

        /// <summary>
        /// Main patrol tick. All movement/fallback is NavMesh-sampled, overlay/event-driven, pooled.
        /// No disables/teleports, never direct transform assign, error-isolated.
        /// </summary>
        public void Tick(float time)
        {
            if (_bot == null || _cache == null)
                return;

            try
            {
                float delay = UnityEngine.Random.Range(MinHumanDelay, MaxHumanDelay);
                if (time - _lastPatrolTime < delay)
                    return;

                if (_isFollower && _followerLagUntil > time)
                    return;

                _lastPatrolTime = time;

                if (ShouldTriggerFallback(time))
                {
                    _cache.Combat?.TriggerFallback(TryGetFallbackPosition(), time);
                    if (_bot.BotTalk != null && UnityEngine.Random.value < FallbackVoiceChance)
                    {
                        try { _bot.BotTalk.TrySay(EPhraseTrigger.NeedHelp); } catch { }
                    }
                    if (_isFollower)
                        _followerLagUntil = time + UnityEngine.Random.Range(0.3f, 0.8f);
                    return;
                }

                if (time < _nextSwitchTime)
                {
                    PerformPatrolIdleLook();
                    if (_isFollower && UnityEngine.Random.value < 0.18f)
                        _followerLagUntil = time + UnityEngine.Random.Range(FollowerLagSeconds * 0.8f, FollowerLagSeconds * 1.5f);
                    return;
                }

                var hotspot = HotspotRegistry.GetRandomHotspot();
                if (hotspot == null || !IsVectorValid(hotspot.Position))
                    return;

                Vector3 offset = UnityEngine.Random.insideUnitSphere * UnityEngine.Random.Range(MinHotspotRandomOffset, MaxHotspotRandomOffset);
                offset.y = 0f;
                Vector3 target = hotspot.Position + offset;

                if (_cache.SquadPath != null)
                {
                    try { target = _cache.SquadPath.ApplyOffsetTo(target); } catch { }
                }
                else if (_bot?.BotsGroup != null && _bot.BotsGroup.MembersCount > 1)
                {
                    int idx = GetSquadIndex(_bot);
                    Vector3 perp = Vector3.Cross(Vector3.up, _bot.LookDirection.normalized);
                    target += perp * (SquadSpread * (idx - (_bot.BotsGroup.MembersCount / 2f)));

                    float aggro = Mathf.Clamp(_cache.PersonalityProfile?.AggressionLevel ?? 0f, 0f, 1f);
                    float caution = Mathf.Clamp(_cache.PersonalityProfile?.Caution ?? 0f, 0f, 1f);
                    target += perp * (GroupAggroSpread * (aggro - caution));
                }

                target = GetNavMeshSafe(target, _bot.Position);
                if (!IsVectorValid(target) || (target - _bot.Position).sqrMagnitude > MaxPatrolDistance * MaxPatrolDistance)
                    target = _bot.Position;

                float patrolCohesion = Mathf.Clamp(_cache?.PersonalityProfile?.Cohesion ?? 1f, 0.7f, 1.3f);

                if (_isLeader && UnityEngine.Random.value < LeaderFastTrackChance)
                    patrolCohesion *= 0.93f + UnityEngine.Random.value * 0.13f;
                if (_isFollower && UnityEngine.Random.value < 0.15f)
                    _followerLagUntil = time + UnityEngine.Random.Range(FollowerLagSeconds, FollowerLagSeconds * 2.4f);

                BotMovementHelper.SmoothMoveToSafe(_bot, target, slow: true, cohesion: patrolCohesion);
                BotCoverHelper.TrySetStanceFromNearbyCover(_cache, target);

                if (UnityEngine.Random.value < 0.17f + (_cache.PersonalityProfile?.Caution ?? 0f) * 0.11f)
                    PerformPatrolIdleLook();

                _nextSwitchTime = time + UnityEngine.Random.Range(_switchCooldownBase, _switchCooldownBase + 18f);

                if (_bot.BotTalk != null && UnityEngine.Random.value < 0.26f)
                {
                    try
                    {
                        if (_isLeader)
                            _bot.BotTalk.TrySay(UnityEngine.Random.value < 0.57f ? EPhraseTrigger.GoForward : EPhraseTrigger.CoverMe);
                        else if (_isFollower)
                            _bot.BotTalk.TrySay(UnityEngine.Random.value < 0.67f ? EPhraseTrigger.Ready : EPhraseTrigger.HoldPosition);
                        else
                            _bot.BotTalk.TrySay(UnityEngine.Random.value < 0.5f ? EPhraseTrigger.GoForward : EPhraseTrigger.CoverMe);
                    }
                    catch { }
                }
            }
            catch (Exception ex)
            {
                Plugin.LoggerInstance.LogError($"[PatrolHandler] Tick failed: {ex}");
            }
        }

        #endregion

        #region Fallback Logic

        private bool ShouldTriggerFallback(float time)
        {
            try
            {
                if (_cache.PanicHandler?.GetComposureLevel() < PanicThreshold) return true;
                if (_cache.InjurySystem?.ShouldHeal(time) == true) return true;
                if (_cache.Suppression?.IsSuppressed() == true) return true;

                var group = _bot?.BotsGroup;
                if (group == null) return false;

                for (int i = 0; i < group.MembersCount; i++)
                {
                    var mate = group.Member(i);
                    if (mate != null && mate != _bot && mate.IsDead)
                        if (Vector3.Distance(_bot.Position, mate.Position) < DeadAllyRadius)
                            return true;
                }
                return false;
            }
            catch (Exception ex)
            {
                Plugin.LoggerInstance.LogError($"[PatrolHandler] ShouldTriggerFallback failed: {ex}");
                return false;
            }
        }

        private Vector3 TryGetFallbackPosition()
        {
            try
            {
                Vector3 retreat = _bot.Position - _bot.LookDirection.normalized * 7.5f;
                retreat.y = _bot.Position.y;
                return GetNavMeshSafe(retreat, _bot.Position);
            }
            catch
            {
                return _bot.Position;
            }
        }

        #endregion

        #region Idle Look

        private void PerformPatrolIdleLook()
        {
            float now = Time.time;
            if (now < _nextPatrolLookTime)
                return;

            _nextPatrolLookTime = now + UnityEngine.Random.Range(PatrolLookPauseMin, PatrolLookPauseMax);

            Vector3 offset = UnityEngine.Random.insideUnitSphere * IdleLookVariance;
            offset.y = 0f;
            Vector3 lookTarget = _bot.Position + _bot.LookDirection.normalized * 2.5f + offset;
            BotMovementHelper.SmoothLookTo(_bot, lookTarget, 2.1f + UnityEngine.Random.value * 1.2f);
        }

        #endregion

        #region Helpers

        private static Vector3 GetNavMeshSafe(Vector3 candidate, Vector3 fallback)
        {
            return NavMesh.SamplePosition(candidate, out var hit, NavMeshSampleRadius, NavMesh.AllAreas)
                ? hit.position : fallback;
        }

        private static int GetSquadIndex(BotOwner bot)
        {
            if (bot?.BotsGroup == null) return -1;
            for (int i = 0; i < bot.BotsGroup.MembersCount; i++)
                if (bot.BotsGroup.Member(i) == bot) return i;
            return -1;
        }

        private static bool IsSquadLeader(BotOwner bot)
        {
            return GetSquadIndex(bot) == 0;
        }

        private static bool IsVectorValid(Vector3 v)
        {
            return !float.IsNaN(v.x) && !float.IsNaN(v.y) && !float.IsNaN(v.z);
        }

        #endregion
    }
}
