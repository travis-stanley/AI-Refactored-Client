// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

namespace AIRefactored.AI.Looting
{
    using System;
    using System.Collections.Generic;
    using AIRefactored.AI.Core;
    using AIRefactored.Core;
    using AIRefactored.Pools;
    using AIRefactored.Runtime;
    using EFT;
    using EFT.Interactive;
    using EFT.InventoryLogic;
    using UnityEngine;

    /// <summary>
    /// Scans and prioritizes lootable containers and corpses near the bot.
    /// Supports visibility checks, cooldowns, and value filtering.
    /// </summary>
    public sealed class BotLootScanner
    {
        #region Constants

        private const float ScanInterval = 1.6f;
        private const float LootRadius = 12f;
        private const float HighValueRadius = 24f;
        private const float MaxAngle = 120f;
        private const float CooldownSeconds = 6f;
        private const float StaleResetSeconds = 10f;

        #endregion

        #region Fields

        private readonly Dictionary<string, float> _cooldowns = new Dictionary<string, float>(64);

        private BotOwner _bot;
        private BotComponentCache _cache;

        private float _nextScanTime;
        private float _lastUpdateTime;
        private float _cachedLootValue;

        #endregion

        #region Properties

        /// <summary>
        /// Gets the estimated total loot value around the bot's scanning radius.
        /// </summary>
        public float TotalLootValue => _cachedLootValue;

        #endregion

        #region Initialization

        /// <summary>
        /// Initializes the scanner for the given bot cache.
        /// </summary>
        public void Initialize(BotComponentCache cache)
        {
            if (cache == null || cache.Bot == null)
            {
                throw new ArgumentException("[BotLootScanner] Invalid initialization: missing cache or bot.");
            }

            _cache = cache;
            _bot = cache.Bot;
        }

        #endregion

        #region Public Methods

        /// <summary>
        /// Performs loot scanning and interaction logic.
        /// </summary>
        public void Tick(float time)
        {
            if (_bot == null || _bot.IsDead || time < _nextScanTime)
            {
                return;
            }

            _nextScanTime = time + ScanInterval;

            if (!IsEligibleToLoot())
            {
                return;
            }

            TryLootNearby();

            _cachedLootValue = CalculateNearbyLootValue();

            if (_cachedLootValue <= 0f && time - _lastUpdateTime > StaleResetSeconds)
            {
                _cachedLootValue = 0f;
            }

            _lastUpdateTime = time;
        }

        /// <summary>
        /// Finds the highest-value loot position nearby the bot.
        /// </summary>
        public Vector3 GetBestLootPosition()
        {
            if (_bot == null)
            {
                return Vector3.zero;
            }

            Vector3 origin = _bot.Position;
            Vector3 best = origin;
            float bestValue = 0f;

            List<LootableContainer> containers = LootRegistry.GetAllContainers();
            for (int i = 0; i < containers.Count; i++)
            {
                LootableContainer container = containers[i];
                if (container == null || !container.enabled || IsOnCooldown(container.name))
                {
                    continue;
                }

                Vector3 position = container.transform.position;
                if (Vector3.Distance(origin, position) > HighValueRadius || !HasLineOfSight(position))
                {
                    continue;
                }

                float value = EstimateContainerValue(container);
                if (value > bestValue)
                {
                    bestValue = value;
                    best = position;
                }
            }

            return best;
        }

        /// <summary>
        /// Attempts to loot containers or loose items within range.
        /// </summary>
        public void TryLootNearby()
        {
            if (_bot == null)
            {
                return;
            }

            Vector3 origin = _bot.Position;

            LootableContainer corpse = DeadBodyContainerCache.Get(_bot.ProfileId);
            if (corpse != null && corpse.enabled && !IsOnCooldown(corpse.name))
            {
                Vector3 position = corpse.transform.position;
                if (Vector3.Distance(origin, position) <= LootRadius && HasLineOfSight(position))
                {
                    Loot(corpse);
                    return;
                }
            }

            List<LootableContainer> containers = LootRegistry.GetAllContainers();
            for (int i = 0; i < containers.Count; i++)
            {
                LootableContainer container = containers[i];
                if (container != null && container.enabled && !IsOnCooldown(container.name))
                {
                    Vector3 position = container.transform.position;
                    if (Vector3.Distance(origin, position) <= LootRadius && HasLineOfSight(position))
                    {
                        Loot(container);
                        return;
                    }
                }
            }

            List<LootItem> items = LootRegistry.GetAllItems();
            for (int i = 0; i < items.Count; i++)
            {
                LootItem item = items[i];
                if (item != null && item.enabled && !IsOnCooldown(item.name))
                {
                    Vector3 position = item.transform.position;
                    if (Vector3.Distance(origin, position) <= LootRadius && HasLineOfSight(position))
                    {
                        MarkCooldown(item.name);
                        _cache.Movement.EnterLootingMode();
                        _cache.Movement.ExitLootingMode();
                        Plugin.LoggerInstance.LogDebug("[BotLootScanner] Picked up item: " + item.name);
                        return;
                    }
                }
            }
        }

        #endregion

        #region Internal Logic

        private bool IsEligibleToLoot()
        {
            return _cache != null &&
                   !_cache.PanicHandler.IsPanicking &&
                   _bot != null &&
                   _bot.Memory.GoalEnemy == null &&
                   (_bot.EnemiesController == null || _bot.EnemiesController.EnemyInfos.Count == 0);
        }

        private float CalculateNearbyLootValue()
        {
            float sum = 0f;
            Vector3 origin = _bot.Position;
            List<LootableContainer> containers = LootRegistry.GetAllContainers();

            for (int i = 0; i < containers.Count; i++)
            {
                LootableContainer container = containers[i];
                if (container != null && container.enabled && Vector3.Distance(origin, container.transform.position) <= LootRadius)
                {
                    sum += EstimateContainerValue(container);
                }
            }

            return sum;
        }

        private void Loot(LootableContainer container)
        {
            MarkCooldown(container.name);
            _cache.Movement.EnterLootingMode();
            container.Interact(new InteractionResult(EInteractionType.Open));
            _cache.Movement.ExitLootingMode();
            Plugin.LoggerInstance.LogDebug("[BotLootScanner] Looted container: " + container.name);
        }

        private float EstimateContainerValue(LootableContainer container)
        {
            if (container.ItemOwner == null || container.ItemOwner.RootItem == null)
            {
                return 0f;
            }

            Item root = container.ItemOwner.RootItem;
            float total = 0f;

            List<Item> items = TempListPool.Rent<Item>();
            items.AddRange(root.GetAllItems());

            for (int i = 0; i < items.Count; i++)
            {
                Item item = items[i];
                if (item != null && item.Template != null)
                {
                    float price = item.Template.CreditsPrice;
                    if (price > 0f)
                    {
                        total += price;
                    }
                }
            }

            TempListPool.Return(items);
            return total;
        }

        private bool HasLineOfSight(Vector3 target)
        {
            Vector3 origin = _bot.WeaponRoot.position;
            Vector3 direction = target - origin;

            if (Vector3.Angle(_bot.WeaponRoot.forward, direction) > MaxAngle)
            {
                return false;
            }

            float distance = direction.magnitude + 0.3f;
            return Physics.Raycast(origin, direction.normalized, out RaycastHit hit, distance, AIRefactoredLayerMasks.HighPolyWithTerrainMaskAI)
                   && Vector3.Distance(hit.point, target) < 0.4f;
        }

        private void MarkCooldown(string id)
        {
            if (!string.IsNullOrEmpty(id))
            {
                _cooldowns[id.Trim()] = Time.time + CooldownSeconds;
            }
        }

        private bool IsOnCooldown(string id)
        {
            if (string.IsNullOrEmpty(id))
            {
                return true;
            }

            float expires;
            return _cooldowns.TryGetValue(id.Trim(), out expires) && Time.time < expires;
        }

        #endregion
    }
}
