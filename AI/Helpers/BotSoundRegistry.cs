// <auto-generated>
//   AI-Refactored: BotSoundRegistry.cs (Beyond Diamond – Max Realism, Positional/Comms Stutter-Proof Edition)
//   All positional queries routed through EFTPlayerUtil.GetPosition. No Transform or Position access allowed.
//   Voice comms fully isolated, no echo flood, no cascading failure. All logic is tick-free, stateless, and bulletproof.
//   MIT License.
// </auto-generated>

namespace AIRefactored.AI.Helpers
{
    using System;
    using System.Collections.Generic;
    using AIRefactored.AI.Core;
    using AIRefactored.Core;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Central registry for sound events: gunfire, footsteps, and perceived zones.
    /// Bulletproof: All logic is position-safe, voice-safe, and multiplayer/headless compliant.
    /// </summary>
    public static class BotSoundRegistry
    {
        #region Constants

        private const float DefaultHearingRadius = 30f;

        #endregion

        #region State

        private static readonly Dictionary<string, float> FootstepTimestamps = new Dictionary<string, float>(64);
        private static readonly Dictionary<string, float> ShotTimestamps = new Dictionary<string, float>(64);
        private static readonly Dictionary<string, Vector3> SoundZones = new Dictionary<string, Vector3>(64);

        private static bool _hasLoggedNullPlayer;
        private static bool _hasLoggedInvalidPosition;
        private static bool _hasLoggedCacheError;

        #endregion

        #region Public API

        public static void Clear()
        {
            FootstepTimestamps.Clear();
            ShotTimestamps.Clear();
            SoundZones.Clear();
        }

        public static bool FiredRecently(Player player, float withinSeconds = 1.5f, float now = -1f)
        {
            return TryGetLastShot(player, out float time) &&
                   ((now >= 0f ? now : Time.time) - time <= withinSeconds);
        }

        public static bool SteppedRecently(Player player, float withinSeconds = 1.2f, float now = -1f)
        {
            return TryGetLastStep(player, out float time) &&
                   ((now >= 0f ? now : Time.time) - time <= withinSeconds);
        }

        public static void NotifyShot(Player player)
        {
            try
            {
                if (!EFTPlayerUtil.IsValid(player))
                {
                    if (!_hasLoggedNullPlayer)
                    {
                        Plugin.LoggerInstance.LogWarning("[BotSoundRegistry] NotifyShot: Invalid player.");
                        _hasLoggedNullPlayer = true;
                    }
                    return;
                }

                string id = player.ProfileId;
                if (string.IsNullOrEmpty(id)) return;

                ShotTimestamps[id] = Time.time;

                Vector3 pos = EFTPlayerUtil.GetPosition(player);
                if (!IsValidVector(pos))
                {
                    if (!_hasLoggedInvalidPosition)
                    {
                        Plugin.LoggerInstance.LogWarning("[BotSoundRegistry] NotifyShot: Invalid player position.");
                        _hasLoggedInvalidPosition = true;
                    }
                    return;
                }

                SoundZones[id] = pos;
                TriggerSquadPing(id, pos, isGunshot: true);
            }
            catch (Exception ex)
            {
                Plugin.LoggerInstance.LogError($"[BotSoundRegistry] NotifyShot failed: {ex}");
            }
        }

        public static void NotifyStep(Player player)
        {
            try
            {
                if (!EFTPlayerUtil.IsValid(player))
                {
                    if (!_hasLoggedNullPlayer)
                    {
                        Plugin.LoggerInstance.LogWarning("[BotSoundRegistry] NotifyStep: Invalid player.");
                        _hasLoggedNullPlayer = true;
                    }
                    return;
                }

                string id = player.ProfileId;
                if (string.IsNullOrEmpty(id)) return;

                FootstepTimestamps[id] = Time.time;

                Vector3 pos = EFTPlayerUtil.GetPosition(player);
                if (!IsValidVector(pos))
                {
                    if (!_hasLoggedInvalidPosition)
                    {
                        Plugin.LoggerInstance.LogWarning("[BotSoundRegistry] NotifyStep: Invalid player position.");
                        _hasLoggedInvalidPosition = true;
                    }
                    return;
                }

                SoundZones[id] = pos;
                TriggerSquadPing(id, pos, isGunshot: false);
            }
            catch (Exception ex)
            {
                Plugin.LoggerInstance.LogError($"[BotSoundRegistry] NotifyStep failed: {ex}");
            }
        }

        public static bool TryGetLastShot(Player player, out float time)
        {
            time = -1f;
            if (!EFTPlayerUtil.IsValid(player)) return false;
            return ShotTimestamps.TryGetValue(player.ProfileId, out time);
        }

        public static bool TryGetLastStep(Player player, out float time)
        {
            time = -1f;
            if (!EFTPlayerUtil.IsValid(player)) return false;
            return FootstepTimestamps.TryGetValue(player.ProfileId, out time);
        }

        public static bool TryGetSoundPosition(Player player, out Vector3 pos)
        {
            pos = Vector3.zero;
            return EFTPlayerUtil.IsValid(player) &&
                   SoundZones.TryGetValue(player.ProfileId, out pos);
        }

        #endregion

        #region Internal

        private static void TriggerSquadPing(string sourceId, Vector3 location, bool isGunshot)
        {
            try
            {
                float radiusSq = DefaultHearingRadius * DefaultHearingRadius;

                foreach (var cache in BotCacheUtility.AllActiveBots())
                {
                    try
                    {
                        if (cache?.Bot == null || cache.Bot.IsDead)
                            continue;

                        if (cache.Bot.ProfileId == sourceId)
                            continue;

                        Vector3 pos = EFTPlayerUtil.GetPosition(cache.Bot.GetPlayer);
                        if ((pos - location).sqrMagnitude > radiusSq)
                            continue;

                        cache.RegisterHeardSound(location);

                        if (cache.GroupComms != null)
                        {
                            if (isGunshot)
                                cache.GroupComms.SaySuppression();
                            else
                                cache.GroupComms.SayFallback();
                        }
                    }
                    catch (Exception innerEx)
                    {
                        if (!_hasLoggedCacheError)
                        {
                            Plugin.LoggerInstance.LogWarning($"[BotSoundRegistry] TriggerSquadPing cache error: {innerEx}");
                            _hasLoggedCacheError = true;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Plugin.LoggerInstance.LogError($"[BotSoundRegistry] TriggerSquadPing outer error: {ex}");
            }
        }

        private static bool IsValidVector(Vector3 v)
        {
            return !float.IsNaN(v.x) && !float.IsInfinity(v.x) &&
                   !float.IsNaN(v.y) && !float.IsInfinity(v.y) &&
                   !float.IsNaN(v.z) && !float.IsInfinity(v.z) &&
                   (v.x != 0f || v.y != 0f || v.z != 0f);
        }

        #endregion
    }
}
