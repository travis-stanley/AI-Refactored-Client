// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Nav fallback logic must never assume registry is valid.
// </auto-generated>

namespace AIRefactored.AI.Navigation
{
    using AIRefactored.Core;
    using AIRefactored.Runtime;
    using BepInEx.Logging;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Validates bot navigation state at runtime. If nav data is invalid or missing,
    /// attempts fallback assignment or safely aborts further pathing logic.
    /// </summary>
    public static class BotNavValidator
    {
        #region Fields

        private static readonly ManualLogSource Logger = Plugin.LoggerInstance;
        private const float LogCooldown = 2.0f;
        private static float _lastLogTime;

        #endregion

        #region Public API

        /// <summary>
        /// Validates whether the bot has valid nav system backing and positioning.
        /// If not, attempts fallback assignment or returns false.
        /// </summary>
        public static bool Validate(BotOwner botOwner, string context)
        {
            if (botOwner == null)
            {
                TryLogOnce("[BotNavValidator] ❌ Null BotOwner in context: " + context);
                return false;
            }

            if (botOwner.Transform == null || botOwner.GetPlayer == null || botOwner.IsDead)
            {
                TryLogOnce("[BotNavValidator] ❌ Invalid bot state — dead or missing transform — context: " + context);
                return false;
            }

            Vector3 position = botOwner.Position;
            if (!IsValidPosition(position))
            {
                TryLogOnce("[BotNavValidator] ❌ Bot has invalid position — context: " + context);
                return false;
            }

            Vector3 target = Vector3.zero;

            if (NavPointRegistry.IsReady && !NavPointRegistry.IsEmpty)
            {
                target = NavPointRegistry.GetClosestPosition(position);
                if (!IsValidPosition(target))
                {
                    TryLogOnce("[BotNavValidator] ❌ Closest nav point is invalid — context: " + context);
                    target = FallbackNavPointProvider.GetSafePoint(position);
                }
            }
            else
            {
                TryLogOnce("[BotNavValidator] ⚠ Registry not ready or empty — using fallback — bot: " + GetBotName(botOwner) + ", context: " + context);
                target = FallbackNavPointProvider.GetSafePoint(position);
            }

            if (!IsValidPosition(target))
            {
                TryLogOnce("[BotNavValidator] ❌ No valid fallback found — context: " + context);
                return false;
            }

            if (botOwner.Mover != null && !botOwner.Mover.IsMoving)
            {
                // Bulletproof: go-to-point fallback, strictly safe
                botOwner.Mover.GoToPoint(
                    target,
                    slowAtTheEnd: true,
                    reachDist: 1.0f,
                    getUpWithCheck: false,
                    mustHaveWay: true,
                    onlyShortTrie: false,
                    force: true);
            }

            return true;
        }

        #endregion

        #region Helpers

        private static bool IsValidPosition(Vector3 pos)
        {
            return pos != Vector3.zero &&
                   !float.IsNaN(pos.x) &&
                   !float.IsNaN(pos.y) &&
                   !float.IsNaN(pos.z);
        }

        private static string GetBotName(BotOwner bot)
        {
            var info = bot.Profile?.Info;
            return info != null && !string.IsNullOrEmpty(info.Nickname) ? info.Nickname : "Unnamed";
        }

        private static void TryLogOnce(string msg)
        {
            float now = Time.time;
            if (now - _lastLogTime > LogCooldown)
            {
                Logger.LogWarning(msg);
                _lastLogTime = now;
            }
        }

        #endregion
    }
}
