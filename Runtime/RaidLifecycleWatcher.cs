// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
//   Bulletproof: All failures are locally contained, never break other subsystems, and always trigger fallback isolation.
// </auto-generated>

namespace AIRefactored.Runtime
{
    using System;
    using AIRefactored.AI.Core;
    using AIRefactored.Bootstrap;
    using AIRefactored.Core;
    using BepInEx.Logging;
    using EFT;

    /// <summary>
    /// Detects GameWorld lifecycle events and triggers mod startup/teardown accordingly.
    /// Works in both FIKA headless and standard modes.
    /// Bulletproof: All errors are strictly contained; mod/global state is never at risk.
    /// </summary>
    public sealed class RaidLifecycleWatcher : IAIWorldSystemBootstrapper
    {
        #region Fields

        private static readonly ManualLogSource Logger = Plugin.LoggerInstance;

        private static bool _initialized;
        private static bool _bound;

        /// <summary>
        /// Global singleton instance.
        /// </summary>
        public static RaidLifecycleWatcher Instance { get; } = new RaidLifecycleWatcher();

        #endregion

        #region Lifecycle

        /// <inheritdoc />
        public void Initialize()
        {
            _initialized = false;
            _bound = false;
        }

        /// <inheritdoc />
        public void Tick(float deltaTime)
        {
            try
            {
                if (_initialized || !GameWorldHandler.IsHost || !GameWorldHandler.IsReady())
                    return;

                GameWorld world = null;
                try
                {
                    world = GameWorldHandler.Get();
                    if (world == null)
                        return;
                }
                catch (Exception ex)
                {
                    Logger.LogError("[RaidLifecycleWatcher] GameWorld.Get() failed: " + ex);
                    return;
                }

                if (!_bound)
                {
                    try
                    {
                        GameWorld.OnDispose -= OnRaidEnded;
                        GameWorld.OnDispose += OnRaidEnded;
                        _bound = true;
                    }
                    catch (Exception ex)
                    {
                        Logger.LogError("[RaidLifecycleWatcher] Event bind failed: " + ex);
                        return;
                    }
                }

                try
                {
                    AIRefactoredController.OnRaidStarted(world);
                    _initialized = true;
                    Logger.LogDebug("[RaidLifecycleWatcher] ✅ Raid start detected — initialization complete.");
                }
                catch (Exception ex)
                {
                    Logger.LogError("[RaidLifecycleWatcher] ❌ OnRaidStarted error: " + ex);
                }
            }
            catch (Exception ex)
            {
                Logger.LogError("[RaidLifecycleWatcher] ❌ Tick error: " + ex);
            }
        }

        /// <inheritdoc />
        public void OnRaidEnd()
        {
            try
            {
                if (_bound)
                {
                    try
                    {
                        GameWorld.OnDispose -= OnRaidEnded;
                        _bound = false;
                    }
                    catch (Exception ex)
                    {
                        Logger.LogError("[RaidLifecycleWatcher] Event unbind failed: " + ex);
                    }
                }

                if (_initialized)
                {
                    try
                    {
                        _initialized = false;
                        AIRefactoredController.OnRaidEnded();
                        Logger.LogDebug("[RaidLifecycleWatcher] 🧹 Raid end detected — cleanup complete.");
                    }
                    catch (Exception ex)
                    {
                        Logger.LogError("[RaidLifecycleWatcher] ❌ OnRaidEnded cleanup error: " + ex);
                    }
                }
            }
            catch (Exception ex)
            {
                Logger.LogError("[RaidLifecycleWatcher] ❌ OnRaidEnd error: " + ex);
            }
        }

        #endregion

        #region Static Event Handler

        private static void OnRaidEnded()
        {
            try
            {
                Instance.OnRaidEnd();
            }
            catch (Exception ex)
            {
                Logger.LogError("[RaidLifecycleWatcher] ❌ OnRaidEnded static handler error: " + ex);
            }
        }

        #endregion

        #region Phase Control

        /// <inheritdoc />
        public bool IsReady()
        {
            return true;
        }

        /// <inheritdoc />
        public WorldPhase RequiredPhase()
        {
            return WorldPhase.AwaitWorld;
        }

        #endregion
    }
}
