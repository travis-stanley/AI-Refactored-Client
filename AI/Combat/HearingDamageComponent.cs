// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Failures in AIRefactored logic must always trigger safe fallback to EFT base AI.
// </auto-generated>

namespace AIRefactored.AI.Combat
{
    using UnityEngine;

    /// <summary>
    /// Simulates hearing damage effects such as deafness after loud sounds.
    /// Fades gradually over time to mimic realistic ear recovery.
    /// </summary>
    public sealed class HearingDamageComponent
    {
        #region Fields

        private float _targetDeafness;
        private float _deafnessLevel;
        private float _deafDuration;
        private float _elapsedTime;

        #endregion

        #region Properties

        /// <summary>
        /// Gets the current deafness intensity (0.0 to 1.0).
        /// </summary>
        public float Deafness => _deafnessLevel;

        /// <summary>
        /// Gets a value indicating whether the bot is currently affected by deafness.
        /// </summary>
        public bool IsDeafened => _deafnessLevel > 0.1f;

        /// <summary>
        /// Gets the remaining deafness duration in seconds.
        /// </summary>
        public float RemainingTime
        {
            get
            {
                float remaining = _deafDuration - _elapsedTime;
                return remaining > 0f ? remaining : 0f;
            }
        }

        #endregion

        #region Public Methods

        /// <summary>
        /// Applies a new deafness effect with the specified intensity and duration.
        /// Only overrides if intensity is stronger than current.
        /// </summary>
        /// <param name="intensity">Intensity from 0.0 to 1.0 (clamped).</param>
        /// <param name="duration">Duration in seconds (min 0.1s).</param>
        public void ApplyDeafness(float intensity, float duration)
        {
            float newIntensity = Mathf.Clamp01(intensity);
            float newDuration = duration < 0.1f ? 0.1f : duration;

            if (newIntensity > _targetDeafness)
            {
                _targetDeafness = newIntensity;
                _deafDuration = newDuration;
                _elapsedTime = 0f;
                _deafnessLevel = newIntensity;
            }
        }

        /// <summary>
        /// Immediately clears all deafness effects.
        /// </summary>
        public void Clear()
        {
            _targetDeafness = 0f;
            _deafnessLevel = 0f;
            _deafDuration = 0f;
            _elapsedTime = 0f;
        }

        /// <summary>
        /// Updates the deafness level over time. Call every frame.
        /// </summary>
        /// <param name="deltaTime">Delta time in seconds.</param>
        public void Tick(float deltaTime)
        {
            if (_targetDeafness <= 0.01f)
                return;

            _elapsedTime += deltaTime;

            if (_elapsedTime >= _deafDuration)
            {
                Clear();
                return;
            }

            float ratio = Mathf.Clamp01(1f - (_elapsedTime / _deafDuration));
            _deafnessLevel = _targetDeafness * ratio;
        }

        #endregion
    }
}
