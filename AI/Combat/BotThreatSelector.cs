// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Failures in AIRefactored logic must always trigger safe fallback to EFT base AI.
// </auto-generated>

namespace AIRefactored.AI.Combat
{
    using System;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Memory;
    using AIRefactored.AI.Navigation;
    using AIRefactored.Core;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Selects and maintains the most viable enemy target based on distance, visibility, memory, and tactical realism.
    /// Prevents erratic switching and reinforces believable combat behavior.
    /// </summary>
    public sealed class BotThreatSelector
    {
        #region Constants

        private const float EvaluationCooldown = 0.35f;
        private const float MaxScanDistance = 120f;
        private const float SwitchCooldown = 2.0f;

        private const float VisibilityBonus = 25f;
        private const float RecentSeenBonus = 10f;
        private const float BlindPenalty = 20f;
        private const float HiddenPenalty = 5f;
        private const float UnknownPenalty = 10f;

        private const float AggressionPersistenceWindow = 6f;
        private const float AggressionMaxBonus = 15f;
        private const float TargetSwitchThreshold = 10f;

        #endregion

        #region Fields

        private readonly BotOwner _bot;
        private readonly BotComponentCache _cache;
        private readonly BotPersonalityProfile _profile;

        private float _lastTargetSwitchTime = -999f;
        private float _nextEvaluateTime;
        private Player _currentTarget;

        #endregion

        #region Properties

        public Player CurrentTarget => _currentTarget;

        #endregion

        #region Constructor

        public BotThreatSelector(BotComponentCache cache)
        {
            if (cache == null || cache.Bot == null || cache.AIRefactoredBotOwner == null)
            {
                throw new ArgumentNullException(nameof(cache));
            }

            _cache = cache;
            _bot = cache.Bot;
            _profile = cache.AIRefactoredBotOwner.PersonalityProfile;
        }

        #endregion

        #region Public Methods

        public void Tick(float time)
        {
            if (time < _nextEvaluateTime || _bot == null || _bot.IsDead || !_bot.IsAI)
            {
                return;
            }

            _nextEvaluateTime = time + EvaluationCooldown;

            var players = GameWorldHandler.GetAllAlivePlayers();
            if (players == null || players.Count == 0)
            {
                return;
            }

            Player bestTarget = null;
            float bestScore = float.MinValue;

            for (int i = 0; i < players.Count; i++)
            {
                Player candidate = players[i];
                if (!EFTPlayerUtil.IsValid(candidate))
                {
                    continue;
                }

                string profileId = candidate.ProfileId;
                if (string.IsNullOrEmpty(profileId) || profileId == _bot.ProfileId)
                {
                    continue;
                }

                if (!EFTPlayerUtil.IsEnemyOf(_bot, candidate))
                {
                    continue;
                }

                float score = ScoreTarget(candidate, time);
                if (score > bestScore)
                {
                    bestScore = score;
                    bestTarget = candidate;
                }
            }

            if (bestTarget == null)
            {
                return;
            }

            if (_currentTarget == null)
            {
                SetTarget(bestTarget, time);
                return;
            }

            float currentScore = ScoreTarget(_currentTarget, time);
            float cooldown = SwitchCooldown * (1f - (_profile.AggressionLevel * 0.5f));

            if (bestScore > currentScore + TargetSwitchThreshold &&
                time > _lastTargetSwitchTime + cooldown)
            {
                SetTarget(bestTarget, time);
            }
        }

        public void ResetTarget()
        {
            _currentTarget = null;
        }

        public Player GetPriorityTarget()
        {
            if (EFTPlayerUtil.IsValid(_currentTarget))
            {
                return _currentTarget;
            }

            string id = _cache.TacticalMemory.GetMostRecentEnemyId();
            if (string.IsNullOrEmpty(id))
            {
                return null;
            }

            Player fallback = EFTPlayerUtil.ResolvePlayerById(id);
            return EFTPlayerUtil.IsValid(fallback) ? fallback : null;
        }

        public string GetTargetProfileId()
        {
            return _currentTarget != null ? _currentTarget.ProfileId : string.Empty;
        }

        #endregion

        #region Private Methods

        private float ScoreTarget(Player candidate, float time)
        {
            Vector3 botPos = _bot.Position;
            Vector3 targetPos = EFTPlayerUtil.GetPosition(candidate);
            float distance = Vector3.Distance(botPos, targetPos);

            if (distance > MaxScanDistance)
            {
                return float.MinValue;
            }

            float score = MaxScanDistance - distance;

            EnemyInfo info = GetEnemyInfo(candidate);
            if (info != null)
            {
                if (info.IsVisible)
                {
                    score += VisibilityBonus;

                    if (info.PersonalLastSeenTime + 2f > time)
                    {
                        score += RecentSeenBonus;
                    }

                    if (_profile.Caution > 0.6f)
                    {
                        score += 5f;
                    }

                    if (_cache.IsBlinded && _cache.BlindUntilTime > time)
                    {
                        score -= BlindPenalty;
                    }
                }
                else
                {
                    score -= HiddenPenalty;

                    if (_profile.AggressionLevel > 0.7f)
                    {
                        float unseen = time - info.PersonalLastSeenTime;
                        if (unseen < AggressionPersistenceWindow)
                        {
                            float bonus = Mathf.Lerp(0f, AggressionMaxBonus, 1f - (unseen / AggressionPersistenceWindow));
                            score += bonus;
                        }
                    }
                }
            }
            else
            {
                score -= UnknownPenalty;
            }

            return score;
        }

        private EnemyInfo GetEnemyInfo(Player candidate)
        {
            if (candidate == null || _bot.EnemiesController == null)
            {
                return null;
            }

            string id = candidate.ProfileId;
            if (string.IsNullOrEmpty(id))
            {
                return null;
            }

            var enemyInfos = _bot.EnemiesController.EnemyInfos;
            if (enemyInfos != null)
            {
                foreach (var kvp in enemyInfos)
                {
                    if (kvp.Key is Player known && known.ProfileId == id)
                    {
                        return kvp.Value;
                    }
                }
            }

            if (_bot.Memory?.GoalEnemy?.Person?.ProfileId == id)
            {
                return _bot.Memory.GoalEnemy;
            }

            return null;
        }

        private void SetTarget(Player target, float time)
        {
            _currentTarget = target;
            _lastTargetSwitchTime = time;

            string id = target.ProfileId;
            if (!string.IsNullOrEmpty(id))
            {
                _cache.TacticalMemory.RecordEnemyPosition(EFTPlayerUtil.GetPosition(target), "Target", id);
                _cache.LastShotTracker?.RegisterHit(id);
            }

            if (_cache.Movement != null && !_cache.Bot.IsDead && _cache.Bot.Mover != null && !_cache.Bot.Mover.IsMoving)
            {
                Vector3 fallback = Vector3.zero;

                if (NavPointRegistry.IsReady && !NavPointRegistry.IsEmpty)
                {
                    fallback = NavPointRegistry.GetClosestPosition(_cache.Bot.Position);
                }

                if (!BotNavValidator.Validate(_cache.Bot, nameof(SetTarget)))
                {
                    fallback = FallbackNavPointProvider.GetSafePoint(_cache.Bot.Position);
                }

                if (fallback != Vector3.zero)
                {
                    _cache.Bot.Mover.GoToPoint(fallback, true, 1.0f);
                }
            }
        }

        #endregion
    }
}
