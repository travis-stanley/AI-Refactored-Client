// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   All methods are bulletproof and locally isolated; never break the mod or bot logic on failure.
// </auto-generated>

namespace AIRefactored.AI.Memory
{
    using System;
    using System.Collections.Generic;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Helpers;
    using AIRefactored.AI.Navigation;
    using AIRefactored.AI.Optimization;
    using AIRefactored.Core;
    using AIRefactored.Pools;
    using BepInEx.Logging;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Tactical extensions for BotOwner memory and behavior.
    /// Provides fallback, search toggles, flanking, and auditory memory tracking.
    /// All methods are bulletproof and locally isolated; never break the mod or bot logic on failure.
    /// </summary>
    public static class BotMemoryExtensions
    {
        #region Constants

        private const float MinMoveThreshold = 0.5f;
        private const float FlankDotThreshold = 0.25f;
        private const float EnemyTooCloseSqr = 1.0f;
        private const float InvestigateRangeSqr = 625f;

        #endregion

        #region Logging

        private static readonly ManualLogSource Logger = Plugin.LoggerInstance;

        #endregion

        #region Fallback + Movement

        public static void ClearLastHeardSound(this BotOwner bot)
        {
            try
            {
                if (bot != null)
                    BotMemoryStore.ClearHeardSound(bot.ProfileId);
            }
            catch (Exception ex)
            {
                Logger.LogError($"[BotMemoryExtensions] ClearLastHeardSound failed: {ex}");
            }
        }

        public static void FallbackTo(this BotOwner bot, Vector3 fallbackPosition)
        {
            try
            {
                if (!EFTPlayerUtil.IsValidBotOwner(bot) || fallbackPosition.sqrMagnitude < MinMoveThreshold)
                    return;

                BotComponentCache cache = BotCacheUtility.GetCache(bot);
                if (cache?.PanicHandler?.IsPanicking == true)
                    return;

                Vector3 safeTarget;
                if (BotNavHelper.TryGetSafeTarget(bot, out safeTarget))
                {
                    BotMovementHelper.SmoothMoveTo(bot, safeTarget);
                }
                // If no safe target found, bot pauses and waits for retry. No teleport.
            }
            catch (Exception ex)
            {
                Logger.LogError($"[BotMemoryExtensions] FallbackTo failed: {ex}");
            }
        }

        public static void ForceMoveTo(this BotOwner bot, Vector3 position)
        {
            try
            {
                if (EFTPlayerUtil.IsValidBotOwner(bot) && position.sqrMagnitude >= MinMoveThreshold)
                {
                    Vector3 safeTarget;
                    if (BotNavHelper.TryGetSafeTarget(bot, out safeTarget))
                    {
                        BotMovementHelper.SmoothMoveTo(bot, safeTarget);
                    }
                }
            }
            catch (Exception ex)
            {
                Logger.LogError($"[BotMemoryExtensions] ForceMoveTo failed: {ex}");
            }
        }

        #endregion

        #region Cover Reevaluation

        public static void ReevaluateCurrentCover(this BotOwner bot)
        {
            try
            {
                if (!EFTPlayerUtil.IsValidBotOwner(bot))
                    return;

                EnemyInfo goal = bot.Memory?.GoalEnemy;
                if (goal == null || !goal.IsVisible)
                    return;

                Vector3 toEnemy = goal.CurrPosition - bot.Position;
                float sqrDist = toEnemy.sqrMagnitude;

                if (sqrDist < EnemyTooCloseSqr)
                    return;

                float angle = Vector3.Angle(bot.LookDirection, toEnemy.normalized);
                if (angle >= 20f || sqrDist >= InvestigateRangeSqr)
                    return;

                Vector3 fallback = bot.Position - (toEnemy.normalized * 5f);
                Vector3 destination = new Vector3(fallback.x, bot.Position.y, fallback.z);

                BotComponentCache cache = BotCacheUtility.GetCache(bot);
                if (cache?.CoverPlanner != null)
                {
                    List<Vector3> path = cache.CoverPlanner.GetCoverRetreatPath(toEnemy);
                    if (path != null && path.Count > 0)
                    {
                        Vector3 last = path[path.Count - 1];
                        destination = new Vector3(last.x, bot.Position.y, last.z);
                    }
                }

                Vector3 safeTarget;
                if (BotNavHelper.TryGetSafeTarget(bot, out safeTarget))
                {
                    BotMovementHelper.SmoothMoveTo(bot, safeTarget);
                }

                if (!FikaHeadlessDetector.IsHeadless && bot.BotTalk != null)
                    bot.BotTalk.TrySay(EPhraseTrigger.OnLostVisual);
            }
            catch (Exception ex)
            {
                Logger.LogError($"[BotMemoryExtensions] ReevaluateCurrentCover failed: {ex}");
            }
        }

        #endregion

        #region Mode Transitions

        public static void SetCautiousSearchMode(this BotOwner bot)
        {
            try
            {
                if (bot?.Memory != null)
                {
                    bot.Memory.AttackImmediately = false;
                    bot.Memory.IsPeace = false;
                }
            }
            catch (Exception ex)
            {
                Logger.LogError($"[BotMemoryExtensions] SetCautiousSearchMode failed: {ex}");
            }
        }

        public static void SetCombatAggressionMode(this BotOwner bot)
        {
            try
            {
                if (bot?.Memory != null)
                {
                    bot.Memory.AttackImmediately = true;
                    bot.Memory.IsPeace = false;
                }
            }
            catch (Exception ex)
            {
                Logger.LogError($"[BotMemoryExtensions] SetCombatAggressionMode failed: {ex}");
            }
        }

        public static void SetPeaceMode(this BotOwner bot)
        {
            try
            {
                if (bot?.Memory != null)
                {
                    bot.Memory.AttackImmediately = false;
                    bot.Memory.IsPeace = true;
                    bot.Memory.CheckIsPeace();
                }
            }
            catch (Exception ex)
            {
                Logger.LogError($"[BotMemoryExtensions] SetPeaceMode failed: {ex}");
            }
        }

        #endregion

        #region Audio Detection

        public static void SetLastHeardSound(this BotOwner bot, Player source)
        {
            try
            {
                if (!EFTPlayerUtil.IsValidBotOwner(bot) || !EFTPlayerUtil.IsValid(source))
                    return;

                if (bot.ProfileId == source.ProfileId)
                    return;

                Vector3 sourcePos = EFTPlayerUtil.GetPosition(source);
                if (sourcePos.sqrMagnitude < 0.01f)
                    return;

                BotMemoryStore.AddHeardSound(bot.ProfileId, sourcePos, Time.time);

                // Advance toward sound, but validate.
                Vector3 cautiousAdvance = sourcePos + ((bot.Position - sourcePos).normalized * 3f);
                Vector3 safeTarget;
                if (BotNavHelper.TryGetSafeTarget(bot, out safeTarget))
                {
                    BotMovementHelper.SmoothMoveTo(bot, safeTarget);
                }

                if (!FikaHeadlessDetector.IsHeadless && bot.BotTalk != null)
                    bot.BotTalk.TrySay(EPhraseTrigger.OnEnemyShot);
            }
            catch (Exception ex)
            {
                Logger.LogError($"[BotMemoryExtensions] SetLastHeardSound failed: {ex}");
            }
        }

        #endregion

        #region Flanking Logic

        public static Vector3 TryGetFlankDirection(this BotOwner bot, out bool success)
        {
            success = false;
            try
            {
                if (!EFTPlayerUtil.IsValidBotOwner(bot))
                    return Vector3.zero;

                EnemyInfo goal = bot.Memory?.GoalEnemy;
                if (goal == null)
                    return Vector3.zero;

                Vector3 toEnemy = goal.CurrPosition - bot.Position;
                if (toEnemy.sqrMagnitude < MinMoveThreshold)
                    return Vector3.zero;

                Vector3 enemyDir = toEnemy.normalized;
                Vector3 botDir = bot.LookDirection.normalized;

                if (Vector3.Dot(botDir, enemyDir) < FlankDotThreshold)
                    return Vector3.zero;

                success = true;
                // Always return a normalized, right-flank direction.
                Vector3 flank = Vector3.Cross(enemyDir, Vector3.up).normalized * 1.2f;
                return flank;
            }
            catch (Exception ex)
            {
                Logger.LogError($"[BotMemoryExtensions] TryGetFlankDirection failed: {ex}");
                success = false;
                return Vector3.zero;
            }
        }

        #endregion
    }
}
