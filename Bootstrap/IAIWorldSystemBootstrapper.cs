// <auto-generated>
//   AI-Refactored: IAIWorldSystemBootstrapper.cs (Beyond Diamond – Canonical Modular Lifecycle Interface)
//   SYSTEMATICALLY MANAGED. All implementers must provide bulletproof error isolation and state gating.
//   Compliant with: Ultimate AIRefactored Realism, SPT/FIKA headless parity, full phased initialization.
//   MIT License.
// </auto-generated>

namespace AIRefactored.AI.Core
{
    using AIRefactored.Bootstrap;

    /// <summary>
    /// Canonical interface for all modular AIRefactored world systems.
    /// Enables strict phased lifecycle, bulletproof tick gating, and robust teardown.
    /// </summary>
    public interface IAIWorldSystemBootstrapper
    {
        /// <summary>
        /// Called once when the system is permitted to initialize in its configured world phase.
        /// Implementers must perform all one-time setup here, with no hidden or deferred logic.
        /// If the system cannot initialize, it must ensure IsReady() remains false.
        /// All exceptions must be strictly locally contained.
        /// </summary>
        void Initialize();

        /// <summary>
        /// Called once per frame (or tick) after initialization, if IsReady() returns true.
        /// All tick logic must be bulletproof, fully error-isolated, and must never break or disable other systems.
        /// </summary>
        /// <param name="deltaTime">The time elapsed in seconds since the last tick.</param>
        void Tick(float deltaTime);

        /// <summary>
        /// Called exactly once at the end of each raid/session.
        /// Use this method to clear memory, detach handlers, or fully reset system state.
        /// Must never throw or leave the system in an invalid global state.
        /// </summary>
        void OnRaidEnd();

        /// <summary>
        /// Returns true if the system is fully initialized, ready, and safe to receive Tick() calls.
        /// Never return true until all dependencies are available and the system is internally valid.
        /// </summary>
        /// <returns>True if the system is active and valid; otherwise, false.</returns>
        bool IsReady();

        /// <summary>
        /// Specifies the minimum world phase required before this system can safely initialize.
        /// Used by WorldBootstrapper to sequence and defer bootstrap until all prerequisites are met.
        /// </summary>
        /// <returns>The <see cref="WorldPhase"/> required for initialization.</returns>
        WorldPhase RequiredPhase();
    }
}
