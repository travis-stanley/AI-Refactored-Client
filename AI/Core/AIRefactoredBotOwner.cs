// <auto-generated>
//   AI-Refactored: AIRefactoredBotOwner.cs (Beyond Diamond Edition)
//   Bulletproof atomic wiring, always locally error-isolated. No fallback disables.
//   MIT License.
// </auto-generated>

namespace AIRefactored.AI.Core
{
    using System;
    using AIRefactored.AI.Missions;
    using AIRefactored.Core;
    using AIRefactored.Runtime;
    using BepInEx.Logging;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Holds AIRefactored-specific metadata for a bot, including personality, zone, tuning, and runtime behavior state.
    /// Owner/cache wiring is atomic and bulletproof. All failures locally isolated.
    /// </summary>
    public sealed class AIRefactoredBotOwner
    {
        private static readonly ManualLogSource Logger = Plugin.LoggerInstance;

        private BotOwner _bot;
        private BotComponentCache _cache;
        private BotMissionController _missionController;
        private bool _isInitialized;

        /// <summary>Returns the backing BotOwner, or logs if not initialized.</summary>
        public BotOwner Bot => !_isInitialized || _bot == null
            ? LogAndReturnNull("[AIRefactoredBotOwner] Bot accessed before initialization.")
            : _bot;

        /// <summary>Returns the backing cache, or logs if not initialized.</summary>
        public BotComponentCache Cache => !_isInitialized || _cache == null
            ? LogAndReturnEmptyCache()
            : _cache;

        /// <summary>Controller managing this bot's mission state.</summary>
        public BotMissionController MissionController
        {
            get
            {
                if (_missionController == null)
                    Logger.LogError("[AIRefactoredBotOwner] MissionController is null.");
                return _missionController;
            }
        }

        /// <summary>Bot's currently assigned personality profile.</summary>
        public BotPersonalityProfile PersonalityProfile { get; private set; }

        /// <summary>Human-readable name of the assigned personality.</summary>
        public string PersonalityName { get; private set; }

        /// <summary>Zone tag assigned to this bot.</summary>
        public string AssignedZone { get; private set; }

        /// <summary>True if this owner has been initialized and is safe to use.</summary>
        public bool IsInitialized => _isInitialized;

        public AIRefactoredBotOwner()
        {
            PersonalityProfile = new BotPersonalityProfile();
            PersonalityName = "Unknown";
            AssignedZone = "unknown";
            _isInitialized = false;
        }

        /// <summary>
        /// Initializes the AIRefactored owner and wires it to the provided bot and cache.
        /// </summary>
        public void Initialize(BotOwner bot)
        {
            if (_isInitialized)
            {
                Logger.LogWarning($"[AIRefactoredBotOwner] Already initialized for bot {bot?.Profile?.Id ?? "unknown"} — skipping.");
                return;
            }

            if (bot == null)
            {
                Logger.LogError("[AIRefactoredBotOwner] Initialization failed: bot was null.");
                return;
            }

            _bot = bot;
            string id = bot.Profile?.Id ?? "null-profile";

            try
            {
                _cache = BotComponentCacheRegistry.TryGetExisting(bot);
                if (_cache == null)
                {
                    Logger.LogError($"[AIRefactoredBotOwner] Cache not found for bot {id} — will retry until available.");
                    return;
                }

                if (_cache.AIRefactoredBotOwner != this)
                {
                    _cache.SetOwner(this);
                    Logger.LogDebug($"[AIRefactoredBotOwner] SetOwner atomic wire for {id}.");
                }

                WildSpawnType role = bot.Profile?.Info?.Settings?.Role ?? WildSpawnType.assault;
                BotPersonalityProfile profile = BotRegistry.GetOrGenerate(id, PersonalityType.Balanced, role);
                InitProfile(profile, profile?.Personality.ToString() ?? "Balanced");

                _isInitialized = true;

                if (!FikaHeadlessDetector.IsHeadless)
                {
                    string nickname = bot.Profile?.Info?.Nickname ?? "Unnamed";
                    Logger.LogDebug($"[AIRefactoredBotOwner] Initialized for bot: {nickname}");
                }

                _cache.OnOwnerAttached();
            }
            catch (Exception ex)
            {
                Logger.LogError($"[AIRefactoredBotOwner] Initialization failed: {ex}");
            }
        }

        /// <summary>
        /// Initializes the bot's personality from a PersonalityType enum.
        /// </summary>
        public void InitProfile(PersonalityType type)
        {
            try
            {
                if (!BotPersonalityPresets.Presets.TryGetValue(type, out var preset) || preset == null)
                {
                    preset = BotPersonalityPresets.Presets[PersonalityType.Adaptive];
                    PersonalityName = "Adaptive";
                    Logger.LogWarning($"[AIRefactoredBotOwner] Invalid personality type '{type}' — using Adaptive.");
                }
                else
                {
                    PersonalityName = type.ToString();
                }

                PersonalityProfile = preset;

                if (!FikaHeadlessDetector.IsHeadless)
                    Logger.LogDebug($"[AIRefactoredBotOwner] Personality assigned: {PersonalityName}");
            }
            catch (Exception ex)
            {
                Logger.LogError($"[AIRefactoredBotOwner] InitProfile(type) failed: {ex}");
                PersonalityProfile = new BotPersonalityProfile();
                PersonalityName = "Default";
            }
        }

        /// <summary>
        /// Initializes the bot's personality with a provided profile and optional name.
        /// </summary>
        public void InitProfile(BotPersonalityProfile profile, string name)
        {
            try
            {
                if (profile == null)
                {
                    Logger.LogError("[AIRefactoredBotOwner] InitProfile failed: profile is null.");
                    PersonalityProfile = new BotPersonalityProfile();
                    PersonalityName = "Default";
                    return;
                }

                PersonalityProfile = profile;
                PersonalityName = string.IsNullOrEmpty(name) ? "Custom" : name;

                if (!FikaHeadlessDetector.IsHeadless)
                    Logger.LogDebug($"[AIRefactoredBotOwner] Custom profile assigned: {PersonalityName}");
            }
            catch (Exception ex)
            {
                Logger.LogError($"[AIRefactoredBotOwner] InitProfile(profile, name) failed: {ex}");
                PersonalityProfile = new BotPersonalityProfile();
                PersonalityName = "Default";
            }
        }

        /// <summary>
        /// Clears the current personality and assigns a neutral fallback.
        /// </summary>
        public void ClearPersonality()
        {
            try
            {
                PersonalityProfile = new BotPersonalityProfile();
                PersonalityName = "Cleared";

                if (!FikaHeadlessDetector.IsHeadless)
                    Logger.LogDebug("[AIRefactoredBotOwner] Personality cleared.");
            }
            catch { }
        }

        /// <summary>
        /// Whether the bot currently has an assigned personality profile.
        /// </summary>
        public bool HasPersonality() => PersonalityProfile != null;

        /// <summary>
        /// Assigns a zone tag (used by NavPointRegistry and mission planners).
        /// </summary>
        public void SetZone(string zoneName)
        {
            try
            {
                if (!string.IsNullOrEmpty(zoneName))
                {
                    AssignedZone = zoneName;
                    if (!FikaHeadlessDetector.IsHeadless)
                        Logger.LogDebug($"[AIRefactoredBotOwner] Zone assigned: {zoneName}");
                }
            }
            catch (Exception ex)
            {
                Logger.LogError($"[AIRefactoredBotOwner] SetZone failed: {ex}");
            }
        }

        /// <summary>
        /// Sets the bot's mission controller (controls top-level objective logic).
        /// </summary>
        public void SetMissionController(BotMissionController controller)
        {
            try
            {
                if (controller == null)
                {
                    Logger.LogError("[AIRefactoredBotOwner] SetMissionController failed: controller is null.");
                    return;
                }

                _missionController = controller;
            }
            catch (Exception ex)
            {
                Logger.LogError($"[AIRefactoredBotOwner] SetMissionController failed: {ex}");
            }
        }

        private static BotOwner LogAndReturnNull(string msg)
        {
            Logger.LogError(msg);
            return null;
        }

        private static BotComponentCache LogAndReturnEmptyCache()
        {
            Logger.LogError("[AIRefactoredBotOwner] Cache accessed before initialization.");
            return BotComponentCache.Empty;
        }
    }
}
