// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

namespace AIRefactored.Runtime
{
    using System;
    using System.Reflection;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Navigation;
    using AIRefactored.Core;
    using BepInEx.Logging;
    using Comfort.Common;
    using EFT;
    using HarmonyLib;
    using UnityEngine;

    /// <summary>
    /// Detects the creation of a GameWorld and immediately invokes InitPhaseRunner when ready.
    /// Hooks into EFT world lifecycle to bypass polling.
    /// </summary>
    public sealed class GameWorldSpawnHook : MonoBehaviour
    {
        private static readonly ManualLogSource Logger = Plugin.LoggerInstance;
        private static bool _hooked;

        private void Awake()
        {
            try
            {
                if (_hooked)
                {
                    Logger.LogDebug("[GameWorldSpawnHook] Already hooked — skipping duplicate patch.");
                    Destroy(this);
                    return;
                }

                Logger.LogDebug("[GameWorldSpawnHook] Hooking GameWorld.OnGameStarted...");

                MethodInfo method = AccessTools.Method(typeof(GameWorld), "OnGameStarted");
                if (method == null)
                {
                    Logger.LogError("[GameWorldSpawnHook] ❌ Failed to locate GameWorld.OnGameStarted.");
                    Destroy(this);
                    return;
                }

                Harmony harmony = new Harmony("ai.refactored.spawnhook");
                harmony.Patch(method, postfix: new HarmonyMethod(typeof(GameWorldSpawnPatch), nameof(GameWorldSpawnPatch.Postfix)));

                _hooked = true;
                Logger.LogDebug("[GameWorldSpawnHook] ✅ Harmony patch installed.");
            }
            catch (Exception ex)
            {
                Logger.LogError("[GameWorldSpawnHook] ❌ Exception during Awake: " + ex);
            }
        }

        private void OnDestroy()
        {
            _hooked = false;
        }

        /// <summary>
        /// Harmony patch for GameWorld.OnGameStarted to trigger InitPhaseRunner.
        /// </summary>
        private static class GameWorldSpawnPatch
        {
            public static void Postfix()
            {
                try
                {
                    GameWorld world = Singleton<GameWorld>.Instantiated ? Singleton<GameWorld>.Instance : null;
                    if (world == null)
                    {
                        Logger.LogWarning("[GameWorldSpawnHook] GameWorld.Instance is null — skipping init.");
                        return;
                    }

                    if (!GameWorldHandler.IsHost)
                    {
                        Logger.LogDebug("[GameWorldSpawnHook] Skipped init — not a valid host.");
                        return;
                    }

                    if (FikaHeadlessDetector.IsHeadless && !FikaHeadlessDetector.HasRaidStarted())
                    {
                        Logger.LogDebug("[GameWorldSpawnHook] FIKA Headless not ready — skipping early init.");
                        return;
                    }

                    Logger.LogDebug("[GameWorldSpawnHook] GameWorld active — warming NavMesh and bootstrapping...");

                    NavMeshWarmupManager.TryPrebuildNavMesh();

                    string mapId = GameWorldHandler.TryGetValidMapName();
                    if (!string.IsNullOrEmpty(mapId))
                    {
                        NavPointRegistry.RegisterAll(mapId);
                    }
                    else
                    {
                        Logger.LogWarning("[GameWorldSpawnHook] Could not determine map ID for NavPoint registration.");
                    }

                    Logger.LogDebug("[GameWorldSpawnHook] ✅ Triggering InitPhaseRunner...");
                    InitPhaseRunner.Begin(Logger);
                }
                catch (Exception ex)
                {
                    Logger.LogError("[GameWorldSpawnHook] ❌ Postfix error: " + ex);
                }
            }
        }
    }
}
