// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
//   All errors are locally isolated; container cache never affects the rest of the mod or bot logic.
// </auto-generated>

namespace AIRefactored.AI.Looting
{
    using System;
    using System.Collections.Generic;
    using AIRefactored.Core;
    using BepInEx.Logging;
    using EFT;
    using EFT.Interactive;

    /// <summary>
    /// Caches LootableContainer references for dead player bodies to avoid expensive runtime lookups.
    /// Safe for repeated reads by AI loot systems. Bulletproof error isolation.
    /// </summary>
    public static class DeadBodyContainerCache
    {
        #region Fields

        private static readonly Dictionary<string, LootableContainer> Containers = new Dictionary<string, LootableContainer>(64);
        private static ManualLogSource Logger => Plugin.LoggerInstance;

        #endregion

        #region Public API

        /// <summary>
        /// Clears all dead body container associations.
        /// </summary>
        public static void Clear()
        {
            try
            {
                Containers.Clear();
            }
            catch (Exception ex)
            {
                Logger.LogError($"[DeadBodyContainerCache] Clear() failed: {ex}");
            }
        }

        /// <summary>
        /// Checks if a container is cached for the given player profile ID.
        /// </summary>
        public static bool Contains(string profileId)
        {
            try
            {
                return TryGetValidKey(profileId, out string key) && Containers.ContainsKey(key);
            }
            catch (Exception ex)
            {
                Logger.LogError($"[DeadBodyContainerCache] Contains({profileId}) failed: {ex}");
                return false;
            }
        }

        /// <summary>
        /// Gets the cached LootableContainer for a player, or null if missing.
        /// </summary>
        public static LootableContainer Get(string profileId)
        {
            try
            {
                if (!TryGetValidKey(profileId, out string key))
                {
                    return null;
                }

                Containers.TryGetValue(key, out var result);
                return result;
            }
            catch (Exception ex)
            {
                Logger.LogError($"[DeadBodyContainerCache] Get({profileId}) failed: {ex}");
                return null;
            }
        }

        /// <summary>
        /// Registers a LootableContainer for a dead player body.
        /// </summary>
        public static void Register(Player player, LootableContainer container)
        {
            try
            {
                if (!EFTPlayerUtil.IsValid(player) || container == null)
                {
                    return;
                }

                if (!TryGetValidKey(player.ProfileId, out string key))
                {
                    return;
                }

                if (!Containers.ContainsKey(key))
                {
                    Containers.Add(key, container);
                }
            }
            catch (Exception ex)
            {
                Logger.LogError($"[DeadBodyContainerCache] Register(Player, Container) failed: {ex}");
            }
        }

        /// <summary>
        /// Registers a LootableContainer for a dead body by profileId.
        /// </summary>
        public static void Register(string profileId, LootableContainer container)
        {
            try
            {
                if (!TryGetValidKey(profileId, out string key) || container == null)
                {
                    return;
                }

                if (!Containers.ContainsKey(key))
                {
                    Containers.Add(key, container);
                }
            }
            catch (Exception ex)
            {
                Logger.LogError($"[DeadBodyContainerCache] Register(profileId, Container) failed: {ex}");
            }
        }

        #endregion

        #region Helpers

        private static bool TryGetValidKey(string profileId, out string key)
        {
            key = string.Empty;
            if (string.IsNullOrEmpty(profileId))
            {
                return false;
            }

            key = profileId.Trim();
            return key.Length > 0;
        }

        #endregion
    }
}
