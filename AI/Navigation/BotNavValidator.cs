// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Nav fallback logic must never assume registry is valid or override vanilla if disabled.
// </auto-generated>

namespace AIRefactored.AI.Navigation
{
    using AIRefactored.Core;
    using AIRefactored.Runtime;
    using BepInEx.Logging;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Validates bot navigation state at runtime. If nav data is invalid or missing,
    /// attempts fallback assignment or safely aborts further pathing logic.
    /// If AIRefactored nav is disabled, immediately yields to vanilla Tarkov logic.
    /// All logic is bulletproof and locally isolated.
    /// </summary>
    public static class BotNavValidator
    {
        #region Fields

        private static readonly ManualLogSource Logger = Plugin.LoggerInstance;
        private const float LogCooldown = 2.0f;
        private static float _lastLogTime;

        #endregion

        #region Public API

        /// <summary>
        /// Validates whether the bot has valid nav system backing and positioning.
        /// If not, attempts fallback assignment or returns false.
        /// If AIRefactored nav is disabled, lets vanilla handle navigation.
        /// Bulletproof: locally isolated, never cascades or breaks stack.
        /// </summary>
        public static bool Validate(BotOwner botOwner, string context)
        {
            try
            {
                // If AIRefactored nav is disabled, do nothing—vanilla logic takes over
                if (NavPointRegistry.AIRefactoredNavDisabled)
                    return false;

                if (botOwner == null)
                {
                    TryLogOnce("[BotNavValidator] ❌ Null BotOwner in context: " + context);
                    return false;
                }

                if (botOwner.Transform == null || botOwner.GetPlayer == null || botOwner.IsDead)
                {
                    TryLogOnce("[BotNavValidator] ❌ Invalid bot state — dead or missing transform — context: " + context);
                    return false;
                }

                Vector3 position = botOwner.Position;
                if (!IsValidPosition(position))
                {
                    TryLogOnce("[BotNavValidator] ❌ Bot has invalid position — context: " + context);
                    return false;
                }

                // Only act if registry is actually ready and usable
                if (!NavPointRegistry.IsReady || NavPointRegistry.IsEmpty)
                    return false;

                Vector3 target = NavPointRegistry.GetClosestPosition(position);
                if (!IsValidPosition(target) || target == Vector3.zero)
                    return false;

                // Only issue path move if the bot is not already moving (prevents AI-vs-vanilla thrash)
                if (botOwner.Mover != null && !botOwner.Mover.IsMoving)
                {
                    try
                    {
                        botOwner.Mover.GoToPoint(
                            target,
                            slowAtTheEnd: true,
                            reachDist: 1.0f,
                            getUpWithCheck: false,
                            mustHaveWay: true,
                            onlyShortTrie: false,
                            force: true);
                    }
                    catch
                    {
                        // If GoToPoint throws, fail gracefully (vanilla will handle)
                    }
                }

                return true;
            }
            catch
            {
                // Bulletproof: locally isolated, never propagates failure.
                return false;
            }
        }

        #endregion

        #region Helpers

        private static bool IsValidPosition(Vector3 pos)
        {
            return pos != Vector3.zero &&
                   !float.IsNaN(pos.x) &&
                   !float.IsNaN(pos.y) &&
                   !float.IsNaN(pos.z);
        }

        private static void TryLogOnce(string msg)
        {
            try
            {
                float now = Time.time;
                if (now - _lastLogTime > LogCooldown)
                {
                    Logger.LogWarning(msg);
                    _lastLogTime = now;
                }
            }
            catch
            {
                // Do nothing—never allow log to break anything.
            }
        }

        #endregion
    }
}
