// <auto-generated>
//   AI-Refactored: BotGroupBehavior.cs (Beyond Diamond Edition)
//   Real squad simulation: flocking, roles, formation, emotion, and comms.
//   All logic is centralized, allocation-free, null-guarded, and BotBrain Tick()-driven.
//   MIT License.
// </auto-generated>

namespace AIRefactored.AI.Groups
{
    using System;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Helpers;
    using AIRefactored.Core;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Maximizes passive squad realism:
    /// - Repels bots that are too close (dynamic personal space, nervousness, leader/follower bias)
    /// - Follows furthest mate if too far (flocking, formation, anchor/leader support)
    /// - Integrates role, emotional contagion, and phrase comms (real EFT squad behavior)
    /// - Alloc-free, tick-only, fully robust, and multiplayer/headless/FIKA safe
    /// </summary>
    public sealed class BotGroupBehavior
    {
        #region Constants

        private const float MaxSpacing = 7.5f;
        private const float MinSpacing = 2.35f;
        private const float SpacingTolerance = 0.24f;
        private const float RepulseStrength = 1.18f;
        private const float JitterAmount = 0.12f;
        private const float DriftSpeed = 0.14f;
        private const float MaxSquadRadius = 13.0f;
        private const float MinTickMoveInterval = 0.37f;

        private static readonly float MinSpacingSqr = MinSpacing * MinSpacing;
        private static readonly float MaxSpacingSqr = MaxSpacing * MaxSpacing;
        private static readonly float MaxSquadRadiusSqr = MaxSquadRadius * MaxSquadRadius;

        #endregion

        #region Fields

        private BotOwner _bot;
        private BotComponentCache _cache;
        private BotsGroup _group;

        private Vector3 _lastMoveTarget;
        private bool _hasLastTarget;
        private float _lastMoveTime;
        private Vector2 _personalDrift;
        private float _nervousnessLevel;
        private float _lastChatterTime;

        #endregion

        #region Properties

        public BotGroupSyncCoordinator GroupSync { get; private set; }
        public bool IsFollowingLeader { get; private set; }

        public bool IsInSquad =>
            _group != null && _group.MembersCount > 1;

        #endregion

        #region Initialization

        public void Initialize(BotComponentCache componentCache)
        {
            try
            {
                if (componentCache == null || componentCache.Bot == null)
                    throw new ArgumentException("[BotGroupBehavior] Invalid component cache.");

                _cache = componentCache;
                _bot = componentCache.Bot;
                _group = _bot.BotsGroup;

                GroupSync = new BotGroupSyncCoordinator();
                GroupSync.Initialize(_bot);
                GroupSync.InjectLocalCache(_cache);

                _personalDrift = ComputePersonalDrift(_bot.ProfileId);
                _hasLastTarget = false;
                _nervousnessLevel = UnityEngine.Random.Range(0.21f, 0.51f);
                _lastChatterTime = 0f;
            }
            catch (Exception ex)
            {
                Plugin.LoggerInstance.LogError("[BotGroupBehavior] Initialization failed: " + ex);
                FallbackMoveHelper();
            }
        }

        #endregion

        #region Main Tick

        public void Tick(float deltaTime)
        {
            try
            {
                if (!IsEligible() || _bot.Memory == null || _bot.Memory.GoalEnemy != null)
                    return;

                Vector3 myPos = _bot.Position;
                Vector3 repulsion = Vector3.zero;
                Vector3 furthest = Vector3.zero;
                float maxDistSqr = MinSpacingSqr;
                bool hasFurthest = false;
                int memberCount = _group.MembersCount;
                int closestIdx = -1;
                float closestDist = float.MaxValue;

                bool isBoss = _bot.IsRole(WildSpawnType.bossKnight) || _bot.IsRole(WildSpawnType.bossTagilla) ||
                              _bot.IsRole(WildSpawnType.bossZryachiy) || _bot.IsRole(WildSpawnType.bossSanitar) ||
                              _bot.IsRole(WildSpawnType.bossGluhar);
                float roleBias = isBoss ? 1.2f : (_cache?.AIRefactoredBotOwner?.PersonalityProfile?.Cohesion ?? 1.0f);
                float nervousBias = 1.0f + _nervousnessLevel * 0.4f;
                float effectiveMinSpacingSqr = MinSpacingSqr * nervousBias * roleBias;

                for (int i = 0; i < memberCount; i++)
                {
                    BotOwner mate = _group.Member(i);
                    if (mate == null || ReferenceEquals(mate, _bot) || mate.IsDead || mate.Memory == null)
                        continue;

                    Vector3 offset = mate.Position - myPos;
                    float distSqr = offset.sqrMagnitude;

                    if (distSqr < closestDist)
                    {
                        closestDist = distSqr;
                        closestIdx = i;
                    }

                    if (distSqr < effectiveMinSpacingSqr)
                    {
                        float push = MinSpacing - Mathf.Sqrt(distSqr);
                        repulsion += -offset.normalized * push * 0.75f;
                    }
                    else if (distSqr > MaxSpacingSqr && distSqr > maxDistSqr && distSqr < MaxSquadRadiusSqr && mate.Memory.GoalEnemy == null)
                    {
                        maxDistSqr = distSqr;
                        furthest = mate.Position;
                        hasFurthest = true;
                    }
                }

                UpdateSquadNervousness(deltaTime, memberCount);
                HandleSquadChatter(memberCount);

                if (repulsion.sqrMagnitude > 0.014f)
                {
                    IssueMove(SmoothDriftMove(myPos, repulsion.normalized * RepulseStrength, deltaTime, true));
                    IsFollowingLeader = false;
                    return;
                }

                if (hasFurthest)
                {
                    Vector3 dir = furthest - myPos;
                    if (dir.sqrMagnitude > 0.0008f)
                    {
                        IssueMove(SmoothDriftMove(myPos, dir.normalized * MaxSpacing * 0.7f, deltaTime, false));
                        IsFollowingLeader = false;
                        return;
                    }
                }

                if (closestIdx >= 0 && closestDist > 0.65f && closestDist < MaxSquadRadiusSqr)
                {
                    Vector3 anchorTarget = _group.Member(closestIdx).Position;
                    Vector3 leaderDir = anchorTarget - myPos;
                    if (leaderDir.sqrMagnitude > 0.00025f)
                    {
                        IssueMove(SmoothDriftMove(myPos, leaderDir.normalized * (MinSpacing * 0.8f), deltaTime, false));
                        IsFollowingLeader = true;
                    }
                }
            }
            catch (Exception ex)
            {
                Plugin.LoggerInstance.LogError("[BotGroupBehavior] Tick failed: " + ex);
                FallbackMoveHelper();
            }
        }

        #endregion

        #region Fire Echo Integration

        public void TriggerSquadFireEcho(BotOwner source, Vector3 position)
        {
            try
            {
                if (_group == null || source == null || source.IsDead || _group.MembersCount < 2)
                    return;

                for (int i = 0; i < _group.MembersCount; i++)
                {
                    var mate = _group.Member(i);
                    if (mate == null || mate.IsDead || ReferenceEquals(mate, source) || mate.Memory == null)
                        continue;

                    var danger = new PlaceForCheck(position, PlaceForCheckType.danger);
                    mate.DangerPointsData?.AddPointOfDanger(danger, true);
                }
            }
            catch (Exception ex)
            {
                Plugin.LoggerInstance.LogError("[BotGroupBehavior] FireEcho failed: " + ex);
            }
        }

        #endregion

        #region Movement Helpers

        private bool IsEligible()
        {
            return _bot != null && _group != null && !_bot.IsDead && EFTPlayerUtil.IsValidBotOwner(_bot) && _group.MembersCount > 1;
        }

        private Vector3 SmoothDriftMove(Vector3 basePos, Vector3 direction, float deltaTime, bool strongNervous)
        {
            Vector3 jitter = DeterministicJitter(_bot.ProfileId, Time.frameCount) * (JitterAmount + (_nervousnessLevel * 0.08f));
            Vector3 drift = direction.normalized * DriftSpeed * Mathf.Clamp(deltaTime * 2.1f, 0.12f, 0.33f);
            float bias = (_cache?.AIRefactoredBotOwner?.PersonalityProfile?.AggressionLevel ?? 0.5f) - 0.5f;
            Vector3 personalBias = new Vector3(_personalDrift.x, 0f, _personalDrift.y) * (0.59f + bias * 0.31f);

            if (strongNervous)
            {
                float hesitation = Mathf.Sin(Time.time * (1.2f + _nervousnessLevel)) * 0.14f * _nervousnessLevel;
                personalBias += new Vector3(-_personalDrift.y, 0f, _personalDrift.x) * hesitation;
            }

            return basePos + drift + jitter + personalBias;
        }

        private void IssueMove(Vector3 target)
        {
            try
            {
                float now = Time.time;
                Vector3 jitteredTarget = target + DeterministicJitter(_bot.ProfileId, Time.frameCount * 2) * (JitterAmount * 0.93f);
                float cohesion = _cache?.AIRefactoredBotOwner?.PersonalityProfile?.Cohesion ?? 1.0f;

                if (!_hasLastTarget || Vector3.Distance(_lastMoveTarget, jitteredTarget) > SpacingTolerance || now - _lastMoveTime > MinTickMoveInterval)
                {
                    _lastMoveTarget = jitteredTarget;
                    _hasLastTarget = true;
                    _lastMoveTime = now;
                    BotMovementHelper.SmoothMoveTo(_bot, jitteredTarget, false, cohesion);
                }
            }
            catch (Exception ex)
            {
                Plugin.LoggerInstance.LogError("[BotGroupBehavior] IssueMove failed: " + ex);
                FallbackMoveHelper();
            }
        }

        private static Vector3 DeterministicJitter(string profileId, int tick)
        {
            int hash = profileId.GetHashCode() ^ (tick * 31) ^ 0x6F8A123;
            unchecked
            {
                hash = (hash ^ (hash >> 13)) * 0x5bd1e995;
                float x = ((hash & 0xFFFF) / 32768f) - 1.0f;
                float z = (((hash >> 16) & 0xFFFF) / 32768f) - 1.0f;
                return new Vector3(x, 0f, z);
            }
        }

        private static Vector2 ComputePersonalDrift(string profileId)
        {
            int seed = profileId.GetHashCode() ^ 0x191A81C;
            var rand = new System.Random(seed);
            float angle = (float)(rand.NextDouble() * Mathf.PI * 2.0);
            float radius = 0.17f + (float)(rand.NextDouble() * 0.18f);
            return new Vector2(Mathf.Cos(angle) * radius, Mathf.Sin(angle) * radius);
        }

        private void UpdateSquadNervousness(float deltaTime, int memberCount)
        {
            bool recentCombat = _group != null && _group.DangerAreasCount > 0;
            if (recentCombat)
                _nervousnessLevel = Mathf.Clamp01(_nervousnessLevel + (0.21f + (memberCount * 0.04f)) * deltaTime);
            else
                _nervousnessLevel = Mathf.Clamp01(_nervousnessLevel - (0.16f + (memberCount * 0.03f)) * deltaTime);
        }

        private void HandleSquadChatter(int memberCount)
        {
            float now = Time.time;
            if (now - _lastChatterTime > 4.5f + UnityEngine.Random.value * 3.5f)
            {
                if (_group != null && _group.GroupTalk != null && _group.GroupTalk.CanSay(_bot, EPhraseTrigger.GoForward))
                {
                    _group.GroupTalk.PhraseSad(_bot, EPhraseTrigger.Cooperation);
                }
                _lastChatterTime = now;
            }
        }

        private void FallbackMoveHelper()
        {
            try
            {
                if (_bot != null && !_bot.IsDead && _bot.Mover != null)
                {
                    float cohesion = _cache?.AIRefactoredBotOwner?.PersonalityProfile?.Cohesion ?? 1.0f;
                    BotMovementHelper.SmoothMoveTo(_bot, _bot.Position, false, cohesion);
                }
            }
            catch
            {
                // Final fail-safe
            }
        }

        #endregion
    }
}
