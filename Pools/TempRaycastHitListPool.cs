// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>


namespace AIRefactored.Pools
{
    using System;
    using System.Collections.Generic;
    using UnityEngine;

    /// <summary>
    /// Pool for reusable <see cref="List{T}"/> of <see cref="RaycastHit"/>.
    /// Used for variable-length hit results in suppression, cover checks, grenade occlusion.
    /// </summary>
    public static class TempRaycastHitListPool
    {
        private static readonly Stack<List<RaycastHit>> Pool = new Stack<List<RaycastHit>>(16);
        private static readonly object SyncRoot = new object();

        static TempRaycastHitListPool()
        {
            AppDomain.CurrentDomain.DomainUnload += (_, __) => ClearAll();
        }

        /// <summary>
        /// Retrieves a pooled list of <see cref="RaycastHit"/>, or allocates a new one.
        /// </summary>
        /// <returns>A cleared list ready for use.</returns>
        public static List<RaycastHit> Rent()
        {
            lock (SyncRoot)
            {
                if (Pool.Count > 0)
                {
                    return Pool.Pop();
                }
            }

            return new List<RaycastHit>(8);
        }

        /// <summary>
        /// Returns a <see cref="List{RaycastHit}"/> to the pool after clearing it.
        /// </summary>
        /// <param name="list">List to return.</param>
        public static void Return(List<RaycastHit> list)
        {
            if (list == null)
            {
                return;
            }

            list.Clear();

            lock (SyncRoot)
            {
                Pool.Push(list);
            }
        }

        /// <summary>
        /// Prewarms the pool with empty lists of <see cref="RaycastHit"/>.
        /// </summary>
        /// <param name="count">Number of lists to allocate.</param>
        public static void Prewarm(int count)
        {
            if (count <= 0)
            {
                return;
            }

            lock (SyncRoot)
            {
                for (int i = 0; i < count; i++)
                {
                    Pool.Push(new List<RaycastHit>(8));
                }
            }
        }

        /// <summary>
        /// Clears all pooled <see cref="RaycastHit"/> lists.
        /// </summary>
        public static void ClearAll()
        {
            lock (SyncRoot)
            {
                Pool.Clear();
            }
        }
    }
}
