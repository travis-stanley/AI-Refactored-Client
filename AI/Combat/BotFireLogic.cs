// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   All fallback logic removed: Bot fire logic is always eligible and self-recovering. No fallback mode. No terminal disables.
// </auto-generated>

namespace AIRefactored.AI.Combat
{
    using System;
    using System.Collections.Generic;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Helpers;
    using AIRefactored.AI.Navigation;
    using AIRefactored.Core;
    using AIRefactored.Pools;
    using EFT;
    using EFT.HealthSystem;
    using EFT.InventoryLogic;
    using UnityEngine;
    using GClass2814 = GClass2814<HealthControllerClass.GClass2819>;
    using Random = UnityEngine.Random;

    public sealed class BotFireLogic
    {
        private const float MaxAimPitch = 70f;

        private static readonly EBodyPart[] AllBodyParts = (EBodyPart[])Enum.GetValues(typeof(EBodyPart));
        private static readonly Dictionary<string, float> WeaponTypeRanges = new Dictionary<string, float>(StringComparer.OrdinalIgnoreCase)
        {
            { "sniper", 180f },
            { "marksman", 150f },
            { "rifle", 120f },
            { "assault", 100f },
            { "smg", 75f },
            { "shotgun", 50f },
            { "pistol", 35f }
        };

        private readonly BotOwner _bot;
        private readonly BotComponentCache _cache;

        private Vector3 _idleLookDirection = Vector3.forward;
        private float _lastLookAroundTime;
        private float _nextDecisionTime;

        public BotFireLogic(BotOwner bot, BotComponentCache cache)
        {
            _bot = bot;
            _cache = cache;
        }

        public void Tick(float time)
        {
            if (_bot == null || _cache == null || _bot.IsDead || !_bot.IsAI || _bot.Memory == null)
                return;

            try
            {
                var weaponManager = _bot.WeaponManager;
                var shootData = _bot.ShootData;
                var weaponInfo = weaponManager?._currentWeaponInfo;
                var weapon = weaponInfo?.weapon;
                var settings = _bot.Settings?.FileSettings?.Core;
                var profile = _cache.AIRefactoredBotOwner?.PersonalityProfile;

                if (weaponManager == null || shootData == null || weaponInfo == null || weapon == null || settings == null || profile == null)
                    return;

                if (!TryResolveEnemy(out Player target))
                    return;

                Vector3 aimPosition = GetValidatedAimPosition(target, time);
                UpdateBotAiming(aimPosition);

                if (!EFTPlayerUtil.IsValid(target))
                    return;

                float distance = Vector3.Distance(_bot.Position, aimPosition);
                float weaponRange = EstimateWeaponRange(weapon);
                float maxRange = Mathf.Min(profile.EngagementRange, weaponRange, 200f);

                if (distance > maxRange)
                {
                    if (profile.ChaosFactor > 0f && Random.value < profile.ChaosFactor)
                    {
                        if (BotNavHelper.TryGetSafeTarget(_bot, out var advance) && IsVectorValid(advance))
                            BotMovementHelper.SmoothMoveTo(_bot, advance, false, profile.Cohesion);
                    }
                    return;
                }

                if (time < _nextDecisionTime)
                    return;

                _nextDecisionTime = time + GetBurstCadence(profile);

                if (weaponInfo.BulletCount <= 0 && !weaponInfo.CheckHaveAmmoForReload())
                {
                    weaponManager.Selector?.TryChangeWeaponCauseNoAmmo();
                    weaponManager.Melee?.Activate();
                    return;
                }

                ApplyFireMode(weaponInfo, weapon, distance, profile, settings);

                if (weaponManager.IsWeaponReady)
                {
                    shootData.Shoot();
                    _cache.LastShotTracker?.RegisterShot(target.ProfileId);
                }
            }
            catch (Exception ex)
            {
                Plugin.LoggerInstance?.LogError($"[BotFireLogic] Exception in Tick: {ex}");
            }
        }

        private void UpdateBotAiming(Vector3 aimPosition)
        {
            try
            {
                Vector3 dir = aimPosition - _bot.Position;
                if (dir.sqrMagnitude < 0.01f)
                    return;

                Quaternion rot = Quaternion.LookRotation(dir);
                float pitch = rot.eulerAngles.x > 180f ? rot.eulerAngles.x - 360f : rot.eulerAngles.x;
                pitch = Mathf.Clamp(pitch, -MaxAimPitch, MaxAimPitch);

                Vector3 forward = Quaternion.Euler(pitch, rot.eulerAngles.y, 0f) * Vector3.forward;
                _bot.AimingManager?.CurrentAiming?.SetTarget(forward);
            }
            catch (Exception ex)
            {
                Plugin.LoggerInstance?.LogError($"[BotFireLogic] Exception in UpdateBotAiming: {ex}");
            }
        }

        private Vector3 GetValidatedAimPosition(Player target, float time)
        {
            try
            {
                if (EFTPlayerUtil.IsValid(target))
                    return EFTPlayerUtil.GetPosition(target);

                Vector3 memory = _bot.Memory.LastEnemy?.CurrPosition ?? Vector3.zero;
                if (memory != Vector3.zero)
                    return memory;

                if (time - _lastLookAroundTime > 1.5f)
                {
                    float yaw = Random.Range(-75f, 75f);
                    float pitch = Random.Range(-10f, 10f);
                    Quaternion q = Quaternion.Euler(pitch, yaw, 0f);
                    Vector3 baseDir = _bot.Transform != null ? _bot.Transform.forward : Vector3.forward;
                    _idleLookDirection = q * baseDir;
                    _lastLookAroundTime = time;
                }

                return _bot.Position + _idleLookDirection.normalized * 10f;
            }
            catch (Exception ex)
            {
                Plugin.LoggerInstance?.LogError($"[BotFireLogic] Exception in GetValidatedAimPosition: {ex}");
                return _bot.Position;
            }
        }

        private void ApplyFireMode(BotWeaponInfo info, Weapon weapon, float distance, BotPersonalityProfile profile, GClass592 settings)
        {
            try
            {
                if (distance <= 40f)
                {
                    SetFireMode(info, Weapon.EFireMode.fullauto);
                    RecoverAccuracy(settings);
                }
                else if (distance <= 100f && SupportsFireMode(weapon, Weapon.EFireMode.burst))
                {
                    SetFireMode(info, Weapon.EFireMode.burst);
                    ApplyScatter(settings, true, profile);
                }
                else
                {
                    SetFireMode(info, Weapon.EFireMode.single);
                    ApplyScatter(settings, true, profile);
                }
            }
            catch (Exception ex)
            {
                Plugin.LoggerInstance?.LogError($"[BotFireLogic] Exception in ApplyFireMode: {ex}");
            }
        }

        private void SetFireMode(BotWeaponInfo info, Weapon.EFireMode mode)
        {
            try
            {
                if (info.weapon.SelectedFireMode != mode)
                    info.ChangeFireMode(mode);
            }
            catch (Exception ex)
            {
                Plugin.LoggerInstance?.LogError($"[BotFireLogic] Exception in SetFireMode: {ex}");
            }
        }

        private bool SupportsFireMode(Weapon weapon, Weapon.EFireMode mode)
        {
            try
            {
                foreach (var m in weapon.WeapFireType)
                {
                    if (m == mode)
                        return true;
                }
            }
            catch (Exception ex)
            {
                Plugin.LoggerInstance?.LogError($"[BotFireLogic] Exception in SupportsFireMode: {ex}");
            }
            return false;
        }

        private void RecoverAccuracy(GClass592 settings)
        {
            try
            {
                settings.ScatteringPerMeter = Mathf.Clamp(settings.ScatteringPerMeter * 0.95f, 0.4f, 3.0f);
            }
            catch (Exception ex)
            {
                Plugin.LoggerInstance?.LogError($"[BotFireLogic] Exception in RecoverAccuracy: {ex}");
            }
        }

        private void ApplyScatter(GClass592 settings, bool underFire, BotPersonalityProfile profile)
        {
            try
            {
                float composure = _cache.PanicHandler?.GetComposureLevel() ?? 1f;
                float scatterPenalty = underFire ? (1f - profile.AccuracyUnderFire) * (1f - composure) : 0f;
                float scatterFactor = 1.1f + scatterPenalty;

                settings.ScatteringPerMeter = Mathf.Clamp(settings.ScatteringPerMeter * scatterFactor, 0.6f, 3.5f);
            }
            catch (Exception ex)
            {
                Plugin.LoggerInstance?.LogError($"[BotFireLogic] Exception in ApplyScatter: {ex}");
            }
        }

        private float EstimateWeaponRange(Weapon weapon)
        {
            try
            {
                var template = weapon.Template;
                if (template == null || string.IsNullOrEmpty(template.Name))
                    return 90f;

                foreach (var kv in WeaponTypeRanges)
                {
                    if (template.Name.IndexOf(kv.Key, StringComparison.OrdinalIgnoreCase) >= 0)
                        return kv.Value;
                }

                return 90f;
            }
            catch (Exception ex)
            {
                Plugin.LoggerInstance?.LogError($"[BotFireLogic] Exception in EstimateWeaponRange: {ex}");
                return 90f;
            }
        }

        private float GetBurstCadence(BotPersonalityProfile profile)
        {
            try
            {
                float baseDelay = Mathf.Lerp(0.75f, 0.25f, profile.AggressionLevel);
                float reactionDelay = Mathf.Lerp(0.15f, 0.35f, 1f - profile.ReactionTime);
                float chaosOffset = Random.Range(-0.08f, 0.2f) * profile.ChaosFactor;
                return Mathf.Clamp(baseDelay + reactionDelay + chaosOffset, 0.15f, 1.1f);
            }
            catch (Exception ex)
            {
                Plugin.LoggerInstance?.LogError($"[BotFireLogic] Exception in GetBurstCadence: {ex}");
                return 0.45f;
            }
        }

        private bool TryResolveEnemy(out Player result)
        {
            result = null;
            try
            {
                if (_cache.ThreatSelector?.CurrentTarget is Player direct && EFTPlayerUtil.IsValid(direct))
                {
                    result = direct;
                    return true;
                }

                if (_bot.Memory?.GoalEnemy?.Person is Player fallback && EFTPlayerUtil.IsValid(fallback))
                {
                    result = fallback;
                    return true;
                }
            }
            catch (Exception ex)
            {
                Plugin.LoggerInstance?.LogError($"[BotFireLogic] Exception in TryResolveEnemy: {ex}");
            }
            return false;
        }

        private static bool IsVectorValid(Vector3 v)
        {
            return !float.IsNaN(v.x) && !float.IsNaN(v.y) && !float.IsNaN(v.z);
        }
    }
}
