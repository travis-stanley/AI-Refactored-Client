// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
//   All personality cache/shift logic is bulletproof and fully isolated.
// </auto-generated>

namespace AIRefactored.AI.Optimization
{
    using System;
    using System.Collections.Generic;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Helpers;
    using AIRefactored.AI.Memory;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Tracks tactical state deltas (aggression, caution, sneaky) and triggers behavior shifts.
    /// Used to detect and respond to mid-mission personality changes.
    /// All failures are isolated to the current bot and never propagate.
    /// </summary>
    public sealed class BotOwnerStateCache
    {
        private readonly Dictionary<string, BotStateSnapshot> _cache = new Dictionary<string, BotStateSnapshot>(64);

        /// <summary>
        /// Stores the initial tactical snapshot for this bot, if not already cached.
        /// </summary>
        public void CacheBotOwnerState(BotOwner botOwner)
        {
            try
            {
                if (!IsValidBot(botOwner))
                {
                    return;
                }

                string id = botOwner.Profile.Id;
                if (!_cache.ContainsKey(id))
                {
                    _cache[id] = CaptureSnapshot(botOwner);
                }
            }
            catch { /* Never propagate error */ }
        }

        /// <summary>
        /// Updates the tactical state cache for the bot, and applies behavior changes if the state changes.
        /// All errors are fully isolated and do not affect mod/systems.
        /// </summary>
        public void UpdateBotOwnerStateIfNeeded(BotOwner botOwner)
        {
            try
            {
                if (!IsValidBot(botOwner))
                {
                    return;
                }

                string id = botOwner.Profile.Id;
                BotStateSnapshot current = CaptureSnapshot(botOwner);

                if (_cache.TryGetValue(id, out BotStateSnapshot previous))
                {
                    if (!previous.Equals(current))
                    {
                        _cache[id] = current;
                        try { ApplyStateChange(botOwner, current); }
                        catch { /* Never break update loop */ }
                    }
                }
                else
                {
                    _cache[id] = current;
                }
            }
            catch { /* Fully bulletproof, never break update or mod */ }
        }

        private static bool IsValidBot(BotOwner bot)
        {
            try
            {
                return bot != null &&
                       bot.Profile != null &&
                       bot.GetPlayer != null &&
                       bot.GetPlayer.IsAI &&
                       !bot.GetPlayer.IsYourPlayer;
            }
            catch
            {
                return false;
            }
        }

        private static BotStateSnapshot CaptureSnapshot(BotOwner botOwner)
        {
            BotPersonalityProfile profile = null;
            BotComponentCache cache = null;
            try { profile = BotRegistry.Get(botOwner.ProfileId); } catch { }
            try { cache = BotCacheUtility.GetCache(botOwner); } catch { }

            float aggression = 0.5f;
            float caution = 0.5f;
            float composure = 1f;
            bool isSneaky = false;

            if (profile != null)
            {
                aggression = profile.AggressionLevel;
                caution = profile.Caution;
                isSneaky = profile.IsSilentHunter;
            }

            if (cache != null && cache.PanicHandler != null)
            {
                try { composure = cache.PanicHandler.GetComposureLevel(); } catch { }
            }

            return new BotStateSnapshot(aggression, caution, composure, isSneaky);
        }

        private void ApplyStateChange(BotOwner botOwner, BotStateSnapshot snapshot)
        {
            try
            {
                bool aggressive = snapshot.Aggression > 0.7f && snapshot.Composure > 0.8f;
                bool cautious = snapshot.Caution > 0.6f || snapshot.Composure < 0.35f;

                if (aggressive)
                {
                    TriggerZoneShift(botOwner, true);
                }
                else if (cautious)
                {
                    TriggerZoneShift(botOwner, false);
                }
                else
                {
                    TriggerZoneShift(botOwner, null);
                }
            }
            catch { /* No error can break calling logic */ }
        }

        private static void TriggerZoneShift(BotOwner botOwner, bool? advance)
        {
            try
            {
                if (botOwner == null || botOwner.Transform == null)
                {
                    return;
                }

                Vector3 shift = Vector3.zero;

                if (advance == true)
                {
                    shift = botOwner.Transform.forward * 8f;
                }
                else if (advance == false)
                {
                    shift = -botOwner.Transform.forward * 6f;
                }

                if (shift.sqrMagnitude > 0.01f)
                {
                    Vector3 target = botOwner.Position + shift;
                    try { BotMovementHelper.SmoothMoveTo(botOwner, target); }
                    catch { /* Never break parent or mod on move fail */ }
                }
            }
            catch { /* Bulletproof: never break outer call */ }
        }

        private struct BotStateSnapshot
        {
            public readonly float Aggression;
            public readonly float Caution;
            public readonly float Composure;
            public readonly bool IsSneaky;

            public BotStateSnapshot(float aggression, float caution, float composure, bool isSneaky)
            {
                Aggression = aggression;
                Caution = caution;
                Composure = composure;
                IsSneaky = isSneaky;
            }

            public override bool Equals(object obj)
            {
                if (!(obj is BotStateSnapshot))
                {
                    return false;
                }

                BotStateSnapshot other = (BotStateSnapshot)obj;

                return Mathf.Abs(Aggression - other.Aggression) < 0.05f &&
                       Mathf.Abs(Caution - other.Caution) < 0.05f &&
                       Mathf.Abs(Composure - other.Composure) < 0.05f &&
                       IsSneaky == other.IsSneaky;
            }

            public override int GetHashCode()
            {
                unchecked
                {
                    int hash = 17;
                    hash = (hash * 31) + Aggression.GetHashCode();
                    hash = (hash * 31) + Caution.GetHashCode();
                    hash = (hash * 31) + Composure.GetHashCode();
                    hash = (hash * 31) + IsSneaky.GetHashCode();
                    return hash;
                }
            }
        }
    }
}
