// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Failures in AIRefactored logic must always trigger safe fallback to EFT base AI.
// </auto-generated>

namespace AIRefactored.AI.Core
{
    using System;
    using System.Collections.Generic;
    using AIRefactored.AI;
    using AIRefactored.AI.Combat;
    using AIRefactored.AI.Groups;
    using AIRefactored.AI.Looting;
    using AIRefactored.AI.Medical;
    using AIRefactored.AI.Memory;
    using AIRefactored.AI.Movement;
    using AIRefactored.AI.Navigation;
    using AIRefactored.AI.Optimization;
    using AIRefactored.AI.Perception;
    using AIRefactored.AI.Reactions;
    using AIRefactored.Core;
    using AIRefactored.Runtime;
    using BepInEx.Logging;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Runtime container for all bot-specific AIRefactored logic systems.
    /// Managed via BotComponentCacheRegistry.
    /// Bulletproof: if initialization fails, always triggers fallback to vanilla logic.
    /// </summary>
    public sealed class BotComponentCache
    {
        #region Static

        public static readonly BotComponentCache Empty = new BotComponentCache();
        private static readonly ManualLogSource Logger = Plugin.LoggerInstance;
        private static readonly HashSet<string> InitializedBots = new HashSet<string>(StringComparer.OrdinalIgnoreCase);

        #endregion

        #region Fields

        private AIRefactoredBotOwner _owner;

        #endregion

        #region Core References

        public BotOwner Bot { get; internal set; }

        public AIRefactoredBotOwner AIRefactoredBotOwner => _owner;

        public BotMemoryClass Memory => Bot?.Memory;

        public string Nickname => Bot?.Profile?.Info?.Nickname ?? "Unknown";

        public Vector3 Position => Bot != null ? Bot.Position : Vector3.zero;

        #endregion

        #region Personality

        public BotPersonalityProfile PersonalityProfile { get; private set; } = new BotPersonalityProfile();

        #endregion

        #region Runtime Flags

        public bool IsBlinded { get; set; }
        public float BlindUntilTime { get; set; }
        public float LastFlashTime { get; set; }

        public float LastHeardTime { get; private set; } = -999f;
        public Vector3 LastHeardDirection { get; private set; }
        public bool HasHeardDirection { get; private set; }

        public bool IsFallbackMode { get; private set; }

        #endregion

        #region AI Subsystems

        public CombatStateMachine Combat { get; private set; }
        public BotMovementController Movement { get; private set; }
        public BotPoseController PoseController { get; private set; }
        public BotLookController LookController { get; private set; }
        public BotTilt Tilt { get; private set; }
        public BotTacticalDeviceController Tactical { get; private set; }
        public BotGroupBehavior GroupBehavior { get; private set; }
        public BotThreatSelector ThreatSelector { get; private set; }
        public BotTacticalMemory TacticalMemory { get; private set; }
        public BotLastShotTracker LastShotTracker { get; private set; }
        public BotGroupComms GroupComms { get; private set; }
        public BotSuppressionReactionComponent Suppression { get; private set; }
        public BotPanicHandler PanicHandler { get; private set; }
        public BotThreatEscalationMonitor Escalation { get; private set; }
        public BotInjurySystem InjurySystem { get; private set; }
        public BotDeadBodyScanner DeadBodyScanner { get; private set; }
        public BotLootScanner LootScanner { get; private set; }
        public BotLootDecisionSystem LootDecisionSystem { get; private set; }
        public BotOwnerPathfindingCache Pathing { get; private set; }
        public SquadPathCoordinator SquadPath { get; private set; }
        public BotDoorInteractionSystem DoorInteraction { get; private set; }
        public BotHealingBySomebody HealReceiver { get; private set; }
        public BotHealAnotherTarget SquadHealer { get; private set; }
        public FlashGrenadeComponent FlashGrenade { get; private set; }
        public HearingDamageComponent HearingDamage { get; private set; }
        public TrackedEnemyVisibility VisibilityTracker { get; set; }

        public BotGroupSyncCoordinator GroupSync => GroupBehavior?.GroupSync;
        public BotPanicHandler Panic => PanicHandler;

        #endregion

        #region Properties

        public bool IsReady =>
            Bot != null &&
            Movement != null &&
            Suppression != null &&
            PanicHandler != null &&
            Tactical != null &&
            FlashGrenade != null;

        #endregion

        #region Initialization

        public void Initialize(BotOwner bot)
        {
            if (bot == null)
            {
                Logger.LogError("[BotComponentCache] Initialize called with null bot.");
                BotFallbackUtility.FallbackToEFTLogic(bot);
                throw new ArgumentNullException(nameof(bot));
            }

            string id = bot.Profile?.Id ?? "null";

            if (Bot != null || InitializedBots.Contains(id))
            {
                Logger.LogWarning("[BotComponentCache] Already initialized for bot: " + id);
                return;
            }

            InitializedBots.Add(id);
            Bot = bot;

            try
            {
                WildSpawnType role = bot.Profile?.Info?.Settings?.Role ?? WildSpawnType.assault;
                PersonalityProfile = BotRegistry.GetOrGenerate(id, PersonalityType.Balanced, role);
                Logger.LogDebug($"[BotComponentCache] Loaded personality for bot {id}: {PersonalityProfile.Personality}");

                Pathing = new BotOwnerPathfindingCache();
                TacticalMemory = new BotTacticalMemory(); TacticalMemory.Initialize(this);

                TryInitSubsystem(nameof(Combat), () => Combat = new CombatStateMachine(), TacticalMemory);
                Combat.Initialize(this);

                TryInitSubsystem(nameof(FlashGrenade), () => FlashGrenade = new FlashGrenadeComponent());
                FlashGrenade.Initialize(this);

                TryInitSubsystem(nameof(PanicHandler), () => PanicHandler = new BotPanicHandler());
                PanicHandler.Initialize(this);

                TryInitSubsystem(nameof(Suppression), () => Suppression = new BotSuppressionReactionComponent());
                Suppression.Initialize(this);

                TryInitSubsystem(nameof(Escalation), () => Escalation = new BotThreatEscalationMonitor());
                Escalation.Initialize(bot);

                TryInitSubsystem(nameof(GroupBehavior), () => GroupBehavior = new BotGroupBehavior(), PanicHandler);
                GroupBehavior.Initialize(this);

                TryInitSubsystem(nameof(Movement), () => Movement = new BotMovementController());
                Movement.Initialize(this);

                TryInitSubsystem(nameof(LookController), () => LookController = new BotLookController(bot, this));

                TryInitSubsystem(nameof(Tactical), () => Tactical = new BotTacticalDeviceController());
                Tactical.Initialize(this);

                PoseController = new BotPoseController(bot, this);
                Tilt = new BotTilt(bot);
                HearingDamage = new HearingDamageComponent();
                SquadPath = new SquadPathCoordinator(); SquadPath.Initialize(this);

                LootScanner = new BotLootScanner(); LootScanner.Initialize(this);
                LootDecisionSystem = new BotLootDecisionSystem(); LootDecisionSystem.Initialize(this);
                DeadBodyScanner = new BotDeadBodyScanner(); DeadBodyScanner.Initialize(this);

                DoorInteraction = new BotDoorInteractionSystem(bot);
                InjurySystem = new BotInjurySystem(this);
                LastShotTracker = new BotLastShotTracker();
                GroupComms = new BotGroupComms(this);

                SquadHealer = bot.HealAnotherTarget ?? new BotHealAnotherTarget(bot);
                HealReceiver = bot.HealingBySomebody ?? new BotHealingBySomebody(bot);

                Logger.LogDebug($"[BotComponentCache] ✅ Initialized for bot: {Nickname}");
            }
            catch (Exception ex)
            {
                Logger.LogError($"[BotComponentCache] Initialization failed for bot {bot.Profile?.Id ?? "null"}: {ex}");
                BotFallbackUtility.FallbackToEFTLogic(bot);
                throw;
            }
        }

        private void TryInitSubsystem(string name, Action init, params object[] required)
        {
            for (int i = 0; i < required.Length; i++)
            {
                if (required[i] == null)
                {
                    Logger.LogError($"[BotComponentCache] ❌ Subsystem '{name}' missing required dependency.");
                    BotFallbackUtility.FallbackToEFTLogic(Bot);
                    throw new InvalidOperationException($"[BotComponentCache] {name} initialization failed.");
                }
            }

            try
            {
                init.Invoke();
            }
            catch (Exception ex)
            {
                Logger.LogError($"[BotComponentCache] ❌ Init failed ({name}): {ex}");
                BotFallbackUtility.FallbackToEFTLogic(Bot);
                throw;
            }
        }

        #endregion

        #region Fallback Entry

        public void EnterFallback()
        {
            IsFallbackMode = true;
            Logger.LogWarning($"[BotComponentCache] Entered fallback mode for bot: {Nickname}");
            BotFallbackUtility.FallbackToEFTLogic(Bot);
        }

        #endregion

        #region External Setters

        public void SetOwner(AIRefactoredBotOwner owner)
        {
            if (owner == null)
            {
                Logger.LogError("[BotComponentCache] SetOwner() called with null.");
                BotFallbackUtility.FallbackToEFTLogic(Bot);
                throw new ArgumentNullException(nameof(owner));
            }

            _owner = owner;

            if (ThreatSelector == null)
            {
                ThreatSelector = new BotThreatSelector(this);
            }
        }

        public void RegisterHeardSound(Vector3 source)
        {
            if (Bot == null)
            {
                Logger.LogWarning("[BotComponentCache] RegisterHeardSound failed — bot not assigned.");
                return;
            }

            LastHeardTime = Time.time;
            LastHeardDirection = source - Position;
            HasHeardDirection = true;

            Logger.LogDebug($"[BotComponentCache] Registered sound from: {source}");
        }

        #endregion
    }
}
