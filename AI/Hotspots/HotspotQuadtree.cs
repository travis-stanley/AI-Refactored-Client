// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

namespace AIRefactored.AI.Hotspots
{
    using System;
    using System.Collections.Generic;
    using AIRefactored.Pools;
    using UnityEngine;

    /// <summary>
    /// Spatial quadtree for hotspot lookup acceleration.
    /// Supports efficient spatial queries to reduce search time for hotspot scanning.
    /// </summary>
    public sealed class HotspotQuadtree
    {
        #region Constants

        private const int MaxDepth = 6;
        private const int MaxPerNode = 8;

        #endregion

        #region Fields

        private readonly Node _root;

        #endregion

        #region Constructor

        public HotspotQuadtree(Vector2 center, float size)
        {
            float half = size * 0.5f;
            Rect bounds = new Rect(center.x - half, center.y - half, size, size);
            _root = new Node(bounds, 0);
        }

        #endregion

        #region Public API

        public void Insert(HotspotRegistry.Hotspot hotspot)
        {
            if (hotspot == null)
            {
                return;
            }

            Vector2 pos2D = new Vector2(hotspot.Position.x, hotspot.Position.z);
            Stack<Node> stack = TempStackPool.Rent<Node>();
            stack.Push(_root);

            while (stack.Count > 0)
            {
                Node node = stack.Pop();
                if (!node.Bounds.Contains(pos2D))
                {
                    continue;
                }

                if (node.IsLeaf)
                {
                    node.Points.Add(hotspot);

                    if (node.Points.Count > MaxPerNode && node.Depth < MaxDepth)
                    {
                        Subdivide(node);

                        for (int i = 0; i < node.Points.Count; i++)
                        {
                            HotspotRegistry.Hotspot existing = node.Points[i];
                            Vector2 existing2D = new Vector2(existing.Position.x, existing.Position.z);

                            for (int j = 0; j < 4; j++)
                            {
                                Node child = node.Children[j];
                                if (child.Bounds.Contains(existing2D))
                                {
                                    child.Points.Add(existing);
                                    break;
                                }
                            }
                        }

                        node.Points.Clear();
                    }

                    break;
                }

                for (int i = 0; i < node.Children.Length; i++)
                {
                    stack.Push(node.Children[i]);
                }
            }

            TempStackPool.Return(stack);
        }

        public List<HotspotRegistry.Hotspot> Query(Vector3 position, float radius, Predicate<HotspotRegistry.Hotspot> filter)
        {
            List<HotspotRegistry.Hotspot> results = TempListPool.Rent<HotspotRegistry.Hotspot>();
            Vector2 pos2D = new Vector2(position.x, position.z);
            float radiusSq = radius * radius;
            float size = radius * 2f;
            Rect queryBounds = new Rect(pos2D.x - radius, pos2D.y - radius, size, size);

            Stack<Node> stack = TempStackPool.Rent<Node>();
            stack.Push(_root);

            while (stack.Count > 0)
            {
                Node node = stack.Pop();

                if (!node.Bounds.Overlaps(queryBounds))
                {
                    continue;
                }

                if (node.IsLeaf)
                {
                    for (int i = 0; i < node.Points.Count; i++)
                    {
                        HotspotRegistry.Hotspot h = node.Points[i];
                        Vector3 delta = h.Position - position;

                        if (delta.sqrMagnitude <= radiusSq && (filter == null || filter(h)))
                        {
                            results.Add(h);
                        }
                    }

                    continue;
                }

                for (int i = 0; i < node.Children.Length; i++)
                {
                    stack.Push(node.Children[i]);
                }
            }

            TempStackPool.Return(stack);
            return results;
        }

        #endregion

        #region Internal Logic

        private void Subdivide(Node node)
        {
            float halfW = node.Bounds.width * 0.5f;
            float halfH = node.Bounds.height * 0.5f;
            float x = node.Bounds.x;
            float y = node.Bounds.y;
            int depth = node.Depth + 1;

            node.SetChildren(new[]
            {
                new Node(new Rect(x, y, halfW, halfH), depth),
                new Node(new Rect(x + halfW, y, halfW, halfH), depth),
                new Node(new Rect(x, y + halfH, halfW, halfH), depth),
                new Node(new Rect(x + halfW, y + halfH, halfW, halfH), depth)
            });
        }

        #endregion

        #region Node Class

        private sealed class Node
        {
            public readonly Rect Bounds;
            public readonly int Depth;
            public readonly List<HotspotRegistry.Hotspot> Points;
            public Node[] Children;

            private static readonly Node[] EmptyArray = new Node[0];

            public Node(Rect bounds, int depth)
            {
                Bounds = bounds;
                Depth = depth;
                Points = new List<HotspotRegistry.Hotspot>(MaxPerNode);
                Children = EmptyArray;
            }

            public bool IsLeaf => Children.Length == 0;

            public void SetChildren(Node[] children)
            {
                Children = children ?? EmptyArray;
            }
        }

        #endregion
    }
}
