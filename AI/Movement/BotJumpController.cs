// <auto-generated>
//   AI-Refactored: BotJumpController.cs (Ultimate Realism – Final Vault Jump Fix Edition)
//   Bulletproof: anticipation-safe, squad-aware, panic-guarded, zero teleport, zero fallback, multiplayer/headless safe.
//   MIT License.
// </auto-generated>

namespace AIRefactored.AI.Movement
{
    using System;
    using AIRefactored.AI.Core;
    using AIRefactored.Core;
    using AIRefactored.Pools;
    using EFT;
    using UnityEngine;

    public sealed class BotJumpController
    {
        #region Constants

        private const float JumpCheckDistance = 1.08f;
        private const float JumpCooldown = 1.23f;
        private const float MaxJumpHeight = 1.19f;
        private const float MinJumpHeight = 0.32f;
        private const float ObstacleCheckRadius = 0.41f;
        private const float SafeFallHeight = 2.18f;
        private const float VaultForwardOffset = 0.73f;
        private const float JumpVelocityMultiplier = 1.46f;
        private const float HumanMistakeChance = 0.085f;
        private const float PreJumpAnticipationMin = 0.07f;
        private const float PreJumpAnticipationMax = 0.16f;
        private const float PanicCautionCooldown = 3.0f;
        private const float SuppressedCooldown = 1.7f;

        #endregion

        #region Fields

        private readonly BotOwner _bot;
        private readonly BotComponentCache _cache;
        private readonly MovementContext _context;

        private float _lastJumpTime;
        private float _nextAllowedJumpTime;
        private float _nextSuppressedCooldown;
        private float _preJumpAnticipationUntil;
        private Vector3 _queuedTarget;

        private bool _hasRecentlyJumped;
        private bool _isSuppressed;
        private bool _hasJumpTarget;

        #endregion

        public BotJumpController(BotOwner bot, BotComponentCache cache)
        {
            if (!EFTPlayerUtil.IsValidBotOwner(bot) || cache == null)
                throw new ArgumentException("[BotJumpController] Invalid bot or cache.");

            MovementContext context = bot.GetPlayer?.MovementContext;
            if (context == null)
                throw new InvalidOperationException("[BotJumpController] Missing MovementContext.");

            _bot = bot;
            _cache = cache;
            _context = context;
        }

        public void Tick(float deltaTime)
        {
            try
            {
                float now = Time.time;

                if (_cache != null && _cache.IsBlinded && now < _cache.BlindUntilTime)
                    return;
                if (_isSuppressed && now < _nextSuppressedCooldown)
                    return;
                if (now < _nextAllowedJumpTime)
                    return;

                if (now < _preJumpAnticipationUntil)
                    return;

                if (_hasJumpTarget)
                {
                    ExecuteJump(_queuedTarget, deltaTime);
                    _hasJumpTarget = false;
                    return;
                }

                if (!IsJumpAllowed(now))
                    return;

                Vector3[] temp = TempVector3Pool.Rent(1);
                try
                {
                    if (TryFindJumpTarget(out temp[0]))
                    {
                        if (UnityEngine.Random.value < HumanMistakeChance)
                        {
                            _nextAllowedJumpTime = now + UnityEngine.Random.Range(0.18f, 0.37f);
                            return;
                        }

                        float anticipation = UnityEngine.Random.Range(PreJumpAnticipationMin, PreJumpAnticipationMax);
                        _preJumpAnticipationUntil = now + anticipation;
                        _nextAllowedJumpTime = now + anticipation + JumpCooldown;
                        _queuedTarget = temp[0];
                        _hasJumpTarget = true;
                    }
                }
                finally
                {
                    TempVector3Pool.Return(temp);
                }
            }
            catch { }
        }

        private bool IsJumpAllowed(float now)
        {
            if (_hasRecentlyJumped && now - _lastJumpTime < JumpCooldown)
                return false;

            if (_context == null || !_context.IsGrounded || _context.IsInPronePose)
                return false;

            if (_bot.IsDead || _bot.Memory?.GoalEnemy != null)
                return false;

            if (_cache?.PanicHandler?.IsPanicking == true)
            {
                _isSuppressed = true;
                _nextSuppressedCooldown = now + PanicCautionCooldown;
                _nextAllowedJumpTime = now + PanicCautionCooldown;
                return false;
            }

            if (_isSuppressed && now > _nextSuppressedCooldown)
                _isSuppressed = false;

            if (_bot.BotsGroup != null && _bot.BotsGroup.MembersCount > 1)
            {
                Vector3 myPos = _bot.Position;
                Vector3 forward = _context.TransformForwardVector;
                const float spacing = 0.85f;

                for (int i = 0; i < _bot.BotsGroup.MembersCount; i++)
                {
                    BotOwner mate = _bot.BotsGroup.Member(i);
                    if (mate == null || mate == _bot || mate.IsDead)
                        continue;

                    Vector3 delta = mate.Position - myPos;
                    if (Vector3.Dot(forward, delta.normalized) > 0.7f && delta.magnitude < spacing)
                        return false;
                }
            }

            _hasRecentlyJumped = false;
            return true;
        }

        private void ExecuteJump(Vector3 target, float deltaTime)
        {
            try
            {
                if (_context == null)
                    return;

                _context.OnJump();
                _lastJumpTime = Time.time;
                _hasRecentlyJumped = true;

                Vector3 direction = (target - _context.TransformPosition);
                if (direction.sqrMagnitude < 0.01f)
                    return;

                Vector3 velocity = direction.normalized * JumpVelocityMultiplier;
                _context.ApplyMotion(velocity, deltaTime);
            }
            catch { }
        }

        private bool TryFindJumpTarget(out Vector3 target)
        {
            target = Vector3.zero;
            if (_context == null)
                return false;

            Vector3 origin = _context.PlayerColliderCenter + Vector3.up * 0.24f;
            Vector3 forward = _context.TransformForwardVector;

            RaycastHit[] hits = TempRaycastHitPool.Rent(1);
            try
            {
                if (!Physics.SphereCast(origin, ObstacleCheckRadius, forward, out hits[0], JumpCheckDistance, AIRefactoredLayerMasks.ObstacleRayMask))
                    return false;

                Bounds[] bounds = TempBoundsPool.Rent(1);
                try
                {
                    bounds[0] = hits[0].collider.bounds;
                    float height = bounds[0].max.y - _context.TransformPosition.y;
                    if (height < MinJumpHeight || height > MaxJumpHeight)
                        return false;

                    Vector3 vaultPoint = bounds[0].max + (forward * VaultForwardOffset);

                    RaycastHit[] landHits = TempRaycastHitPool.Rent(1);
                    try
                    {
                        if (!Physics.Raycast(vaultPoint, Vector3.down, out landHits[0], 2.55f, AIRefactoredLayerMasks.JumpRayMask))
                            return false;

                        float fallHeight = Mathf.Abs(_context.TransformPosition.y - landHits[0].point.y);
                        if (fallHeight > SafeFallHeight)
                            return false;

                        target = landHits[0].point;
                        return true;
                    }
                    finally
                    {
                        TempRaycastHitPool.Return(landHits);
                    }
                }
                finally
                {
                    TempBoundsPool.Return(bounds);
                }
            }
            finally
            {
                TempRaycastHitPool.Return(hits);
            }
        }
    }
}
