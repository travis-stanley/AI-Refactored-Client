// <auto-generated>
//   AI-Refactored: LootRuntimeWatcher.cs (Beyond Diamond – Headless/Client Parity Edition)
//   All loot tracking and registry refreshes are retry-safe and isolated. No fallback or terminal state.
//   MIT License.
// </auto-generated>

namespace AIRefactored.Runtime
{
    using System;
    using System.Collections.Generic;
    using AIRefactored.AI.Core;
    using AIRefactored.Bootstrap;
    using AIRefactored.Core;
    using BepInEx.Logging;
    using UnityEngine;

    /// <summary>
    /// Detects dynamic runtime loot additions (e.g. player death drops, mission rewards).
    /// Triggers a delayed loot registry refresh on authoritative hosts.
    /// Bulletproof: All errors are strictly contained; retry-safe. No fallback logic used.
    /// 1:1 parity in all host modes—SPT, FIKA, and headless.
    /// </summary>
    public sealed class LootRuntimeWatcher : IAIWorldSystemBootstrapper
    {
        private const float RefreshDelaySeconds = 0.15f;

        private static readonly ManualLogSource Logger = Plugin.LoggerInstance;
        private static readonly HashSet<int> RegisteredInstanceIds = new HashSet<int>();

        private static float _nextAllowedRefreshTime = -1f;
        private static bool _isQueued;

        public void Initialize()
        {
            try
            {
                Reset();
                Logger.LogDebug("[LootRuntimeWatcher] ✅ Initialized.");
            }
            catch (Exception ex)
            {
                Logger.LogError("[LootRuntimeWatcher] ❌ Initialize error: " + ex);
            }
        }

        public void Tick(float deltaTime)
        {
            try
            {
                if (!_isQueued || Time.time < _nextAllowedRefreshTime)
                    return;

                if (!GameWorldHandler.IsReady() || !GameWorldHandler.IsHost)
                    return;

                _isQueued = false;

                try
                {
                    GameWorldHandler.RefreshLootRegistry();
                    Logger.LogDebug("[LootRuntimeWatcher] ✅ Loot registry refreshed.");
                }
                catch (Exception ex)
                {
                    Logger.LogError("[LootRuntimeWatcher] ❌ Loot registry refresh failed: " + ex);
                }
            }
            catch (Exception ex)
            {
                Logger.LogError("[LootRuntimeWatcher] ❌ Tick error: " + ex);
            }
        }

        public void OnRaidEnd()
        {
            try
            {
                Reset();
                Logger.LogDebug("[LootRuntimeWatcher] 🧹 Reset after raid.");
            }
            catch (Exception ex)
            {
                Logger.LogError("[LootRuntimeWatcher] ❌ OnRaidEnd error: " + ex);
            }
        }

        public bool IsReady() => true;

        public WorldPhase RequiredPhase() => WorldPhase.WorldReady;

        /// <summary>
        /// Triggers a delayed loot registry refresh if not already queued.
        /// </summary>
        public static void TriggerQueuedRefresh()
        {
            try
            {
                if (_isQueued || !GameWorldHandler.IsReady() || !GameWorldHandler.IsHost)
                    return;

                _nextAllowedRefreshTime = Time.time + RefreshDelaySeconds;
                _isQueued = true;
            }
            catch (Exception ex)
            {
                Logger.LogError("[LootRuntimeWatcher] ❌ TriggerQueuedRefresh error: " + ex);
            }
        }

        /// <summary>
        /// Immediately refreshes the loot registry (manual trigger).
        /// </summary>
        public static void TriggerManualRefresh()
        {
            try
            {
                if (!GameWorldHandler.IsReady() || !GameWorldHandler.IsHost)
                    return;

                _isQueued = false;

                try
                {
                    GameWorldHandler.RefreshLootRegistry();
                    Logger.LogDebug("[LootRuntimeWatcher] 🔁 Manual loot registry refresh triggered.");
                }
                catch (Exception ex)
                {
                    Logger.LogError("[LootRuntimeWatcher] ❌ Manual refresh failed: " + ex);
                }
            }
            catch (Exception ex)
            {
                Logger.LogError("[LootRuntimeWatcher] ❌ TriggerManualRefresh error: " + ex);
            }
        }

        /// <summary>
        /// Registers a loot GameObject for tracking and queues refresh if new.
        /// </summary>
        public static void Register(GameObject go)
        {
            try
            {
                if (go == null)
                    return;

                int id = go.GetInstanceID();
                if (RegisteredInstanceIds.Add(id))
                {
                    TriggerQueuedRefresh();
                }
            }
            catch (Exception ex)
            {
                Logger.LogError("[LootRuntimeWatcher] ❌ Register error: " + ex);
            }
        }

        /// <summary>
        /// Unregisters a loot GameObject from tracking.
        /// </summary>
        public static void Unregister(GameObject go)
        {
            try
            {
                if (go == null)
                    return;

                int id = go.GetInstanceID();
                if (RegisteredInstanceIds.Remove(id))
                {
                    try
                    {
                        Logger.LogDebug("[LootRuntimeWatcher] Unregistered loot object: " + go.name);
                    }
                    catch { }
                }
            }
            catch (Exception ex)
            {
                Logger.LogError("[LootRuntimeWatcher] ❌ Unregister error: " + ex);
            }
        }

        /// <summary>
        /// Clears all state and tracked instance IDs for full reset.
        /// </summary>
        public static void Reset()
        {
            try
            {
                RegisteredInstanceIds.Clear();
                _isQueued = false;
                _nextAllowedRefreshTime = -1f;

                Logger.LogDebug("[LootRuntimeWatcher] 🔄 Reset complete.");
            }
            catch { }
        }
    }
}
