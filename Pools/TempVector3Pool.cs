// <auto-generated>
//   AI-Refactored: TempVector3Pool.cs (Beyond Diamond, Zero-Alloc & Parity Edition, June 2025)
//   Bulletproof pooling for Vector3[] arrays for high-performance AI/nav/tactical logic.
//   Thread-safe, teardown/reload safe, AI-Refactored compliant.
//   MIT License.
// </auto-generated>

namespace AIRefactored.Pools
{
    using System;
    using System.Collections.Generic;
    using UnityEngine;

    /// <summary>
    /// Specialized pool for reusing <see cref="Vector3"/> arrays.
    /// Prevents heap allocation in NavMesh pathing and tactical systems.
    /// </summary>
    public static class TempVector3Pool
    {
        private static readonly Dictionary<int, Stack<Vector3[]>> PoolBySize = new Dictionary<int, Stack<Vector3[]>>(16);
        private static readonly object SyncRoot = new object();

        static TempVector3Pool()
        {
            try
            {
                AppDomain.CurrentDomain.DomainUnload += (_, __) => ClearAll();
            }
            catch { }
        }

        /// <summary>
        /// Rents a <see cref="Vector3"/> array with at least the given length.
        /// </summary>
        /// <param name="minSize">Minimum size required.</param>
        /// <returns>Reusable array of at least <paramref name="minSize"/> length.</returns>
        public static Vector3[] Rent(int minSize)
        {
            if (minSize <= 0)
                minSize = 1;

            lock (SyncRoot)
            {
                if (PoolBySize.TryGetValue(minSize, out Stack<Vector3[]> stack) && stack.Count > 0)
                    return stack.Pop();
            }

            return new Vector3[minSize];
        }

        /// <summary>
        /// Returns a previously rented <see cref="Vector3"/> array to the pool.
        /// </summary>
        /// <param name="array">Array to return.</param>
        public static void Return(Vector3[] array)
        {
            if (array == null || array.Length == 0)
                return;

            lock (SyncRoot)
            {
                if (!PoolBySize.TryGetValue(array.Length, out Stack<Vector3[]> stack))
                {
                    stack = new Stack<Vector3[]>(8);
                    PoolBySize[array.Length] = stack;
                }

                stack.Push(array);
            }
        }

        /// <summary>
        /// Pre-warms the pool with fixed-length Vector3 arrays.
        /// </summary>
        /// <param name="size">Size of each array.</param>
        /// <param name="count">How many arrays to preload.</param>
        public static void Prewarm(int size, int count)
        {
            if (size <= 0 || count <= 0)
                return;

            lock (SyncRoot)
            {
                if (!PoolBySize.TryGetValue(size, out Stack<Vector3[]> stack))
                {
                    stack = new Stack<Vector3[]>(count);
                    PoolBySize[size] = stack;
                }

                for (int i = 0; i < count; i++)
                    stack.Push(new Vector3[size]);
            }
        }

        /// <summary>
        /// Clears all pooled Vector3 arrays.
        /// </summary>
        public static void ClearAll()
        {
            lock (SyncRoot)
            {
                foreach (var stack in PoolBySize.Values)
                    stack.Clear();

                PoolBySize.Clear();
            }
        }
    }
}
