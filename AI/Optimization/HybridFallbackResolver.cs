// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
//   All resolver, pooling, and fallback logic is bulletproof and fully isolated.
// </auto-generated>

namespace AIRefactored.AI.Optimization
{
	using System;
	using System.Collections.Generic;
	using AIRefactored.AI.Helpers;
	using AIRefactored.AI.Hotspots;
	using AIRefactored.AI.Navigation;
	using AIRefactored.Core;
	using AIRefactored.Pools;
	using EFT;
	using UnityEngine;

	/// <summary>
	/// Unified resolver that combines NavPoints, hotspots, cover scoring,
	/// and fallback path planning to find realistic escape destinations.
	/// All failures are strictly isolated; all pools are always returned.
	/// </summary>
	public static class HybridFallbackResolver
	{
		#region Constants

		private const float NavpointSearchRadius = 30f;
		private const float HotspotSearchRadius = 40f;
		private const float MinDotCover = 0.4f;
		private const float MinDotHotspot = 0.5f;

		#endregion

		#region Public API

		/// <summary>
		/// Returns the best fallback retreat point for the bot based on tactical cover, hotspots, and fallback planning.
		/// All pooling and errors are handled, never propagates.
		/// </summary>
		/// <param name="bot">The bot seeking retreat.</param>
		/// <param name="threatDirection">Direction of threat or enemy fire.</param>
		public static Vector3 GetBestRetreatPoint(BotOwner bot, Vector3 threatDirection)
		{
			try
			{
				if (bot == null || bot.Transform == null || !GameWorldHandler.IsLocalHost())
				{
					return Vector3.zero;
				}

				Vector3 origin = bot.Position;
				Vector3 retreatDirection = -threatDirection.normalized;

				// === Priority 1: NavPoint-based fallback cover ===
				if (NavMeshStatus.IsReady)
				{
					List<Vector3> navCoverPoints = null;
					try
					{
						navCoverPoints = NavPointRegistry.QueryNearby(
							origin,
							NavpointSearchRadius,
							p =>
							{
								Vector3 toCandidate = (p - origin).normalized;
								return NavPointRegistry.IsCoverPoint(p) &&
									   Vector3.Dot(toCandidate, retreatDirection) > MinDotCover;
							},
							true);

						if (navCoverPoints.Count > 0)
						{
							Vector3 best = Vector3.zero;
							float bestScore = float.MinValue;

							for (int i = 0; i < navCoverPoints.Count; i++)
							{
								float score = CoverScorer.ScoreCoverPoint(bot, navCoverPoints[i], threatDirection);
								if (score > bestScore)
								{
									bestScore = score;
									best = navCoverPoints[i];
								}
							}

							return best;
						}
					}
					catch { /* Defensive: never propagate */ }
					finally
					{
						if (navCoverPoints != null)
							TempListPool.Return(navCoverPoints);
					}
				}

				// === Priority 2: Tactical fallback hotspots ===
				if (NavMeshStatus.IsReady)
				{
					List<HotspotRegistry.Hotspot> fallbackHotspots = null;
					try
					{
						fallbackHotspots = HotspotRegistry.QueryNearby(
							origin,
							HotspotSearchRadius,
							h =>
							{
								Vector3 toHotspot = (h.Position - origin).normalized;
								return Vector3.Dot(toHotspot, retreatDirection) > MinDotHotspot;
							});

						if (fallbackHotspots.Count > 0)
						{
							Vector3 closest = Vector3.zero;
							float minDist = float.MaxValue;

							for (int i = 0; i < fallbackHotspots.Count; i++)
							{
								float dist = Vector3.Distance(origin, fallbackHotspots[i].Position);
								if (dist < minDist)
								{
									minDist = dist;
									closest = fallbackHotspots[i].Position;
								}
							}

							return closest;
						}
					}
					catch { /* Defensive: never propagate */ }
					finally
					{
						if (fallbackHotspots != null)
							TempListPool.Return(fallbackHotspots);
					}
				}

				// === Priority 3: Dynamic fallback via pathing ===
				if (NavMeshStatus.IsReady)
				{
					List<Vector3> path = null;
					try
					{
						BotOwnerPathfindingCache pathCache = BotCacheUtility.GetCache(bot)?.Pathing;
						if (pathCache != null)
						{
							path = BotCoverRetreatPlanner.GetCoverRetreatPath(bot, threatDirection, pathCache);
							if (path.Count >= 2)
							{
								return path[path.Count - 1];
							}
						}
					}
					catch { /* Defensive: never propagate */ }
					finally
					{
						if (path != null)
							TempListPool.Return(path);
					}
				}

				// === Priority 4: LOS-based fallback blocking probe ===
				Vector3 losBreak;
				if (TryLOSBlocker(origin, threatDirection, out losBreak))
				{
					return losBreak;
				}

				// Final fallback
				return Vector3.zero;
			}
			catch
			{
				return Vector3.zero;
			}
		}

		#endregion

		#region Private Logic

		private static bool TryLOSBlocker(Vector3 origin, Vector3 threatDir, out Vector3 result)
		{
			const float EyeHeight = 1.5f;
			const float MaxSearchDist = 12f;
			const float StepSize = 1.5f;

			result = Vector3.zero;
			RaycastHit[] hits = null;

			try
			{
				Vector3 backwards = -threatDir.normalized;
				Vector3 eyeOrigin = origin + Vector3.up * EyeHeight;

				hits = TempRaycastHitPool.Rent(1);

				for (float dist = 2f; dist <= MaxSearchDist; dist += StepSize)
				{
					Vector3 probe = origin + backwards * dist + Vector3.up * EyeHeight;

					if (Physics.Raycast(probe, threatDir, out hits[0], 20f, AIRefactoredLayerMasks.VisionBlockers))
					{
						if (CoverScorer.IsSolid(hits[0].collider))
						{
							result = hits[0].point - threatDir.normalized;
							return true;
						}
					}
				}
			}
			catch { /* Defensive: never propagate */ }
			finally
			{
				if (hits != null)
					TempRaycastHitPool.Return(hits);
			}

			return false;
		}

		#endregion
	}
}
