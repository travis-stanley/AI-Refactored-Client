// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Bulletproof: All errors are locally isolated, never disables handler, never disables squadmates, never triggers fallback AI.
// </auto-generated>

namespace AIRefactored.AI.Combat.States
{
    using System;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Helpers;
    using AIRefactored.AI.Navigation;
    using AIRefactored.Runtime;
    using AIRefactored.Core;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Coordinates echo behavior for fallback, investigation, and enemy sightings.
    /// Ensures realistic squad cohesion and tactical communication.
    /// Bulletproof: All failures are isolated and never cascade. Never disables itself or squadmates.
    /// All movement positions are resolved via internal EFT movement/pathfinding logic only.
    /// </summary>
    public sealed class EchoCoordinator
    {
        private const float EchoCooldown = 4.0f;
        private const float MaxEchoRangeSqr = 1600.0f;

        private readonly BotOwner _bot;
        private readonly BotComponentCache _cache;
        private float _lastEchoFallbackTime = float.NegativeInfinity;
        private float _lastEchoInvestigateTime = float.NegativeInfinity;

        public EchoCoordinator(BotComponentCache cache)
        {
            _cache = cache;
            _bot = cache?.Bot;
        }

        public void EchoFallbackToSquad(Vector3 retreatPosition)
        {
            if (_cache == null || _bot == null || _bot.BotsGroup == null)
                return;

            float now = Time.time;
            if (now - _lastEchoFallbackTime < EchoCooldown)
                return;

            Vector3 selfPosition = _bot.Position;
            int count = _bot.BotsGroup.MembersCount;

            for (int i = 0; i < count; i++)
            {
                try
                {
                    BotOwner mate = _bot.BotsGroup.Member(i);
                    if (!IsValidSquadmate(mate, selfPosition))
                        continue;

                    BotComponentCache mateCache = BotCacheUtility.GetCache(mate);
                    if (mateCache == null || mateCache.Combat == null || !CanAcceptEcho(mateCache))
                        continue;

                    // Use only vanilla EFT-compatible logic to generate fallback
                    Vector3 fallbackPoint = mate.Position;
                    bool found = false;

                    Vector3 direction = -mate.LookDirection;
                    if (direction.sqrMagnitude < 0.01f)
                        direction = Vector3.back;

                    Vector3 offset = direction.normalized * UnityEngine.Random.Range(2.0f, 4.0f);
                    Vector3 candidate = mate.Position + offset + UnityEngine.Random.insideUnitSphere * 0.5f;
                    candidate.y = mate.Position.y;

                    if (IsValidTarget(candidate))
                    {
                        fallbackPoint = candidate;
                        found = true;
                    }

                    // Only issue fallback if valid EFT-compatible result
                    if (found && IsValidTarget(fallbackPoint))
                    {
                        try
                        {
                            mateCache.Combat.TriggerFallback(fallbackPoint);
                        }
                        catch (Exception ex)
                        {
                            Plugin.LoggerInstance.LogError($"[EchoCoordinator] TriggerFallback error: {ex}");
                        }

                        if (!FikaHeadlessDetector.IsHeadless && mate.BotTalk != null)
                        {
                            try { mate.BotTalk.TrySay(EPhraseTrigger.CoverMe); }
                            catch { }
                        }
                    }
                    // else: no fallback issued if logic fails
                }
                catch (Exception ex)
                {
                    Plugin.LoggerInstance.LogError("[EchoCoordinator] EchoFallbackToSquad member loop error: " + ex);
                }
            }

            _lastEchoFallbackTime = now;
        }

        public void EchoInvestigateToSquad()
        {
            if (_cache == null || _bot == null || _bot.BotsGroup == null)
                return;

            float now = Time.time;
            if (now - _lastEchoInvestigateTime < EchoCooldown)
                return;

            Vector3 selfPosition = _bot.Position;
            int count = _bot.BotsGroup.MembersCount;

            for (int i = 0; i < count; i++)
            {
                try
                {
                    BotOwner mate = _bot.BotsGroup.Member(i);
                    if (!IsValidSquadmate(mate, selfPosition))
                        continue;

                    BotComponentCache mateCache = BotCacheUtility.GetCache(mate);
                    if (mateCache == null || mateCache.Combat == null || !CanAcceptEcho(mateCache))
                        continue;

                    try
                    {
                        mateCache.Combat.NotifyEchoInvestigate();
                    }
                    catch (Exception ex)
                    {
                        Plugin.LoggerInstance.LogError($"[EchoCoordinator] NotifyEchoInvestigate error: {ex}");
                    }

                    if (!FikaHeadlessDetector.IsHeadless && mate.BotTalk != null)
                    {
                        try { mate.BotTalk.TrySay(EPhraseTrigger.CheckHim); }
                        catch { }
                    }
                }
                catch (Exception ex)
                {
                    Plugin.LoggerInstance.LogError("[EchoCoordinator] EchoInvestigateToSquad member loop error: " + ex);
                }
            }

            _lastEchoInvestigateTime = now;
        }

        public void EchoSpottedEnemyToSquad(Vector3 enemyPosition)
        {
            if (_cache == null || _bot == null || _bot.BotsGroup == null)
                return;

            string enemyId = string.Empty;
            Player enemy = _cache.ThreatSelector?.CurrentTarget;
            if (enemy != null && !string.IsNullOrEmpty(enemy.ProfileId))
            {
                enemyId = enemy.ProfileId;
            }

            int count = _bot.BotsGroup.MembersCount;
            for (int i = 0; i < count; i++)
            {
                try
                {
                    BotOwner mate = _bot.BotsGroup.Member(i);
                    if (!IsValidSquadmate(mate, _bot.Position))
                        continue;

                    BotComponentCache mateCache = BotCacheUtility.GetCache(mate);
                    if (mateCache == null || mateCache.TacticalMemory == null)
                        continue;

                    try
                    {
                        mateCache.TacticalMemory.RecordEnemyPosition(enemyPosition, "SquadEcho", enemyId);
                    }
                    catch (Exception ex)
                    {
                        Plugin.LoggerInstance.LogError($"[EchoCoordinator] RecordEnemyPosition error: {ex}");
                    }
                }
                catch (Exception ex)
                {
                    Plugin.LoggerInstance.LogError("[EchoCoordinator] EchoSpottedEnemyToSquad member loop error: " + ex);
                }
            }
        }

        private static bool CanAcceptEcho(BotComponentCache cache)
        {
            if (cache.IsBlinded)
                return false;
            if (cache.PanicHandler?.IsPanicking == true)
                return false;
            return cache.AIRefactoredBotOwner?.PersonalityProfile?.Caution >= 0.15f;
        }

        private bool IsValidSquadmate(BotOwner mate, Vector3 origin)
        {
            if (mate == null || mate == _bot || mate.IsDead)
                return false;

            return (mate.Position - origin).sqrMagnitude <= MaxEchoRangeSqr;
        }

        private static bool IsValidTarget(Vector3 pos)
        {
            return pos != Vector3.zero &&
                   !float.IsNaN(pos.x) &&
                   !float.IsNaN(pos.y) &&
                   !float.IsNaN(pos.z);
        }
    }
}
