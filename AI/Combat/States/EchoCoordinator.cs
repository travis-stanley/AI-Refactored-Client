// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Failures in AIRefactored logic must always trigger safe fallback to EFT base AI.
// </auto-generated>

namespace AIRefactored.AI.Combat.States
{
    using System;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Helpers;
    using AIRefactored.AI.Navigation;
    using AIRefactored.Runtime;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Coordinates echo behavior for fallback, investigation, and enemy sightings.
    /// Ensures realistic squad cohesion and tactical communication.
    /// </summary>
    public sealed class EchoCoordinator
    {
        #region Constants

        private const float EchoCooldown = 4.0f;
        private const float MaxEchoRangeSqr = 1600.0f;
        private const float BaseFallbackDistance = 6.0f;
        private const float FallbackChaosOffset = 1.75f;
        private const float MinDirectionSqr = 0.01f;

        #endregion

        #region Fields

        private readonly BotOwner _bot;
        private readonly BotComponentCache _cache;

        private float _lastEchoFallbackTime = float.NegativeInfinity;
        private float _lastEchoInvestigateTime = float.NegativeInfinity;

        #endregion

        #region Constructor

        public EchoCoordinator(BotComponentCache cache)
        {
            if (cache == null || cache.Bot == null)
            {
                Plugin.LoggerInstance.LogError("[EchoCoordinator] Initialization failed: cache or Bot is null.");
                throw new ArgumentException("Cache or Bot cannot be null.");
            }

            _cache = cache;
            _bot = cache.Bot;
        }

        #endregion

        #region Public Methods

        /// <summary>
        /// Triggers a fallback signal to all squadmates, directing them to retreat tactically.
        /// </summary>
        public void EchoFallbackToSquad(Vector3 retreatPosition)
        {
            if (_cache == null || _cache.IsFallbackMode || _bot == null || _bot.BotsGroup == null)
                return;

            float now = Time.time;
            if (now - _lastEchoFallbackTime < EchoCooldown)
                return;

            Vector3 selfPosition = _bot.Position;
            int count = _bot.BotsGroup.MembersCount;

            for (int i = 0; i < count; i++)
            {
                BotOwner mate = _bot.BotsGroup.Member(i);
                if (!IsValidSquadmate(mate, selfPosition))
                    continue;

                BotComponentCache mateCache = BotCacheUtility.GetCache(mate);
                if (mateCache == null || mateCache.IsFallbackMode || mateCache.Combat == null || !CanAcceptEcho(mateCache))
                    continue;

                Vector3 fallbackDir = selfPosition - mate.Position;
                if (fallbackDir.sqrMagnitude < MinDirectionSqr)
                {
                    fallbackDir = mate.LookDirection.sqrMagnitude > 0.1f
                        ? -mate.LookDirection.normalized
                        : Vector3.back;
                }
                else
                {
                    fallbackDir.Normalize();
                }

                Vector3 chaos = UnityEngine.Random.insideUnitSphere * FallbackChaosOffset;
                chaos.y = 0f;

                Vector3 destination = mate.Position - fallbackDir * BaseFallbackDistance + chaos;
                if (!BotNavValidator.Validate(mate, "EchoFallback"))
                {
                    destination = FallbackNavPointProvider.GetSafePoint(mate.Position);
                }

                mateCache.Combat.TriggerFallback(destination);

                if (!FikaHeadlessDetector.IsHeadless && mate.BotTalk != null)
                {
                    mate.BotTalk.TrySay(EPhraseTrigger.CoverMe);
                }
            }

            _lastEchoFallbackTime = now;
        }

        /// <summary>
        /// Triggers an investigative signal to all squadmates, causing them to enter a search state.
        /// </summary>
        public void EchoInvestigateToSquad()
        {
            if (_cache == null || _cache.IsFallbackMode || _bot == null || _bot.BotsGroup == null)
                return;

            float now = Time.time;
            if (now - _lastEchoInvestigateTime < EchoCooldown)
                return;

            Vector3 selfPosition = _bot.Position;
            int count = _bot.BotsGroup.MembersCount;

            for (int i = 0; i < count; i++)
            {
                BotOwner mate = _bot.BotsGroup.Member(i);
                if (!IsValidSquadmate(mate, selfPosition))
                    continue;

                BotComponentCache mateCache = BotCacheUtility.GetCache(mate);
                if (mateCache == null || mateCache.IsFallbackMode || mateCache.Combat == null || !CanAcceptEcho(mateCache))
                    continue;

                mateCache.Combat.NotifyEchoInvestigate();

                if (!FikaHeadlessDetector.IsHeadless && mate.BotTalk != null)
                {
                    mate.BotTalk.TrySay(EPhraseTrigger.CheckHim);
                }
            }

            _lastEchoInvestigateTime = now;
        }

        /// <summary>
        /// Broadcasts enemy location to squadmates for shared tactical awareness.
        /// </summary>
        public void EchoSpottedEnemyToSquad(Vector3 enemyPosition)
        {
            if (_cache == null || _cache.IsFallbackMode || _bot == null || _bot.BotsGroup == null)
                return;

            string enemyId = string.Empty;
            Player enemy = _cache.ThreatSelector != null ? _cache.ThreatSelector.CurrentTarget : null;
            if (enemy != null && !string.IsNullOrEmpty(enemy.ProfileId))
            {
                enemyId = enemy.ProfileId;
            }

            int count = _bot.BotsGroup.MembersCount;
            for (int i = 0; i < count; i++)
            {
                BotOwner mate = _bot.BotsGroup.Member(i);
                if (!IsValidSquadmate(mate, _bot.Position))
                    continue;

                BotComponentCache mateCache = BotCacheUtility.GetCache(mate);
                if (mateCache == null || mateCache.IsFallbackMode || mateCache.TacticalMemory == null)
                    continue;

                mateCache.TacticalMemory.RecordEnemyPosition(enemyPosition, "SquadEcho", enemyId);
            }
        }

        #endregion

        #region Private Methods

        private static bool CanAcceptEcho(BotComponentCache cache)
        {
            if (cache.IsFallbackMode || cache.IsBlinded)
                return false;
            if (cache.PanicHandler != null && cache.PanicHandler.IsPanicking)
                return false;
            return cache.AIRefactoredBotOwner != null &&
                   cache.AIRefactoredBotOwner.PersonalityProfile != null &&
                   cache.AIRefactoredBotOwner.PersonalityProfile.Caution >= 0.15f;
        }

        private bool IsValidSquadmate(BotOwner mate, Vector3 origin)
        {
            if (mate == null || mate == _bot || mate.IsDead)
                return false;
            return (mate.Position - origin).sqrMagnitude <= MaxEchoRangeSqr;
        }

        #endregion
    }
}
