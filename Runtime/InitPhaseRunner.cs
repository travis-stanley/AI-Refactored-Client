// <auto-generated>
//   AI-Refactored: InitPhaseRunner.cs (Beyond Diamond, Lockout-Free, Headless-Safe, Parity Edition)
//   Bulletproof: All fallback/terminal lockouts removed, always attempts init, all errors strictly contained.
//   Fully supports FIKA headless, multiplayer, and traditional SPT worlds.
//   MIT License.
// </auto-generated>

namespace AIRefactored.Runtime
{
    using System;
    using System.Collections.Generic;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Navigation;
    using AIRefactored.Bootstrap;
    using AIRefactored.Core;
    using BepInEx.Logging;
    using Comfort.Common;
    using EFT;

    /// <summary>
    /// Orchestrates the full AI-Refactored initialization lifecycle using staged world boot phases.
    /// Triggered directly from GameWorldSpawnHook instead of polling.
    /// Bulletproof: All failures are strictly isolated. All bots are always eligible. No fallback logic used.
    /// </summary>
    public static class InitPhaseRunner
    {
        private static bool _hasStarted;

        /// <summary>
        /// Begins the full world and AIRefactored initialization sequence.
        /// </summary>
        public static void Begin(ManualLogSource logger)
        {
            if (_hasStarted)
            {
                logger?.LogWarning("[InitPhaseRunner] Begin() already called — skipping.");
                return;
            }

            if (FikaHeadlessDetector.IsHeadless && !FikaHeadlessDetector.HasRaidStarted())
            {
                logger?.LogDebug("[InitPhaseRunner] Skipped — FIKA headless raid not started.");
                return;
            }

            _hasStarted = true;

            try
            {
                WorldInitState.SetPhase(WorldPhase.PreInit);
                logger?.LogDebug("[InitPhaseRunner] 🚀 Beginning AIRefactored world initialization...");

                if (!IsWorldSafeAndUnique())
                {
                    logger?.LogWarning("[InitPhaseRunner] ❌ Unsafe or duplicate world state — aborting.");
                    ResetInternal(logger);
                    return;
                }

                WorldInitState.SetPhase(WorldPhase.AwaitWorld);

                string mapId = GameWorldHandler.TryGetValidMapName();
                if (string.IsNullOrEmpty(mapId))
                {
                    logger?.LogWarning("[InitPhaseRunner] ⚠ No valid map ID.");
                }

                GameWorldHandler.Initialize();
                WorldBootstrapper.Begin(logger, mapId);

                WorldInitState.SetPhase(WorldPhase.WorldReady);
                logger?.LogDebug("[InitPhaseRunner] ✅ World systems initialized.");

                WorldInitState.SetPhase(WorldPhase.PostInit);
            }
            catch (Exception ex)
            {
                logger?.LogError("[InitPhaseRunner] ❌ Fatal error during Begin(): " + ex);
                ResetInternal(logger);
            }
        }

        /// <summary>
        /// Stops and resets all AIRefactored init state and subsystems.
        /// </summary>
        public static void Stop()
        {
            if (!_hasStarted)
                return;

            try
            {
                ResetInternal(Plugin.LoggerInstance);
            }
            catch (Exception ex)
            {
                Plugin.LoggerInstance.LogError("[InitPhaseRunner] ❌ Stop() error: " + ex);
            }
        }

        /// <summary>
        /// Resets internal phase and all associated world state.
        /// </summary>
        private static void ResetInternal(ManualLogSource logger)
        {
            _hasStarted = false;

            try { WorldInitState.Reset(); } catch { }
            try { WorldTickDispatcher.Reset(); } catch { }
            try { WorldBootstrapper.Stop(); } catch { }
            try { GameWorldHandler.Cleanup(); } catch { }

            try { logger?.LogDebug("[InitPhaseRunner] 🧹 Cleanup complete — initialization state reset."); } catch { }
        }

        /// <summary>
        /// Checks if the GameWorld is valid, non-duplicate, and ready for AI init.
        /// </summary>
        private static bool IsWorldSafeAndUnique()
        {
            try
            {
                GameWorld world = Singleton<GameWorld>.Instantiated ? Singleton<GameWorld>.Instance : null;
                if (world == null || world.RegisteredPlayers == null || world.RegisteredPlayers.Count == 0)
                    return false;

                var seenProfiles = new HashSet<string>();
                for (int i = 0; i < world.RegisteredPlayers.Count; i++)
                {
                    Player player = EFTPlayerUtil.AsEFTPlayer(world.RegisteredPlayers[i]);
                    string profileId = player?.Profile?.Id;
                    if (!EFTPlayerUtil.IsValid(player) || string.IsNullOrEmpty(profileId))
                        continue;
                    if (!seenProfiles.Add(profileId))
                        return false;
                }

                return seenProfiles.Count > 0;
            }
            catch
            {
                return false;
            }
        }
    }
}
