// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

namespace AIRefactored.AI.Optimization
{
    using System.Collections.Generic;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Helpers;
    using AIRefactored.AI.Memory;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Tracks tactical state deltas (aggression, caution, sneaky) and triggers behavior shifts.
    /// Used to detect and respond to mid-mission personality changes.
    /// </summary>
    public sealed class BotOwnerStateCache
    {
        private readonly Dictionary<string, BotStateSnapshot> _cache = new Dictionary<string, BotStateSnapshot>(64);

        public void CacheBotOwnerState(BotOwner botOwner)
        {
            if (!IsValidBot(botOwner))
            {
                return;
            }

            string id = botOwner.Profile.Id;
            if (!_cache.ContainsKey(id))
            {
                _cache[id] = CaptureSnapshot(botOwner);
            }
        }

        public void UpdateBotOwnerStateIfNeeded(BotOwner botOwner)
        {
            if (!IsValidBot(botOwner))
            {
                return;
            }

            string id = botOwner.Profile.Id;
            BotStateSnapshot current = CaptureSnapshot(botOwner);

            if (_cache.TryGetValue(id, out BotStateSnapshot previous))
            {
                if (!previous.Equals(current))
                {
                    _cache[id] = current;
                    ApplyStateChange(botOwner, current);
                }
            }
            else
            {
                _cache[id] = current;
            }
        }

        private static bool IsValidBot(BotOwner bot)
        {
            return bot != null &&
                   bot.Profile != null &&
                   bot.GetPlayer != null &&
                   bot.GetPlayer.IsAI &&
                   !bot.GetPlayer.IsYourPlayer;
        }

        private static BotStateSnapshot CaptureSnapshot(BotOwner botOwner)
        {
            BotPersonalityProfile profile = BotRegistry.Get(botOwner.ProfileId);
            BotComponentCache cache = BotCacheUtility.GetCache(botOwner);

            float aggression = 0.5f;
            float caution = 0.5f;
            float composure = 1f;
            bool isSneaky = false;

            if (profile != null)
            {
                aggression = profile.AggressionLevel;
                caution = profile.Caution;
                isSneaky = profile.IsSilentHunter;
            }

            if (cache != null && cache.PanicHandler != null)
            {
                composure = cache.PanicHandler.GetComposureLevel();
            }

            return new BotStateSnapshot(aggression, caution, composure, isSneaky);
        }

        private void ApplyStateChange(BotOwner botOwner, BotStateSnapshot snapshot)
        {
            bool aggressive = snapshot.Aggression > 0.7f && snapshot.Composure > 0.8f;
            bool cautious = snapshot.Caution > 0.6f || snapshot.Composure < 0.35f;

            if (aggressive)
            {
                TriggerZoneShift(botOwner, true);
            }
            else if (cautious)
            {
                TriggerZoneShift(botOwner, false);
            }
            else
            {
                TriggerZoneShift(botOwner, null);
            }
        }

        private static void TriggerZoneShift(BotOwner botOwner, bool? advance)
        {
            if (botOwner?.Transform == null)
            {
                return;
            }

            Vector3 shift = Vector3.zero;

            if (advance == true)
            {
                shift = botOwner.Transform.forward * 8f;
            }
            else if (advance == false)
            {
                shift = -botOwner.Transform.forward * 6f;
            }

            if (shift.sqrMagnitude > 0.01f)
            {
                Vector3 target = botOwner.Position + shift;
                BotMovementHelper.SmoothMoveTo(botOwner, target);
            }
        }

        private struct BotStateSnapshot
        {
            public readonly float Aggression;
            public readonly float Caution;
            public readonly float Composure;
            public readonly bool IsSneaky;

            public BotStateSnapshot(float aggression, float caution, float composure, bool isSneaky)
            {
                Aggression = aggression;
                Caution = caution;
                Composure = composure;
                IsSneaky = isSneaky;
            }

            public override bool Equals(object obj)
            {
                if (!(obj is BotStateSnapshot))
                {
                    return false;
                }

                BotStateSnapshot other = (BotStateSnapshot)obj;

                return Mathf.Abs(Aggression - other.Aggression) < 0.05f &&
                       Mathf.Abs(Caution - other.Caution) < 0.05f &&
                       Mathf.Abs(Composure - other.Composure) < 0.05f &&
                       IsSneaky == other.IsSneaky;
            }

            public override int GetHashCode()
            {
                unchecked
                {
                    int hash = 17;
                    hash = (hash * 31) + Aggression.GetHashCode();
                    hash = (hash * 31) + Caution.GetHashCode();
                    hash = (hash * 31) + Composure.GetHashCode();
                    hash = (hash * 31) + IsSneaky.GetHashCode();
                    return hash;
                }
            }
        }
    }
}
