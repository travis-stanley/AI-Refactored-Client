// <auto-generated>
//   AI-Refactored: BotLookController.cs (Ultimate Realism Precision Edition – Final)
//   MIT License. Smooth, anticipation-aware, human-style look behavior. No snap, no fallback, full tick-only.
// </auto-generated>

namespace AIRefactored.AI.Movement
{
    using System;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Groups;
    using AIRefactored.AI.Perception;
    using AIRefactored.Core;
    using BepInEx.Logging;
    using EFT;
    using UnityEngine;

    public sealed class BotLookController
    {
        #region Constants

        private const float MaxTurnSpeedYaw = 8.75f;
        private const float MaxTurnSpeedPitch = 6.2f;
        private const float MaxDeltaYaw = 35.0f;
        private const float MaxDeltaPitch = 24.0f;
        private const float SaccadeIntervalMin = 0.16f, SaccadeIntervalMax = 0.33f;
        private const float SaccadeAngleMax = 4.1f;
        private const float AnticipationPauseMin = 0.07f, AnticipationPauseMax = 0.16f;
        private const float TargetSwitchDampenTime = 0.20f;
        private const float JitterClampAngle = 2.5f;
        private const float IdleScanCone = 32.0f;
        private const float MinLookDistanceSqr = 0.12f;
        private const float YawInertiaAccel = 0.178f, PitchInertiaAccel = 0.10f;
        private const float VisionBlockCheckDist = 48f;
        private const float LookFallbackDist = 1.7f;

        #endregion

        #region Fields

        private static readonly ManualLogSource Logger = Plugin.LoggerInstance;

        private readonly BotOwner _bot;
        private readonly BotComponentCache _cache;

        private float _currentYaw;
        private float _currentPitch;
        private float _yawVelocity, _pitchVelocity;
        private float _lastYawSign;
        private float _nextSaccadeTime, _saccadeOffset;
        private float _nextIdleScanTime, _idleTargetYaw;
        private Vector3 _fallbackLookTarget, _lastResolvedTarget;
        private float _lastLookSwitchTime;
        private bool _frozen;
        private float _oscillationCooldown;

        #endregion

        #region Constructor

        public BotLookController(BotOwner bot, BotComponentCache cache)
        {
            if (!EFTPlayerUtil.IsValidBotOwner(bot) || cache == null)
            {
                Logger.LogError("[BotLookController] Null bot/cache at construction.");
                throw new ArgumentException("Invalid BotLookController parameters.");
            }

            _bot = bot;
            _cache = cache;

            Player player = EFTPlayerUtil.ResolvePlayer(bot);
            Transform body = EFTPlayerUtil.GetTransform(player);
            Vector3 forward = body != null ? body.forward : Vector3.forward;
            _currentYaw = body != null ? body.rotation.eulerAngles.y : 0f;
            _currentPitch = 0f;
            _yawVelocity = 0f; _pitchVelocity = 0f;
            _lastYawSign = 0f;
            _fallbackLookTarget = bot.Position + forward;
            _lastResolvedTarget = _fallbackLookTarget;
            _lastLookSwitchTime = Time.time;
            _nextIdleScanTime = Time.time + UnityEngine.Random.Range(1.2f, 2.7f);
            _oscillationCooldown = 0f;
        }

        #endregion

        #region Public Methods

        public void Tick(float deltaTime)
        {
            try
            {
                if (_bot == null || _cache == null || _bot.IsDead || !GameWorldHandler.IsSafeToInitialize)
                    return;

                if (_frozen && Time.time - _lastLookSwitchTime < 1.25f)
                    return;

                Player player = EFTPlayerUtil.ResolvePlayer(_bot);
                if (!EFTPlayerUtil.IsValid(player))
                    return;

                Transform body = EFTPlayerUtil.GetTransform(player);
                if (body == null)
                    return;

                Vector3 origin = body.position;
                if (Time.time < _oscillationCooldown)
                    return;

                Vector3 lookTarget = ResolveLookTarget(origin, deltaTime);
                lookTarget = ValidateLookTarget(origin, lookTarget);

                if (lookTarget == Vector3.zero)
                    lookTarget = _bot.Position + _bot.LookDirection.normalized * LookFallbackDist;

                Vector3 lookVec = lookTarget - origin;
                if (lookVec.sqrMagnitude < MinLookDistanceSqr)
                    lookVec = _bot.LookDirection.normalized;

                float targetYaw = Mathf.Atan2(lookVec.x, lookVec.z) * Mathf.Rad2Deg;
                float targetPitch = -Mathf.Atan2(lookVec.y, new Vector2(lookVec.x, lookVec.z).magnitude) * Mathf.Rad2Deg;

                float yawDiff = Mathf.DeltaAngle(_currentYaw, targetYaw);
                float pitchDiff = Mathf.DeltaAngle(_currentPitch, targetPitch);
                float yawSign = Mathf.Sign(yawDiff);

                if (_lastYawSign != 0f && Mathf.Sign(_lastYawSign) != yawSign && Mathf.Abs(yawDiff) > 18f)
                {
                    _yawVelocity = 0f;
                    _oscillationCooldown = Time.time + UnityEngine.Random.Range(AnticipationPauseMin, AnticipationPauseMax);
                    return;
                }
                _lastYawSign = yawSign;

                _yawVelocity += yawDiff * YawInertiaAccel * deltaTime;
                _pitchVelocity += pitchDiff * PitchInertiaAccel * deltaTime;

                _yawVelocity = Mathf.MoveTowards(_yawVelocity, 0f, deltaTime * MaxTurnSpeedYaw);
                _pitchVelocity = Mathf.MoveTowards(_pitchVelocity, 0f, deltaTime * MaxTurnSpeedPitch);

                _yawVelocity = Mathf.Clamp(_yawVelocity, -MaxTurnSpeedYaw, MaxTurnSpeedYaw);
                _pitchVelocity = Mathf.Clamp(_pitchVelocity, -MaxTurnSpeedPitch, MaxTurnSpeedPitch);

                float deltaYaw = Mathf.Clamp(_yawVelocity * deltaTime * 60f, -MaxDeltaYaw, MaxDeltaYaw);
                float deltaPitch = Mathf.Clamp(_pitchVelocity * deltaTime * 60f, -MaxDeltaPitch, MaxDeltaPitch);

                _currentYaw = Mathf.Repeat(_currentYaw + deltaYaw, 360f);
                _currentPitch = Mathf.Clamp(_currentPitch + deltaPitch, -45f, 60f);

                Quaternion targetRot = Quaternion.Euler(_currentPitch, _currentYaw, 0f);
                if (!float.IsNaN(targetRot.x) && !float.IsNaN(targetRot.y) && !float.IsNaN(targetRot.z))
                    body.rotation = targetRot;

                if (Mathf.Abs(yawDiff) > 20f && Mathf.Abs(deltaYaw) > 15f)
                    _oscillationCooldown = Time.time + UnityEngine.Random.Range(AnticipationPauseMin, AnticipationPauseMax);
            }
            catch (Exception ex)
            {
                Logger.LogError("[BotLookController] Tick failed: " + ex);
            }
        }

        public void SetLookTarget(Vector3 worldPos)
        {
            if (IsValid(worldPos))
                _fallbackLookTarget = worldPos;
        }

        public void FreezeLook() => _frozen = true;
        public void ResumeLook() => _frozen = false;
        public Vector3 GetLookDirection() => _bot != null ? _bot.LookDirection : Vector3.forward;

        #endregion

        #region Internal Look Logic

        private Vector3 ResolveLookTarget(Vector3 origin, float deltaTime)
        {
            float now = Time.time;
            Vector3 target = _fallbackLookTarget;

            if (_cache?.ThreatSelector != null)
            {
                string id = _cache.ThreatSelector.GetTargetProfileId();
                Player enemy = EFTPlayerUtil.ResolvePlayerById(id);
                if (EFTPlayerUtil.IsValid(enemy))
                    target = EFTPlayerUtil.GetPosition(enemy);
            }

            bool canIdleScan = _cache?.Combat?.IsInCombatState() == false
                               && _cache.PanicHandler?.IsPanicking == false
                               && !_cache.IsBlinded;

            if (canIdleScan)
            {
                if (Time.time > _nextIdleScanTime)
                {
                    _idleTargetYaw = _currentYaw + UnityEngine.Random.Range(-IdleScanCone, IdleScanCone);
                    _nextIdleScanTime = Time.time + UnityEngine.Random.Range(1.6f, 3.7f);
                }
                Vector3 idleDir = Quaternion.Euler(0f, _idleTargetYaw, 0f) * Vector3.forward;
                target = origin + idleDir * 2.3f;
            }

            bool validTarget = (target - _lastResolvedTarget).sqrMagnitude > JitterClampAngle;
            if (validTarget)
            {
                if (now - _lastLookSwitchTime < TargetSwitchDampenTime)
                {
                    _yawVelocity *= 0.25f;
                    _pitchVelocity *= 0.25f;
                }
                _lastLookSwitchTime = now;
                _lastResolvedTarget = target;
            }

            HandleSaccade(canIdleScan);
            return ApplySaccadeToTarget(target, origin, canIdleScan);
        }

        private void HandleSaccade(bool canIdleScan)
        {
            if (!canIdleScan)
            {
                _saccadeOffset = 0f;
                _nextSaccadeTime = Time.time + 2f;
                return;
            }

            if (Time.time > _nextSaccadeTime)
            {
                _saccadeOffset = UnityEngine.Random.Range(-SaccadeAngleMax, SaccadeAngleMax);
                _nextSaccadeTime = Time.time + UnityEngine.Random.Range(SaccadeIntervalMin, SaccadeIntervalMax);
            }
        }

        private Vector3 ApplySaccadeToTarget(Vector3 lookTarget, Vector3 origin, bool canIdleScan)
        {
            if (canIdleScan && Mathf.Abs(_saccadeOffset) > 0.01f)
            {
                Vector3 dir = lookTarget - origin;
                dir.y = 0f;
                if (dir.sqrMagnitude > 0.01f)
                {
                    Quaternion q = Quaternion.AngleAxis(_saccadeOffset, Vector3.up);
                    dir = q * dir;
                    return origin + dir;
                }
            }
            return lookTarget;
        }

        private Vector3 ValidateLookTarget(Vector3 origin, Vector3 rawTarget)
        {
            Vector3 dir = rawTarget - origin;
            float dist = dir.magnitude;
            if (dist < 0.1f)
                return rawTarget;

            if (Physics.Raycast(origin + Vector3.up * 1.44f, dir.normalized, out RaycastHit hit, Mathf.Min(dist, VisionBlockCheckDist), AIRefactoredLayerMasks.VisionBlockers))
            {
                return hit.point - dir.normalized * 0.2f;
            }
            return rawTarget;
        }

        private static bool IsValid(Vector3 pos)
        {
            return !float.IsNaN(pos.x) && !float.IsNaN(pos.y) && !float.IsNaN(pos.z);
        }

        #endregion
    }
}
