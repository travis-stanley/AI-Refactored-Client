// <auto-generated>
//   AI-Refactored: DeadBodyContainerCache.cs (Beyond Diamond Edition – Zero-Failure Caching)
//   Tracks LootableContainer instances for player corpses. All cache logic is race-safe, fault-isolated, and read-optimized.
//   MIT License.
// </auto-generated>

namespace AIRefactored.AI.Looting
{
    using System;
    using System.Collections.Generic;
    using AIRefactored.Core;
    using BepInEx.Logging;
    using EFT;
    using EFT.Interactive;

    /// <summary>
    /// Caches dead body container references by profile ID.
    /// Used by bot loot logic to avoid expensive runtime lookups.
    /// Bulletproof: all failures are locally isolated; logic cannot affect other systems.
    /// </summary>
    public static class DeadBodyContainerCache
    {
        #region Fields

        private static readonly Dictionary<string, LootableContainer> Cache = new Dictionary<string, LootableContainer>(64);
        private static readonly ManualLogSource Logger = Plugin.LoggerInstance;

        #endregion

        #region Public API

        /// <summary>
        /// Clears the entire dead body container cache.
        /// </summary>
        public static void Clear()
        {
            try
            {
                Cache.Clear();
            }
            catch (Exception ex)
            {
                Logger.LogError($"[DeadBodyContainerCache] Clear() failed: {ex}");
            }
        }

        /// <summary>
        /// Returns true if a container is cached for the specified profile ID.
        /// </summary>
        public static bool Contains(string profileId)
        {
            try
            {
                return TryGetKey(profileId, out string key) && Cache.ContainsKey(key);
            }
            catch (Exception ex)
            {
                Logger.LogError($"[DeadBodyContainerCache] Contains('{profileId}') failed: {ex}");
                return false;
            }
        }

        /// <summary>
        /// Gets a cached container for the specified profile ID, or null.
        /// </summary>
        public static LootableContainer Get(string profileId)
        {
            try
            {
                if (!TryGetKey(profileId, out string key))
                    return null;

                return Cache.TryGetValue(key, out var container) ? container : null;
            }
            catch (Exception ex)
            {
                Logger.LogError($"[DeadBodyContainerCache] Get('{profileId}') failed: {ex}");
                return null;
            }
        }

        /// <summary>
        /// Registers a dead body container for a valid EFT.Player.
        /// </summary>
        public static void Register(Player player, LootableContainer container)
        {
            try
            {
                if (!EFTPlayerUtil.IsValid(player) || container == null)
                    return;

                Register(player.ProfileId, container);
            }
            catch (Exception ex)
            {
                Logger.LogError($"[DeadBodyContainerCache] Register(player) failed: {ex}");
            }
        }

        /// <summary>
        /// Registers a dead body container for a known profile ID.
        /// </summary>
        public static void Register(string profileId, LootableContainer container)
        {
            try
            {
                if (!TryGetKey(profileId, out string key) || container == null)
                    return;

                if (!Cache.ContainsKey(key))
                    Cache.Add(key, container);
            }
            catch (Exception ex)
            {
                Logger.LogError($"[DeadBodyContainerCache] Register(profileId) failed: {ex}");
            }
        }

        #endregion

        #region Internal

        private static bool TryGetKey(string profileId, out string key)
        {
            key = string.Empty;
            if (string.IsNullOrWhiteSpace(profileId))
                return false;

            key = profileId.Trim();
            return key.Length > 0;
        }

        #endregion
    }
}
