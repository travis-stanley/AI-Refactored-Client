// <auto-generated>
//   AI-Refactored: BotSpawnWatcherService.cs (Final Fixed - Enforced BotOwner Injection, Safe Subsystems)
//   No mutable AIRefactoredBotOwner assignment, correct BotComponentCache.Initialize(BotOwner) usage.
//   Bulletproof: Strict retries, valid only if BotOwner is alive. No invalid field access.
// </auto-generated>

namespace AIRefactored.Runtime
{
	using System;
	using System.Collections.Generic;
	using AIRefactored.AI.Core;
	using AIRefactored.AI.Navigation;
	using AIRefactored.AI.Threads;
	using AIRefactored.Bootstrap;
	using AIRefactored.Core;
	using BepInEx.Logging;
	using Comfort.Common;
	using EFT;
	using UnityEngine;

	public sealed class BotSpawnWatcherService : IAIWorldSystemBootstrapper
	{
		private const float PollInterval = 1.5f;
		private const int MaxRetriesPerBot = 12;

		private static readonly HashSet<int> SeenBotIds = new HashSet<int>();
		private static readonly HashSet<string> SeenProfileIds = new HashSet<string>();
		private static readonly Dictionary<string, int> RetryCounts = new Dictionary<string, int>();
		private static readonly ManualLogSource Logger = Plugin.LoggerInstance;

		private static float _nextPollTime = -1f;
		private static bool _hasWarnedInvalid;

		public void Initialize()
		{
			try
			{
				Reset();
				LogDebug("[BotSpawnWatcher] ✅ Initialized.");
			}
			catch (Exception ex)
			{
				LogError("[BotSpawnWatcher] ❌ Initialize failed: " + ex);
			}
		}

		public void OnRaidEnd()
		{
			try
			{
				Reset();
				LogDebug("[BotSpawnWatcher] 🧹 Reset after raid.");
			}
			catch (Exception ex)
			{
				LogError("[BotSpawnWatcher] ❌ OnRaidEnd error: " + ex);
			}
		}

		public static void Reset()
		{
			try
			{
				SeenBotIds.Clear();
				SeenProfileIds.Clear();
				RetryCounts.Clear();
				_nextPollTime = -1f;
				_hasWarnedInvalid = false;
				LogDebug("[BotSpawnWatcher] 🔄 Reset complete.");
			}
			catch { }
		}

		public void Tick(float deltaTime)
		{
			try
			{
				if (!GameWorldHandler.IsHost || !GameWorldHandler.IsInitialized || !GameWorldHandler.IsReady() || !WorldInitState.IsInPhase(WorldPhase.WorldReady))
				{
					if (!_hasWarnedInvalid)
					{
						LogWarn("[BotSpawnWatcher] ⚠ Not ready or not host — polling deferred.");
						_hasWarnedInvalid = true;
					}
					return;
				}

				if (_hasWarnedInvalid)
				{
					_hasWarnedInvalid = false;
					LogDebug("[BotSpawnWatcher] ✅ Host world recovered — resuming.");
				}

				float now = Time.time;
				if (now < _nextPollTime)
					return;

				_nextPollTime = now + PollInterval;

				List<Player> players = GameWorldHandler.GetAllAlivePlayers();
				if (players == null || players.Count == 0)
					return;

				for (int i = 0; i < players.Count; i++)
				{
					try
					{
						Player player = players[i];
						if (!EFTPlayerUtil.IsValid(player) || !player.IsAI || player.gameObject == null || player.HealthController == null || !player.HealthController.IsAlive)
							continue;

						GameObject go = player.gameObject;
						int id = go.GetInstanceID();
						string profileId = player.ProfileId ?? player.Profile?.Id;

						if (!SeenBotIds.Contains(id)) SeenBotIds.Add(id);
						if (!string.IsNullOrEmpty(profileId) && !SeenProfileIds.Contains(profileId)) SeenProfileIds.Add(profileId);

						if (RetryCounts.TryGetValue(profileId, out int retries) && retries >= MaxRetriesPerBot)
						{
							LogWarn($"[BotSpawnWatcher] ❌ Skipping bot {profileId} — exceeded retry limit.");
							continue;
						}

						if (go.GetComponent<BotBrain>() != null)
							continue;

						if (player.AIData?.BotOwner == null)
						{
							IncrementRetry(profileId);
							continue;
						}

						BotOwner botOwner = player.AIData.BotOwner;
						BotComponentCache cache = BotComponentCacheRegistry.GetOrCreate(botOwner);
						if (cache == null)
						{
							LogWarn($"[BotSpawnWatcher] Cache null for {profileId}. Will retry.");
							IncrementRetry(profileId);
							continue;
						}

						cache.Initialize(botOwner); // ✅ Correct call, BotOwner passed

						if (cache.AIRefactoredBotOwner == null)
						{
							LogWarn($"[BotSpawnWatcher] AIRefactoredBotOwner null for {profileId}. Will retry.");
							IncrementRetry(profileId);
							continue;
						}

						if (!cache.AIRefactoredBotOwner.HasPersonality())
							cache.AIRefactoredBotOwner.InitProfile(cache.AIRefactoredBotOwner.PersonalityProfile, cache.AIRefactoredBotOwner.PersonalityName);

						BotBrainGuardian.Enforce(go);
						GameWorldHandler.TryAttachBotBrain(botOwner);

						LogDebug("[BotSpawnWatcher] ✅ Brain injected for bot: " + (player.Profile?.Info?.Nickname ?? profileId));
					}
					catch (Exception ex)
					{
						LogError("[BotSpawnWatcher] ❌ Bot validation failed: " + ex);
					}
				}
			}
			catch (Exception ex)
			{
				LogError("[BotSpawnWatcher] ❌ Tick error: " + ex);
			}
		}

		public bool IsReady() => WorldInitState.IsInPhase(WorldPhase.WorldReady);

		public WorldPhase RequiredPhase() => WorldPhase.WorldReady;

		private static void IncrementRetry(string profileId)
		{
			if (string.IsNullOrEmpty(profileId)) return;
			if (!RetryCounts.ContainsKey(profileId)) RetryCounts[profileId] = 0;
			RetryCounts[profileId]++;
		}

		private static void LogDebug(string msg)
		{
			if (!FikaHeadlessDetector.IsHeadless)
				Logger.LogDebug(msg);
		}

		private static void LogWarn(string msg)
		{
			if (!FikaHeadlessDetector.IsHeadless)
				Logger.LogWarning(msg);
		}

		private static void LogError(string msg)
		{
			if (!FikaHeadlessDetector.IsHeadless)
				Logger.LogError(msg);
		}
	}
}
