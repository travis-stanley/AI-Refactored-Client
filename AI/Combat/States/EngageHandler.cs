// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Failures in AIRefactored logic must always trigger safe fallback to EFT base AI.
// </auto-generated>

namespace AIRefactored.AI.Combat.States
{
    using System;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Helpers;
    using AIRefactored.AI.Navigation;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Guides tactical movement toward enemy's last known location.
    /// Supports cautious advancement and squad-aware pathing.
    /// </summary>
    public sealed class EngageHandler
    {
        #region Constants

        private const float DefaultEngagementRange = 25.0f;

        #endregion

        #region Fields

        private readonly BotOwner _bot;
        private readonly BotComponentCache _cache;
        private readonly float _fallbackRange;

        #endregion

        #region Constructor

        public EngageHandler(BotComponentCache cache)
        {
            if (cache == null || cache.Bot == null)
            {
                Plugin.LoggerInstance.LogError("[EngageHandler] Invalid bot cache provided.");
                throw new ArgumentException("EngageHandler requires a non-null cache with BotOwner.");
            }

            _cache = cache;
            _bot = cache.Bot;

            float profileRange = cache.PersonalityProfile?.EngagementRange ?? 0f;
            _fallbackRange = profileRange > 0f ? profileRange : DefaultEngagementRange;
        }

        #endregion

        #region Public Methods

        /// <summary>
        /// Determines if the bot should begin advancing toward the enemy.
        /// </summary>
        public bool ShallUseNow()
        {
            if (!IsCombatCapable())
            {
                return false;
            }

            Vector3 enemyPos;
            return TryGetLastKnownEnemy(out enemyPos) && !IsWithinRange(enemyPos);
        }

        /// <summary>
        /// Determines if the bot is close enough to start direct attack behavior.
        /// </summary>
        public bool CanAttack()
        {
            if (!IsCombatCapable())
            {
                return false;
            }

            Vector3 enemyPos;
            return TryGetLastKnownEnemy(out enemyPos) && IsWithinRange(enemyPos);
        }

        /// <summary>
        /// Advances the bot toward last known enemy position with squad offset and cover-aware stance.
        /// </summary>
        public void Tick()
        {
            if (!IsCombatCapable())
            {
                return;
            }

            Vector3 enemyPos;
            if (!TryGetLastKnownEnemy(out enemyPos))
            {
                return;
            }

            Vector3 destination = _cache.SquadPath != null
                ? _cache.SquadPath.ApplyOffsetTo(enemyPos)
                : enemyPos;

            if (!IsValid(destination) || !BotNavValidator.Validate(_bot, "EngageHandlerDestination"))
            {
                destination = FallbackNavPointProvider.GetSafePoint(_bot.Position);
            }

            BotMovementHelper.SmoothMoveTo(_bot, destination);
            _cache.Combat.TrySetStanceFromNearbyCover(destination);
        }

        /// <summary>
        /// Returns whether the bot is currently engaging based on distance to last known enemy.
        /// </summary>
        public bool IsEngaging()
        {
            if (!IsCombatCapable())
            {
                return false;
            }

            Vector3 enemyPos;
            return TryGetLastKnownEnemy(out enemyPos) && !IsWithinRange(enemyPos);
        }

        #endregion

        #region Private Methods

        /// <summary>
        /// Checks whether bot is in valid state to perform combat operations.
        /// </summary>
        private bool IsCombatCapable()
        {
            return !_cache.IsFallbackMode && _bot != null && _cache.Combat != null;
        }

        /// <summary>
        /// Attempts to retrieve a valid last known enemy position.
        /// </summary>
        private bool TryGetLastKnownEnemy(out Vector3 result)
        {
            result = _cache.Combat.LastKnownEnemyPos;
            return result != Vector3.zero &&
                   !float.IsNaN(result.x) &&
                   !float.IsNaN(result.y) &&
                   !float.IsNaN(result.z);
        }

        /// <summary>
        /// Returns true if the enemy position is within range to attack.
        /// </summary>
        private bool IsWithinRange(Vector3 enemyPos)
        {
            return Vector3.SqrMagnitude(_bot.Position - enemyPos) < (_fallbackRange * _fallbackRange);
        }

        /// <summary>
        /// Validates that a position contains finite and usable coordinates.
        /// </summary>
        private static bool IsValid(Vector3 pos)
        {
            return !float.IsNaN(pos.x) && !float.IsNaN(pos.y) && !float.IsNaN(pos.z);
        }

        #endregion
    }
}
