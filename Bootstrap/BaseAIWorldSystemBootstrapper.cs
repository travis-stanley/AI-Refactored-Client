// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Fallback and isolation logic: All errors are locally contained; no failures may cascade or break global AIRefactored state.
//   See: AIRefactored “Bulletproof Fallback & Isolation Safety Rule Set” for all refactor and patch work.
// </auto-generated>

namespace AIRefactored.AI.Core
{
    using System;
    using AIRefactored.Bootstrap;
    using AIRefactored.Core;
    using BepInEx.Logging;

    /// <summary>
    /// Abstract base class for all AI world-level systems.
    /// Provides diamond-standard lifecycle binding, tick gating, and bulletproof fallback isolation.
    /// All failures are strictly locally contained; no failures may cascade or break global mod state.
    /// </summary>
    public abstract class BaseAIWorldSystemBootstrapper : IAIWorldSystemBootstrapper
    {
        private volatile bool _hasFailed;

        /// <summary>
        /// Called once when the system is initialized at its required phase.
        /// Localizes all exceptions and marks system as failed if any error occurs.
        /// </summary>
        public virtual void Initialize()
        {
            if (_hasFailed)
                return;

            try
            {
                OnInitialize();
            }
            catch (Exception ex)
            {
                _hasFailed = true;
                Plugin.LoggerInstance?.LogError("[BaseAIWorldSystem] Initialize error in " + GetType().Name + ": " + ex);
                OnFailover();
            }
        }

        /// <summary>
        /// Override for system-specific initialization logic.
        /// </summary>
        protected virtual void OnInitialize() { }

        /// <summary>
        /// Called every frame or tick if active and not failed.
        /// Wraps <see cref="OnTick"/> in a hard try-catch and disables future ticks on error.
        /// </summary>
        /// <param name="deltaTime">Elapsed time since last tick.</param>
        public virtual void Tick(float deltaTime)
        {
            if (_hasFailed)
                return;

            try
            {
                OnTick(deltaTime);
            }
            catch (Exception ex)
            {
                _hasFailed = true;
                Plugin.LoggerInstance?.LogError("[BaseAIWorldSystem] Tick error in " + GetType().Name + ": " + ex);
                OnFailover();
            }
        }

        /// <summary>
        /// Override for per-frame/tick system logic.
        /// </summary>
        /// <param name="deltaTime">Elapsed time since last tick.</param>
        protected virtual void OnTick(float deltaTime) { }

        /// <summary>
        /// Called at raid end or world teardown. Always guarded, disables system if failed.
        /// </summary>
        public virtual void OnRaidEnd()
        {
            if (_hasFailed)
                return;

            try
            {
                Cleanup();
            }
            catch (Exception ex)
            {
                _hasFailed = true;
                Plugin.LoggerInstance?.LogError("[BaseAIWorldSystem] OnRaidEnd error in " + GetType().Name + ": " + ex);
                OnFailover();
            }
        }

        /// <summary>
        /// Override to implement per-system teardown and memory cleanup.
        /// </summary>
        protected virtual void Cleanup() { }

        /// <summary>
        /// Returns true if this system is ready and not failed, and should be ticked.
        /// </summary>
        public virtual bool IsReady()
        {
            return !_hasFailed && OnIsReady();
        }

        /// <summary>
        /// Override for custom ready gating logic.
        /// </summary>
        protected virtual bool OnIsReady()
        {
            return true;
        }

        /// <summary>
        /// Specifies the required world phase for system initialization.
        /// Override if earlier/later phase required.
        /// </summary>
        public virtual WorldPhase RequiredPhase()
        {
            return WorldPhase.PostInit;
        }

        /// <summary>
        /// Called when a fatal exception occurs; disables system and triggers local fallback only.
        /// </summary>
        protected virtual void OnFailover()
        {
            // Override in subclasses if fallback behavior is needed.
            // Never allow escalation. Do not affect global mod state or other systems.
        }

        /// <summary>
        /// Returns true if this system is permanently failed and will never tick again.
        /// </summary>
        public bool IsFailed => _hasFailed;
    }
}
