// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Bulletproof: All errors are locally isolated, never disables itself, never triggers fallback AI.
// </auto-generated>

namespace AIRefactored.AI.Combat.States
{
    using System;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Helpers;
    using AIRefactored.AI.Memory;
    using AIRefactored.AI.Navigation;
    using AIRefactored.Core;
    using EFT;
    using UnityEngine;
    using UnityEngine.AI;

    /// <summary>
    /// Manages bot investigation behavior when sound or memory suggest enemy presence.
    /// Guides cautious, reactive movement toward enemy vicinity with adaptive stance.
    /// Bulletproof: All errors are locally isolated, never disables itself, never triggers fallback AI.
    /// </summary>
    public sealed class InvestigateHandler
    {
        private const float InvestigateCooldown = 10.0f;
        private const float ScanRadius = 4.0f;
        private const float SoundReactTime = 1.0f;
        private const float MaxInvestigateTime = 15.0f;
        private const float MinCaution = 0.3f;
        private const float ExitDelayBuffer = 1.25f;
        private const float ActiveWindow = 5.0f;

        private readonly BotOwner _bot;
        private readonly BotComponentCache _cache;
        private readonly BotTacticalMemory _memory;

        public InvestigateHandler(BotComponentCache cache)
        {
            _cache = cache;
            _bot = cache?.Bot;
            _memory = cache?.TacticalMemory;
        }

        public Vector3 GetInvestigateTarget(Vector3 visualLastKnown)
        {
            try
            {
                if (IsVectorValid(visualLastKnown))
                    return visualLastKnown;

                if (TryGetMemoryEnemyPosition(out Vector3 memoryPos))
                    return memoryPos;

                Vector3 fallback = GetSafeNearbyPosition();
                return fallback;
            }
            catch (Exception ex)
            {
                Plugin.LoggerInstance.LogError($"[InvestigateHandler] Exception in GetInvestigateTarget: {ex}");
                return _bot != null ? _bot.Position : Vector3.zero;
            }
        }

        public void Investigate(Vector3 target)
        {
            if (_cache == null || _bot == null)
                return;

            try
            {
                Vector3 destination = target;
                if (_cache.SquadPath != null)
                {
                    try { destination = _cache.SquadPath.ApplyOffsetTo(target); }
                    catch { destination = target; }
                }

                // Only use safe targets validated by internal nav logic
                if (!BotNavHelper.TryGetSafeTarget(_bot, out destination) || !IsVectorValid(destination))
                    destination = _bot.Position;

                if (_bot.Mover != null)
                {
                    try
                    {
                        BotMovementHelper.SmoothMoveTo(_bot, destination);
                        _memory?.MarkCleared(destination);
                        _cache.Combat?.TrySetStanceFromNearbyCover(destination);
                    }
                    catch (Exception ex)
                    {
                        Plugin.LoggerInstance.LogError($"[InvestigateHandler] Exception in SmoothMoveTo/MarkCleared: {ex}");
                    }
                }
                else
                {
                    Plugin.LoggerInstance.LogWarning("[InvestigateHandler] BotMover missing; cannot move.");
                }
            }
            catch (Exception ex)
            {
                Plugin.LoggerInstance.LogError($"[InvestigateHandler] General exception in Investigate: {ex}");
            }
        }

        public bool ShallUseNow(float time, float lastTransition)
        {
            if (_cache == null || _cache.AIRefactoredBotOwner?.PersonalityProfile == null)
                return false;

            try
            {
                if (_cache.AIRefactoredBotOwner.PersonalityProfile.Caution < MinCaution)
                    return false;

                float heardTime = _cache.LastHeardTime;
                return (heardTime + SoundReactTime) > time && (time - lastTransition) > ExitDelayBuffer;
            }
            catch (Exception ex)
            {
                Plugin.LoggerInstance.LogError($"[InvestigateHandler] Exception in ShallUseNow: {ex}");
                return false;
            }
        }

        public bool ShouldExit(float now, float lastHitTime, float cooldown)
        {
            try
            {
                float elapsed = now - lastHitTime;
                return elapsed > cooldown || elapsed > MaxInvestigateTime;
            }
            catch (Exception ex)
            {
                Plugin.LoggerInstance.LogError($"[InvestigateHandler] Exception in ShouldExit: {ex}");
                return true;
            }
        }

        public bool IsInvestigating()
        {
            if (_cache == null)
                return false;

            try
            {
                return (Time.time - _cache.LastHeardTime) <= ActiveWindow;
            }
            catch (Exception ex)
            {
                Plugin.LoggerInstance.LogError($"[InvestigateHandler] Exception in IsInvestigating: {ex}");
                return false;
            }
        }

        private bool TryGetMemoryEnemyPosition(out Vector3 result)
        {
            result = Vector3.zero;
            if (_memory == null)
                return false;

            try
            {
                Vector3? memory = _memory.GetRecentEnemyMemory();
                if (memory.HasValue && IsVectorValid(memory.Value))
                {
                    result = memory.Value;
                    return true;
                }
            }
            catch (Exception ex)
            {
                Plugin.LoggerInstance.LogError($"[InvestigateHandler] Exception in TryGetMemoryEnemyPosition: {ex}");
            }
            return false;
        }

        /// <summary>
        /// Uses EFT internal nav logic to sample a valid random nearby position.
        /// Never returns an invalid or off-mesh result.
        /// </summary>
        private Vector3 GetSafeNearbyPosition()
        {
            Vector3 basePos = _bot != null ? _bot.Position : Vector3.zero;

            Vector3 candidate = basePos + UnityEngine.Random.insideUnitSphere * ScanRadius;
            candidate.y = basePos.y; // flatten for ground nav

            NavMeshHit hit;
            if (UnityEngine.AI.NavMesh.SamplePosition(candidate, out hit, ScanRadius, NavMesh.AllAreas))
            {
                if (IsVectorValid(hit.position))
                    return hit.position;
            }

            // Fallback: nudge forward
            return IsVectorValid(basePos) ? basePos + Vector3.forward * 0.15f : Vector3.zero;
        }

        private static bool IsVectorValid(Vector3 v)
        {
            return !float.IsNaN(v.x) && !float.IsNaN(v.y) && !float.IsNaN(v.z) && v != Vector3.zero;
        }
    }
}
