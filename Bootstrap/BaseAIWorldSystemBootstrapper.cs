// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

namespace AIRefactored.AI.Core
{
    using System;
    using AIRefactored.Bootstrap;

    /// <summary>
    /// Abstract base class for AI world-level systems with lifecycle binding.
    /// Provides bulletproof error handling, phase gating, and tick safety.
    /// </summary>
    public abstract class BaseAIWorldSystemBootstrapper : IAIWorldSystemBootstrapper
    {
        /// <summary>
        /// Called once when the system is initialized at its required phase.
        /// Override to perform system setup logic.
        /// </summary>
        public virtual void Initialize()
        {
        }

        /// <summary>
        /// Called every frame or tick when active.
        /// Wraps <see cref="OnTick"/> in guarded try-catch for maximum robustness.
        /// </summary>
        /// <param name="deltaTime">Elapsed time since last tick.</param>
        public virtual void Tick(float deltaTime)
        {
            try
            {
                OnTick(deltaTime);
            }
            catch (Exception ex)
            {
                Plugin.LoggerInstance?.LogError("[BaseAIWorldSystem] Tick error in " + GetType().Name + ": " + ex);
            }
        }

        /// <summary>
        /// Override for per-frame/tick system logic.
        /// </summary>
        /// <param name="deltaTime">Elapsed time since last tick.</param>
        protected virtual void OnTick(float deltaTime)
        {
        }

        /// <summary>
        /// Called at raid end or when world is torn down.
        /// Wraps <see cref="Cleanup"/> in try-catch to guarantee teardown.
        /// </summary>
        public virtual void OnRaidEnd()
        {
            try
            {
                Cleanup();
            }
            catch (Exception ex)
            {
                Plugin.LoggerInstance?.LogError("[BaseAIWorldSystem] OnRaidEnd error in " + GetType().Name + ": " + ex);
            }
        }

        /// <summary>
        /// Override to implement per-system teardown and memory cleanup.
        /// </summary>
        protected virtual void Cleanup()
        {
        }

        /// <summary>
        /// Returns true if this system is currently ready and should be ticked.
        /// </summary>
        public virtual bool IsReady()
        {
            return true;
        }

        /// <summary>
        /// Specifies the required world phase for system initialization.
        /// Override if earlier/later phase required.
        /// </summary>
        public virtual WorldPhase RequiredPhase()
        {
            return WorldPhase.PostInit;
        }
    }
}
