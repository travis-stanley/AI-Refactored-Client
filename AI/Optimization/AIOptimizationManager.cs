// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

namespace AIRefactored.AI.Optimization
{
    using System;
    using System.Collections.Generic;
    using AIRefactored.Core;
    using AIRefactored.Runtime;
    using BepInEx.Logging;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Manages runtime optimization routines for AI bots.
    /// Provides centralized access to performance tuning, reset, and escalation routines.
    /// Designed to improve tactical behavior and reduce simulation overhead.
    /// Only runs on the authoritative host (headless, local-host, or client-host).
    /// </summary>
    public static class AIOptimizationManager
    {
        #region Constants

        private const float EscalationCooldownTime = 10f;

        #endregion

        #region Fields

        private static readonly BotAIOptimization Optimizer = new BotAIOptimization();
        private static readonly Dictionary<int, bool> BotOptimizationState = new Dictionary<int, bool>(128);
        private static readonly Dictionary<int, float> LastEscalationTimes = new Dictionary<int, float>(128);

        private static readonly ManualLogSource Logger = Plugin.LoggerInstance;

        #endregion

        #region Public API

        /// <summary>
        /// Applies optimization logic to a bot if eligible.
        /// </summary>
        public static void Apply(BotOwner bot)
        {
            if (!GameWorldHandler.IsLocalHost() || !IsValid(bot))
            {
                return;
            }

            int id = bot.GetInstanceID();
            if (BotOptimizationState.TryGetValue(id, out bool alreadyOptimized) && alreadyOptimized)
            {
                Logger.LogDebug("[AIOptimizationManager] Optimization already applied to bot: " + GetName(bot));
                return;
            }

            Optimizer.Optimize(bot);
            BotOptimizationState[id] = true;

            Logger.LogDebug("[AIOptimizationManager] Optimization applied to bot: " + GetName(bot));
        }

        /// <summary>
        /// Resets a bot's optimizations if previously applied.
        /// </summary>
        public static void Reset(BotOwner bot)
        {
            if (!GameWorldHandler.IsLocalHost() || !IsValid(bot))
            {
                return;
            }

            int id = bot.GetInstanceID();
            if (!BotOptimizationState.TryGetValue(id, out bool wasOptimized) || !wasOptimized)
            {
                Logger.LogDebug("[AIOptimizationManager] Bot not optimized, skipping reset: " + GetName(bot));
                return;
            }

            Optimizer.ResetOptimization(bot);
            BotOptimizationState[id] = false;

            Logger.LogDebug("[AIOptimizationManager] Optimization reset for bot: " + GetName(bot));
        }

        /// <summary>
        /// Escalates bot threat perception and responsiveness, subject to cooldown.
        /// </summary>
        public static void TriggerEscalation(BotOwner bot)
        {
            if (!GameWorldHandler.IsLocalHost() || !IsValid(bot))
            {
                return;
            }

            int id = bot.GetInstanceID();
            float now = Time.time;

            if (LastEscalationTimes.TryGetValue(id, out float lastTime) && (now - lastTime) < EscalationCooldownTime)
            {
                Logger.LogDebug("[AIOptimizationManager] Escalation skipped (cooldown) for bot: " + GetName(bot));
                return;
            }

            BotGlobalsMindSettings mind = GetMindSettings(bot);
            if (mind == null)
            {
                Logger.LogWarning("[AIOptimizationManager] Escalation aborted: missing mind settings for bot: " + GetName(bot));
                return;
            }

            mind.DIST_TO_FOUND_SQRT = Mathf.Clamp(mind.DIST_TO_FOUND_SQRT * 1.25f, 200f, 800f);
            mind.ENEMY_LOOK_AT_ME_ANG = Mathf.Clamp(mind.ENEMY_LOOK_AT_ME_ANG * 0.7f, 5f, 60f);
            mind.CHANCE_TO_RUN_CAUSE_DAMAGE_0_100 = Mathf.Clamp(mind.CHANCE_TO_RUN_CAUSE_DAMAGE_0_100 + 25f, 0f, 100f);

            LastEscalationTimes[id] = now;

            Logger.LogDebug("[AIOptimizationManager] Escalation triggered for bot: " + GetName(bot));
        }

        #endregion

        #region Internal Helpers

        private static bool IsValid(BotOwner bot)
        {
            return bot != null &&
                   bot.GetPlayer != null &&
                   bot.GetPlayer.IsAI &&
                   !bot.IsDead;
        }

        private static string GetName(BotOwner bot)
        {
            return bot?.Profile?.Info?.Nickname ?? "Unknown";
        }

        private static BotGlobalsMindSettings GetMindSettings(BotOwner bot)
        {
            return bot?.Settings?.FileSettings?.Mind;
        }

        #endregion
    }
}
