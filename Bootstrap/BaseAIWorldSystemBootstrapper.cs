// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

namespace AIRefactored.AI.Core
{
    using System;
    using AIRefactored.Bootstrap;

    /// <summary>
    /// Abstract base class for AI world-level systems with lifecycle binding.
    /// Override any method to hook into initialization, update, or shutdown.
    /// </summary>
    public abstract class BaseAIWorldSystemBootstrapper : IAIWorldSystemBootstrapper
    {
        /// <summary>
        /// Called once when the system is initialized at its required phase.
        /// Override to perform system setup logic.
        /// </summary>
        public virtual void Initialize()
        {
        }

        /// <summary>
        /// Called every frame or tick when active.
        /// Wraps the <see cref="OnTick"/> method in a guarded try-catch.
        /// </summary>
        /// <param name="deltaTime">Elapsed time since last tick.</param>
        public virtual void Tick(float deltaTime)
        {
            try
            {
                OnTick(deltaTime);
            }
            catch (Exception ex)
            {
                Plugin.LoggerInstance.LogError("[BaseAIWorldSystem] Tick error in " + GetType().Name + ": " + ex);
            }
        }

        /// <summary>
        /// Called every update cycle. Override to provide custom tick logic.
        /// </summary>
        /// <param name="deltaTime">Time since last tick.</param>
        protected virtual void OnTick(float deltaTime)
        {
        }

        /// <summary>
        /// Called when the raid ends. Wraps <see cref="Cleanup"/> in try-catch.
        /// </summary>
        public virtual void OnRaidEnd()
        {
            try
            {
                Cleanup();
            }
            catch (Exception ex)
            {
                Plugin.LoggerInstance.LogError("[BaseAIWorldSystem] OnRaidEnd error in " + GetType().Name + ": " + ex);
            }
        }

        /// <summary>
        /// Cleans up system data and memory. Override for per-system logic.
        /// </summary>
        protected virtual void Cleanup()
        {
        }

        /// <summary>
        /// Whether the system is currently valid and active.
        /// Override to gate tick logic during runtime.
        /// </summary>
        /// <returns>True if system is ready to tick.</returns>
        public virtual bool IsReady()
        {
            return true;
        }

        /// <summary>
        /// Specifies when the system should be initialized during phase progression.
        /// Override to require earlier phases like <see cref="WorldPhase.WorldReady"/>.
        /// </summary>
        /// <returns>The required initialization phase.</returns>
        public virtual WorldPhase RequiredPhase()
        {
            return WorldPhase.PostInit;
        }
    }
}
