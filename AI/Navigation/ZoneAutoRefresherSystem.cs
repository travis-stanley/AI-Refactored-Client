// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
//   All stub/legacy logic is bulletproof and isolation-safe.
// </auto-generated>

namespace AIRefactored.AI.Navigation
{
    using AIRefactored.AI.Core;
    using AIRefactored.Bootstrap;
    using AIRefactored.Core;
    using BepInEx.Logging;

    /// <summary>
    /// Legacy stub. Previously refreshed NavPointRegistry zone tags using IZones.
    /// Now permanently disabled — IZones are no longer used in AIRefactored.
    /// All calls are safe, no-op, and never break the system.
    /// </summary>
    public sealed class ZoneAutoRefresherSystem : IAIWorldSystemBootstrapper
    {
        #region Static

        private static readonly ZoneAutoRefresherSystem _instance = new ZoneAutoRefresherSystem();
        private static readonly ManualLogSource _logger = SafeLogger();

        /// <summary>
        /// Gets the singleton instance of the disabled refresher system.
        /// </summary>
        public static ZoneAutoRefresherSystem Instance
        {
            get { return _instance; }
        }

        #endregion

        #region Lifecycle

        /// <inheritdoc />
        public void Initialize()
        {
            try
            {
                _logger.LogDebug("[ZoneAutoRefresherSystem] Skipped — IZones system is disabled. No tag refresh performed.");
            }
            catch { /* Logging is always safe */ }
        }

        /// <inheritdoc />
        public void Tick(float deltaTime)
        {
            // No operation needed in stub implementation.
        }

        /// <inheritdoc />
        public void OnRaidEnd()
        {
            // No operation needed in stub implementation.
        }

        /// <inheritdoc />
        public bool IsReady()
        {
            return true;
        }

        /// <inheritdoc />
        public WorldPhase RequiredPhase()
        {
            return WorldPhase.WorldReady;
        }

        #endregion

        #region Helpers

        private static ManualLogSource SafeLogger()
        {
            try
            {
                return Plugin.LoggerInstance ?? new ManualLogSource("ZoneAutoRefresherSystemStub");
            }
            catch
            {
                return new ManualLogSource("ZoneAutoRefresherSystemStub");
            }
        }

        #endregion
    }
}
