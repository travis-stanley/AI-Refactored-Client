// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

namespace AIRefactored.AI.Perception
{
    /// <summary>
    /// Defines a bot's visual perception profile.
    /// Simulates response to light, suppression, and temporary blindness for realism.
    /// Used by <see cref="BotPerceptionSystem"/> to adjust sensory behavior dynamically.
    /// </summary>
    public sealed class BotVisionProfile
    {
        #region Constants

        private const float DefaultAdaptationSpeed = 1.25f;
        private const float DefaultAggressionResponse = 0.85f;
        private const float DefaultLightSensitivity = 1.0f;
        private const float DefaultMaxBlindness = 1.0f;
        private const float DefaultClarityRecoverySpeed = 0.3f;

        #endregion

        #region Properties

        public float AdaptationSpeed { get; set; } = DefaultAdaptationSpeed;
        public float AggressionResponse { get; set; } = DefaultAggressionResponse;
        public float LightSensitivity { get; set; } = DefaultLightSensitivity;
        public float MaxBlindness { get; set; } = DefaultMaxBlindness;
        public float ClarityRecoverySpeed { get; set; } = DefaultClarityRecoverySpeed;

        #endregion

        #region Factory

        public static BotVisionProfile CreateDefault()
        {
            return new BotVisionProfile();
        }

        #endregion

        #region Reset

        public void Reset(bool resetAggression = true)
        {
            AdaptationSpeed = DefaultAdaptationSpeed;
            LightSensitivity = DefaultLightSensitivity;
            MaxBlindness = DefaultMaxBlindness;
            ClarityRecoverySpeed = DefaultClarityRecoverySpeed;
            if (resetAggression)
            {
                AggressionResponse = DefaultAggressionResponse;
            }
        }

        #endregion

        #region Copy

        public void SetFrom(BotVisionProfile source)
        {
            if (ReferenceEquals(this, source) || source == null)
            {
                return;
            }
            AdaptationSpeed = source.AdaptationSpeed;
            AggressionResponse = source.AggressionResponse;
            LightSensitivity = source.LightSensitivity;
            MaxBlindness = source.MaxBlindness;
            ClarityRecoverySpeed = source.ClarityRecoverySpeed;
        }

        #endregion
    }
}
