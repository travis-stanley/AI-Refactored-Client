// <auto-generated>
//   AI-Refactored: BotMedicLogic.cs (Beyond Diamond, BotBrain Edition)
//   All logic matches real EFT APIs. Squad-first, self-second, randomized and human-like.
//   Fully multiplayer/headless safe, null-guarded, error isolated, and strictly StyleCop-compliant.
//   MIT License.
// </auto-generated>

namespace AIRefactored.AI.Medical
{
    using System;
    using AIRefactored.AI.Core;
    using AIRefactored.Core;
    using BepInEx.Logging;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Controls bot healing behavior using first aid, surgery, or stimulators.
    /// Supports healing squadmates using internal EFT BotHealAnotherTarget logic.
    /// All failures are locally isolated; medic logic cannot break other subsystems or the mod.
    /// </summary>
    public sealed class BotMedicLogic
    {
        #region Constants

        private const float HealCheckInterval = 1.5f;
        private const float HealSquadRange = 4f;
        private static readonly float HealSquadRangeSqr = HealSquadRange * HealSquadRange;
        private const float VoiceCooldown = 6f;

        #endregion

        #region Fields

        private static readonly ManualLogSource Logger = Plugin.LoggerInstance;

        private readonly BotComponentCache _cache;
        private readonly BotInjurySystem _injurySystem;
        private readonly BotOwner _bot;

        private BotMedecine _med;
        private float _nextHealCheck;
        private float _lastVoiceTime;
        private bool _isHealing;
        private bool _isActive = true;

        #endregion

        #region Constructor

        /// <summary>
        /// Initializes a new medic logic for a bot and its injury system.
        /// </summary>
        public BotMedicLogic(BotComponentCache cache, BotInjurySystem injurySystem)
        {
            if (cache == null || injurySystem == null || cache.Bot == null)
            {
                _isActive = false;
                Logger.LogError("[BotMedicLogic] Initialization failed: cache, injury system, or bot is null. Disabling medic logic for this bot.");
                return;
            }

            _cache = cache;
            _injurySystem = injurySystem;
            _bot = cache.Bot;
            _nextHealCheck = Time.time;
            _lastVoiceTime = -99f;

            try
            {
                if (_bot.HealAnotherTarget == null)
                    _bot.HealAnotherTarget = new BotHealAnotherTarget(_bot);

                _bot.HealAnotherTarget.OnHealAsked -= OnHealAsked;
                _bot.HealAnotherTarget.OnHealAsked += OnHealAsked;

                if (_bot.HealingBySomebody == null)
                    _bot.HealingBySomebody = new BotHealingBySomebody(_bot);

                _med = _bot.Medecine ?? new BotMedecine(_bot);
            }
            catch (Exception ex)
            {
                _isActive = false;
                Logger.LogError($"[BotMedicLogic] Constructor failed: {ex}. Disabling medic logic for this bot.");
            }
        }

        #endregion

        #region Public API

        /// <summary>
        /// Resets healing state and unsubscribes from first aid events.
        /// </summary>
        public void Reset()
        {
            if (!_isActive)
                return;

            try
            {
                _isHealing = false;
                _injurySystem.Reset();
                UnsubscribeFromFirstAid();
            }
            catch (Exception ex)
            {
                _isActive = false;
                Logger.LogError($"[BotMedicLogic] Reset() failed: {ex}. Disabling medic logic for this bot.");
            }
        }

        /// <summary>
        /// Main tick for bot medical logic; checks healing conditions and processes squad or self heal as needed.
        /// </summary>
        public void Tick(float time)
        {
            if (!_isActive || _isHealing || time < _nextHealCheck)
                return;

            try
            {
                // Disallow healing during panic or invalid bot owner.
                if (!EFTPlayerUtil.IsValidBotOwner(_bot) || (_cache.PanicHandler != null && _cache.PanicHandler.IsPanicking))
                    return;

                // Don't heal if currently healing someone.
                if (_bot.HealAnotherTarget != null && _bot.HealAnotherTarget.IsInProcess)
                    return;

                _nextHealCheck = time + HealCheckInterval + UnityEngine.Random.Range(0f, 0.8f);
                _injurySystem.Tick(time);

                // Try to heal a squadmate first, if possible.
                if (TryHealSquadmate(time))
                    return;

                TrySelfHeal(time);
            }
            catch (Exception ex)
            {
                _isActive = false;
                Logger.LogError($"[BotMedicLogic] Tick() failed: {ex}. Disabling medic logic for this bot.");
            }
        }

        #endregion

        #region Healing Logic

        /// <summary>
        /// Attempts to heal a squadmate within range who needs aid.
        /// </summary>
        private bool TryHealSquadmate(float time)
        {
            try
            {
                if (_bot.BotsGroup == null)
                    return false;

                Player self = EFTPlayerUtil.ResolvePlayer(_bot);
                if (!EFTPlayerUtil.IsValidGroupPlayer(self))
                    return false;

                Vector3 selfPos = EFTPlayerUtil.GetPosition(self);
                int count = _bot.BotsGroup.MembersCount;

                for (int i = 0; i < count; i++)
                {
                    BotOwner mate = _bot.BotsGroup.Member(i);
                    if (!EFTPlayerUtil.IsValidBotOwner(mate) || mate == _bot)
                        continue;

                    Player target = EFTPlayerUtil.ResolvePlayer(mate);
                    if (!EFTPlayerUtil.IsValidGroupPlayer(target))
                        continue;

                    Vector3 targetPos = EFTPlayerUtil.GetPosition(target);
                    float dx = targetPos.x - selfPos.x;
                    float dz = targetPos.z - selfPos.z;
                    if ((dx * dx + dz * dz) > HealSquadRangeSqr)
                        continue;

                    // Optionally add more criteria (injury, personality bias, etc.)

                    IPlayer iTarget = EFTPlayerUtil.AsSafeIPlayer(target);
                    if (iTarget != null)
                    {
                        _bot.HealAnotherTarget.HealAsk(iTarget);
                        TrySay(EPhraseTrigger.Cooperation, time);
                        return true;
                    }
                }
            }
            catch (Exception ex)
            {
                Logger.LogError($"[BotMedicLogic] TryHealSquadmate() failed: {ex}");
            }

            return false;
        }

        /// <summary>
        /// Attempts self-healing using available medkits, surgical kits, or stimulators.
        /// </summary>
        private void TrySelfHeal(float time)
        {
            try
            {
                var firstAid = _med.FirstAid as BotFirstAidClass;
                var surgery = _med.SurgicalKit as GClass473;
                var stim = _med.Stimulators as GClass475;

                if (firstAid != null && firstAid.ShallStartUse())
                {
                    _isHealing = true;
                    TrySay(EPhraseTrigger.StartHeal, time);
                    UnsubscribeFromFirstAid();
                    firstAid.OnEndApply += OnHealComplete;
                    firstAid.TryApplyToCurrentPart();
                    return;
                }

                if (surgery != null && surgery.ShallStartUse())
                {
                    _isHealing = true;
                    TrySay(EPhraseTrigger.StartHeal, time);
                    surgery.ApplyToCurrentPart();
                    return;
                }

                if (stim != null && stim.CanUseNow())
                {
                    _isHealing = true;
                    stim.StartApplyToTarget(OnStimComplete);
                }
            }
            catch (Exception ex)
            {
                _isActive = false;
                Logger.LogError($"[BotMedicLogic] TrySelfHeal() failed: {ex}. Disabling medic logic for this bot.");
            }
        }

        #endregion

        #region Callbacks

        /// <summary>
        /// Called when this bot is asked to heal another player.
        /// </summary>
        private void OnHealAsked(IPlayer target)
        {
            try
            {
                _isHealing = true;
                TrySay(EPhraseTrigger.StartHeal, Time.time);
            }
            catch (Exception ex)
            {
                Logger.LogError($"[BotMedicLogic] OnHealAsked() failed: {ex}");
            }
        }

        /// <summary>
        /// Called when a first aid application finishes.
        /// </summary>
        private void OnHealComplete(BotOwner _)
        {
            try
            {
                _isHealing = false;
                _injurySystem.Reset();
                UnsubscribeFromFirstAid();
            }
            catch (Exception ex)
            {
                Logger.LogError($"[BotMedicLogic] OnHealComplete() failed: {ex}");
            }
        }

        /// <summary>
        /// Called when a stimulator application finishes.
        /// </summary>
        private void OnStimComplete(bool success)
        {
            try
            {
                _isHealing = false;
            }
            catch (Exception ex)
            {
                Logger.LogError($"[BotMedicLogic] OnStimComplete() failed: {ex}");
            }
        }

        #endregion

        #region Utilities

        private void TrySay(EPhraseTrigger trigger, float now)
        {
            try
            {
                if (!FikaHeadlessDetector.IsHeadless && _bot.BotTalk != null && now - _lastVoiceTime > VoiceCooldown)
                {
                    _bot.BotTalk.TrySay(trigger);
                    _lastVoiceTime = now;
                }
            }
            catch (Exception ex)
            {
                Logger.LogError($"[BotMedicLogic] TrySay() failed: {ex}");
            }
        }

        private void UnsubscribeFromFirstAid()
        {
            try
            {
                var fa = _med.FirstAid as BotFirstAidClass;
                if (fa != null)
                {
                    fa.OnEndApply -= OnHealComplete;
                }
            }
            catch (Exception ex)
            {
                Logger.LogError($"[BotMedicLogic] UnsubscribeFromFirstAid() failed: {ex}");
            }
        }

        #endregion
    }
}
