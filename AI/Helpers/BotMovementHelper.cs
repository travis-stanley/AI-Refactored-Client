// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Bulletproof: No fallback logic exists. All navigation failures are isolated and only log or skip.
//   All movement is strictly path-based, never teleports or sets position directly.
//   Beyond Diamond Pass: Humanlike smoothing, organic micro-variation, and multiplayer/headless robustness.
// </auto-generated>

namespace AIRefactored.AI.Helpers
{
    using System;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Navigation;
    using AIRefactored.Core;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Provides ultra-realistic, validated, smooth movement operations for bots.
    /// All operations use path-based, drifted targets; zero teleportation, zero position sets.
    /// Adds micro-jitter, personality-driven bias, movement stutter suppression, and full null-guarding.
    /// </summary>
    public static class BotMovementHelper
    {
        #region Constants

        private const float DefaultLookSpeed = 4.25f;
        private const float DefaultRadius = 0.8f;
        private const float DefaultStrafeDistance = 3.0f;
        private const float RetreatDistance = 6.5f;
        private const float MinMoveEpsilon = 0.07f;
        private const float SlerpBias = 0.965f;
        private const float MicroJitterMagnitude = 0.11f;

        #endregion

        #region State (Anti-Stutter)

        private static string _lastMoveProfileId = string.Empty;
        private static Vector3 _lastMoveTarget = Vector3.zero;
        private static float _lastMoveTime = -1000f;

        #endregion

        #region Public API

        /// <summary>
        /// Resets the anti-stutter move cache for the specified bot.
        /// </summary>
        public static void Reset(BotOwner bot)
        {
            _lastMoveProfileId = string.Empty;
            _lastMoveTarget = Vector3.zero;
            _lastMoveTime = -1000f;
        }

        /// <summary>
        /// Issues a smooth, safe, path-based retreat to cover, using personality for bias and micro-drift.
        /// </summary>
        public static void RetreatToCover(BotOwner bot, Vector3 threatDir, float distance = RetreatDistance, bool sprint = true)
        {
            try
            {
                if (!IsAlive(bot))
                    return;

                Vector3 baseTarget = bot.Position - threatDir.normalized * distance;
                if (!BotNavHelper.TryGetSafeTarget(bot, out Vector3 target))
                    target = baseTarget;
                if (!IsValidTarget(target))
                    target = bot.Position;

                float cohesion = 1f;
                BotPersonalityProfile profile = null;
                BotRegistry.TryGet(bot.ProfileId, out profile);
                if (profile != null)
                {
                    cohesion = Mathf.Clamp(profile.Cohesion, 0.7f, 1.3f);
                    if (profile.IsFrenzied || profile.IsFearful)
                        sprint = true;
                }

                Vector3 drifted = ApplyMicroDrift(target, bot.ProfileId, Time.frameCount, profile);
                IssueMoveIfNotRedundant(bot, drifted, true, cohesion);
                if (sprint)
                    bot.Sprint(true);
            }
            catch (Exception ex)
            {
                Plugin.LoggerInstance.LogError("[BotMovementHelper] RetreatToCover failed: " + ex);
            }
        }

        /// <summary>
        /// Smoothly rotates bot to look at the specified target, with human-like jitter/overshoot.
        /// </summary>
        public static void SmoothLookTo(BotOwner bot, Vector3 lookTarget, float speed = DefaultLookSpeed)
        {
            try
            {
                if (!IsAlive(bot) || !IsValidTarget(lookTarget))
                    return;

                Transform transform = bot.Transform?.Original;
                if (transform == null)
                    return;

                Vector3 direction = lookTarget - bot.Position;
                direction.y = 0f;
                if (direction.sqrMagnitude < MinMoveEpsilon)
                    return;

                float humanOvershoot = 1f + ((SeededRandom(bot.ProfileId, Time.frameCount) - 0.5f) * 0.03f);
                Quaternion targetRotation = Quaternion.LookRotation(direction.normalized, Vector3.up);
                float t = SlerpBias * Time.deltaTime * Mathf.Clamp(speed, 1.1f, 9.5f) * humanOvershoot;
                transform.rotation = Quaternion.Slerp(transform.rotation, targetRotation, t);
            }
            catch (Exception ex)
            {
                Plugin.LoggerInstance.LogError("[BotMovementHelper] SmoothLookTo failed: " + ex);
            }
        }

        /// <summary>
        /// Smoothly moves bot to a safe, validated point, with full micro-drift and anti-stutter logic.
        /// </summary>
        public static bool SmoothMoveToSafe(BotOwner bot, Vector3 target, bool slow = true, float cohesionScale = 1f)
        {
            try
            {
                if (!IsAlive(bot) || !IsValidTarget(target))
                    return false;

                Vector3 safeTarget = BotNavHelper.TryGetSafeTarget(bot, out Vector3 fallback) ? fallback : target;
                if (!IsValidTarget(safeTarget))
                    safeTarget = bot.Position;

                Vector3 pos = bot.Position;
                float radius = DefaultRadius * Mathf.Clamp(cohesionScale, 0.7f, 1.3f);
                if ((pos.x - safeTarget.x) * (pos.x - safeTarget.x) + (pos.z - safeTarget.z) * (pos.z - safeTarget.z) < radius * radius)
                    return true;

                BotPersonalityProfile profile = null;
                BotRegistry.TryGet(bot.ProfileId, out profile);
                Vector3 drifted = ApplyMicroDrift(safeTarget, bot.ProfileId, Time.frameCount, profile);
                IssueMoveIfNotRedundant(bot, drifted, slow, cohesionScale);
                return true;
            }
            catch (Exception ex)
            {
                Plugin.LoggerInstance.LogError("[BotMovementHelper] SmoothMoveToSafe failed: " + ex);
                return false;
            }
        }

        /// <summary>
        /// Wrapper for SmoothMoveToSafe, always applies micro-drift, anti-stutter, path-based logic.
        /// </summary>
        public static void SmoothMoveTo(BotOwner bot, Vector3 target, bool slow = true, float cohesionScale = 1f)
        {
            SmoothMoveToSafe(bot, target, slow, cohesionScale);
        }

        /// <summary>
        /// Issues a realistic, micro-jittered strafe away from a threat direction.
        /// </summary>
        public static void SmoothStrafeFrom(BotOwner bot, Vector3 threatDir, float scale = 1f)
        {
            try
            {
                if (!IsAlive(bot))
                    return;

                Vector3 right = Vector3.Cross(Vector3.up, threatDir.normalized);
                if (right.sqrMagnitude < 0.01f)
                    right = Vector3.right;

                Vector3 offset = right.normalized * DefaultStrafeDistance * Mathf.Clamp(scale, 0.75f, 1.25f);
                Vector3 rawTarget = bot.Position + offset;

                Vector3 final = BotNavHelper.TryGetSafeTarget(bot, out Vector3 safeTarget) ? safeTarget : rawTarget;
                if (!IsValidTarget(final))
                    final = bot.Position;

                BotPersonalityProfile profile = null;
                BotRegistry.TryGet(bot.ProfileId, out profile);
                Vector3 drifted = ApplyMicroDrift(final, bot.ProfileId, Time.frameCount + 15, profile);
                IssueMoveIfNotRedundant(bot, drifted, false, 1f);
            }
            catch (Exception ex)
            {
                Plugin.LoggerInstance.LogError("[BotMovementHelper] SmoothStrafeFrom failed: " + ex);
            }
        }

        /// <summary>
        /// Used only as a last resort: issues a forward move along look direction (validated, never teleports).
        /// </summary>
        public static void ForceFallbackMove(BotOwner bot)
        {
            try
            {
                if (!IsAlive(bot))
                    return;

                Vector3 dir = bot.LookDirection;
                Vector3 rawTarget = bot.Position + dir.normalized * 5f;

                Vector3 final = BotNavHelper.TryGetSafeTarget(bot, out Vector3 safeTarget) ? safeTarget : rawTarget;
                if (!IsValidTarget(final))
                    final = bot.Position;

                BotPersonalityProfile profile = null;
                BotRegistry.TryGet(bot.ProfileId, out profile);
                Vector3 drifted = ApplyMicroDrift(final, bot.ProfileId, Time.frameCount + 21, profile);
                IssueMoveIfNotRedundant(bot, drifted, true, 1f);
            }
            catch (Exception ex)
            {
                Plugin.LoggerInstance.LogError("[BotMovementHelper] ForceFallbackMove failed: " + ex);
            }
        }

        /// <summary>
        /// Moves toward a safe exit (exfil) point. Always path-based, never direct.
        /// </summary>
        public static void SmoothMoveToSafeExit(BotOwner bot)
        {
            try
            {
                if (!IsAlive(bot))
                    return;

                Vector3 fallback = bot.Position + bot.LookDirection.normalized * 4f;
                Vector3 final = BotNavHelper.TryGetSafeTarget(bot, out Vector3 safeTarget) ? safeTarget : fallback;
                if (!IsValidTarget(final))
                    final = bot.Position;

                BotPersonalityProfile profile = null;
                BotRegistry.TryGet(bot.ProfileId, out profile);
                Vector3 drifted = ApplyMicroDrift(final, bot.ProfileId, Time.frameCount + 35, profile);
                IssueMoveIfNotRedundant(bot, drifted, true, 1f);
            }
            catch (Exception ex)
            {
                Plugin.LoggerInstance.LogError("[BotMovementHelper] SmoothMoveToSafeExit failed: " + ex);
            }
        }

        #endregion

        #region Internal Logic

        /// <summary>
        /// Only triggers move if bot/target/frame truly changed, suppresses micro-stutter.
        /// </summary>
        private static void IssueMoveIfNotRedundant(BotOwner bot, Vector3 drifted, bool slow, float cohesion)
        {
            try
            {
                bool newTarget = !string.Equals(_lastMoveProfileId, bot.ProfileId)
                                 || (drifted - _lastMoveTarget).sqrMagnitude > 0.02f
                                 || Time.time - _lastMoveTime > 0.08f;
                if (newTarget)
                {
                    bot.Mover?.GoToPoint(drifted, slow, cohesion);
                    _lastMoveProfileId = bot.ProfileId;
                    _lastMoveTarget = drifted;
                    _lastMoveTime = Time.time;
                }
            }
            catch (Exception ex)
            {
                Plugin.LoggerInstance.LogError("[BotMovementHelper] IssueMoveIfNotRedundant failed: " + ex);
            }
        }

        private static bool IsAlive(BotOwner bot)
        {
            return bot != null && bot.GetPlayer != null && bot.GetPlayer.IsAI && !bot.IsDead;
        }

        private static bool IsValidTarget(Vector3 pos)
        {
            return !float.IsNaN(pos.x) && !float.IsNaN(pos.y) && !float.IsNaN(pos.z)
                && !float.IsInfinity(pos.x) && !float.IsInfinity(pos.y) && !float.IsInfinity(pos.z);
        }

        /// <summary>
        /// Applies a deterministic micro-drift based on bot personality and time for realism.
        /// </summary>
        public static Vector3 ApplyMicroDrift(Vector3 pos, string profileId, int tick, BotPersonalityProfile profile = null)
        {
            float baseMag = MicroJitterMagnitude;
            float personalityBias = 1f;
            if (profile != null)
            {
                personalityBias = Mathf.Clamp(
                    1f + (profile.MovementJitter * 0.15f) + (profile.AggressionLevel * 0.05f),
                    0.93f, 1.15f);
            }

            int hash = (profileId?.GetHashCode() ?? 0) ^ (tick * 11) ^ 0x17DF413;
            unchecked
            {
                hash = (int)((hash ^ (hash >> 13)) * 0x7FEDCBA9);
                float dx = ((hash & 0xFF) / 255f - 0.5f) * baseMag * personalityBias;
                float dz = (((hash >> 8) & 0xFF) / 255f - 0.5f) * baseMag * personalityBias;
                return new Vector3(pos.x + dx, pos.y, pos.z + dz);
            }
        }

        /// <summary>
        /// Fast deterministic float [0,1) using profile id and tick, no heap alloc.
        /// </summary>
        private static float SeededRandom(string profileId, int tick)
        {
            int hash = (profileId?.GetHashCode() ?? 0) ^ (tick * 163) ^ 0x1A983D;
            unchecked { hash = (hash ^ (hash >> 13)) * 0x5E2D58B9; }
            return ((hash & 0x7FFFFFFF) % 997) / 997f;
        }

        #endregion
    }
}
