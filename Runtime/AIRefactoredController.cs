// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

namespace AIRefactored.Runtime
{
    using System;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Navigation;
    using AIRefactored.Bootstrap;
    using AIRefactored.Core;
    using BepInEx.Logging;
    using Comfort.Common;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Global AIRefactored lifecycle manager. Spawns persistent host and routes raid start/end logic and tick delegation.
    /// </summary>
    public sealed class AIRefactoredController : MonoBehaviour
    {
        #region Fields

        private static readonly object InitLock = new object();
        private static GameObject s_Host;
        private static AIRefactoredController s_Instance;
        private static bool s_Initialized;
        private static bool s_RaidActive;

        #endregion

        #region Properties

        /// <summary>
        /// Gets the shared logger from Plugin.cs.
        /// </summary>
        public static ManualLogSource Logger
        {
            get
            {
                ManualLogSource log = Plugin.LoggerInstance;
                if (log == null)
                {
                    throw new InvalidOperationException("[AIRefactoredController] Logger is not available.");
                }

                return log;
            }
        }

        #endregion

        #region Public API

        /// <summary>
        /// Initializes the controller by spawning the persistent host and attaching required components.
        /// </summary>
        public static void Initialize()
        {
            lock (InitLock)
            {
                if (s_Initialized)
                {
                    Logger.LogDebug("[AIRefactoredController] Already initialized — skipping.");
                    return;
                }

                try
                {
                    s_Host = new GameObject("AIRefactoredHost");
                    UnityEngine.Object.DontDestroyOnLoad(s_Host);

                    s_Instance = s_Host.AddComponent<AIRefactoredController>();
                    s_Host.AddComponent<GameWorldSpawnHook>();

                    WorldTickDispatcher.Initialize();

                    s_Initialized = true;
                    Logger.LogDebug("[AIRefactoredController] ✅ Initialization complete — awaiting GameWorld.");
                }
                catch (Exception ex)
                {
                    Logger.LogError("[AIRefactoredController] ❌ Initialization failed: " + ex);
                }
            }
        }

        /// <summary>
        /// Triggered when the GameWorld becomes active. Launches phase bootstrapper.
        /// </summary>
        /// <param name="world">Active GameWorld instance.</param>
        public static void OnRaidStarted(GameWorld world)
        {
            if (!s_Initialized || s_RaidActive || world == null)
            {
                return;
            }

            if (!GameWorldHandler.IsHost)
            {
                Logger.LogDebug("[AIRefactoredController] Skipped OnRaidStarted — not a valid host.");
                return;
            }

            try
            {
                if (world.RegisteredPlayers == null || world.RegisteredPlayers.Count == 0)
                {
                    Logger.LogWarning("[AIRefactoredController] Skipped — RegisteredPlayers not ready.");
                    return;
                }

                bool hasValidPlayer = false;
                for (int i = 0; i < world.RegisteredPlayers.Count; i++)
                {
                    Player p = EFTPlayerUtil.AsEFTPlayer(world.RegisteredPlayers[i]);
                    if (p != null && EFTPlayerUtil.IsValid(p))
                    {
                        hasValidPlayer = true;
                        break;
                    }
                }

                if (!hasValidPlayer)
                {
                    Logger.LogWarning("[AIRefactoredController] Skipped — no valid EFT.Player found.");
                    return;
                }

                Logger.LogInfo("[AIRefactoredController] 🚀 GameWorld valid — starting AI systems.");

                GameWorldHandler.Initialize(world);
                WorldBootstrapper.Begin(Logger, GameWorldHandler.TryGetValidMapName());

                s_RaidActive = true;
            }
            catch (Exception ex)
            {
                Logger.LogError("[AIRefactoredController] ❌ OnRaidStarted error: " + ex);
            }
        }

        /// <summary>
        /// Called at end of raid. Cleans up all state and stops world logic.
        /// </summary>
        public static void OnRaidEnded()
        {
            if (!s_RaidActive)
            {
                return;
            }

            try
            {
                Logger.LogInfo("[AIRefactoredController] 🧹 Raid ended — cleaning up world systems...");

                InitPhaseRunner.Stop();
                WorldBootstrapper.Stop();
                GameWorldHandler.Cleanup();
                BotRecoveryService.Reset();

                s_RaidActive = false;
            }
            catch (Exception ex)
            {
                Logger.LogError("[AIRefactoredController] ❌ OnRaidEnded error: " + ex);
            }
        }

        #endregion

        #region Unity Lifecycle

        private void Update()
        {
            if (WorldInitState.IsInitialized)
            {
                WorldTickDispatcher.Tick(Time.deltaTime);
            }
        }

        private void OnDestroy()
        {
            try
            {
                Logger.LogInfo("[AIRefactoredController] 🔻 OnDestroy — executing full shutdown.");

                InitPhaseRunner.Stop();
                WorldBootstrapper.Stop();
                GameWorldHandler.Cleanup();
                BotRecoveryService.Reset();

                s_Initialized = false;
                s_RaidActive = false;

                Logger.LogInfo("[AIRefactoredController] ✅ AIRefactoredController teardown complete.");
            }
            catch (Exception ex)
            {
                Logger.LogError("[AIRefactoredController] ❌ OnDestroy error: " + ex);
            }
        }

        #endregion
    }
}
