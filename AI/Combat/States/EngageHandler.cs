// <auto-generated>
//   AI-Refactored: EngageHandler.cs (Beyond Diamond Overlay-Only, Ultimate Realism, June 2025)
//   All logic is overlay/event-driven, stance/personality/squad/cover aware, micro-jittered, NavMesh safe, never disables.
//   Zero teleport, no vanilla fallback, tick-only, SPT/FIKA/headless/client parity, bulletproof, pooled, and error-isolated.
//   MIT License.
// </auto-generated>

namespace AIRefactored.AI.Combat.States
{
    using System;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Helpers;
    using AIRefactored.AI.Navigation;
    using AIRefactored.Core;
    using EFT;
    using UnityEngine;
    using UnityEngine.AI;

    /// <summary>
    /// Handles cautious, squad-aware, humanized approach to last known enemy position.
    /// - All logic is stance/personality/squad/cover aware, micro-jittered, NavMesh safe, never disables or cascades.
    /// - Voice/animation is randomized. Movement is path-based, overlay-only, no teleport or vanilla fallback.
    /// </summary>
    public sealed class EngageHandler
    {
        #region Constants

        private const float DefaultEngagementRange = 25f;
        private const float MinAdvanceDelay = 0.06f;
        private const float MaxAdvanceDelay = 0.17f;
        private const float MaxNavSampleRadius = 1.6f;
        private const float MaxAdvanceDistance = 16.2f;
        private const float AdvanceSmoothing = 4.3f;
        private const float IdleScanPauseMin = 0.21f;
        private const float IdleScanPauseMax = 0.54f;
        private const float GiveUpDistance = 1.25f;
        private const float LookScanVariance = 0.38f;

        #endregion

        #region Fields

        private readonly BotOwner _bot;
        private readonly BotComponentCache _cache;
        private readonly float _fallbackRange;
        private float _lastAdvanceTime;
        private Vector3 _lastMoveDir;
        private float _lastIdlePause;
        private float _idlePauseUntil;
        private bool _hasGivenUp;
        private bool _hasArrived;

        #endregion

        #region Initialization

        public EngageHandler(BotComponentCache cache)
        {
            _cache = cache;
            _bot = cache?.Bot;
            float profileRange = cache?.PersonalityProfile?.EngagementRange ?? 0f;
            _fallbackRange = profileRange > 0f ? profileRange : DefaultEngagementRange;
            Clear();
        }

        public void Clear()
        {
            _lastAdvanceTime = -1000f;
            _lastMoveDir = Vector3.zero;
            _lastIdlePause = 0f;
            _idlePauseUntil = 0f;
            _hasGivenUp = false;
            _hasArrived = false;
        }

        #endregion

        #region State Checks

        public bool ShallUseNow()
        {
            return IsCombatCapable() && TryGetLastKnownEnemy(out Vector3 pos) && !IsWithinRange(pos) && !_hasGivenUp;
        }

        public bool CanAttack()
        {
            return IsCombatCapable() && TryGetLastKnownEnemy(out Vector3 pos) && IsWithinRange(pos) && !_hasGivenUp;
        }

        public bool IsEngaging()
        {
            return IsCombatCapable() && TryGetLastKnownEnemy(out Vector3 pos) && !IsWithinRange(pos) && !_hasGivenUp;
        }

        #endregion

        #region Main Tick

        /// <summary>
        /// Tick called by BotBrain. Handles all overlays for cautious, human-style engage approach.
        /// - All movement overlays, stance, anticipation, and idle scanning are event-driven, never per-frame.
        /// </summary>
        public void Tick()
        {
            if (!IsCombatCapable() || _hasGivenUp)
                return;

            try
            {
                if (!TryGetLastKnownEnemy(out Vector3 enemyPos))
                    return;

                float now = Time.time;
                float hesitation = UnityEngine.Random.Range(MinAdvanceDelay, MaxAdvanceDelay);
                float jitter = _cache.PersonalityProfile != null
                    ? UnityEngine.Random.Range(-_cache.PersonalityProfile.MovementJitter * 0.07f, _cache.PersonalityProfile.MovementJitter * 0.09f)
                    : 0f;

                if (now - _lastAdvanceTime < hesitation + jitter)
                    return;

                float distToTarget = (_bot.Position - enemyPos).magnitude;

                if (distToTarget < GiveUpDistance)
                {
                    if (!_hasArrived)
                    {
                        _hasArrived = true;
                        _hasGivenUp = UnityEngine.Random.value < 0.27f + (_cache.PersonalityProfile?.Caution ?? 0.05f);

                        if (_hasGivenUp && _bot.BotTalk != null)
                        {
                            try { _bot.BotTalk.TrySay(EPhraseTrigger.Clear); } catch { }
                        }
                    }

                    if (_idlePauseUntil < now)
                    {
                        _lastIdlePause = UnityEngine.Random.Range(IdleScanPauseMin, IdleScanPauseMax);
                        _idlePauseUntil = now + _lastIdlePause;
                        if (UnityEngine.Random.value < 0.6f)
                            SmoothIdleLookScan();
                    }

                    return;
                }

                _hasArrived = false;
                _lastAdvanceTime = now;

                Vector3 destination = GetAdjustedAdvanceTarget(enemyPos);
                Vector3 safeDest = GetNavMeshSafeDestination(_bot.Position, destination);

                if (!BotNavHelper.IsNavMeshPositionValid(safeDest))
                    return;

                float advanceSqr = (safeDest - _bot.Position).sqrMagnitude;
                if (_bot.Mover == null || advanceSqr >= MaxAdvanceDistance * MaxAdvanceDistance)
                    return;

                Vector3 moveDir = safeDest - _bot.Position;
                moveDir.y = 0f;

                if (moveDir.sqrMagnitude < 0.01f)
                    return;

                if (_lastMoveDir == Vector3.zero)
                    _lastMoveDir = moveDir.normalized;

                float blendT = Mathf.Clamp01(Time.deltaTime * AdvanceSmoothing);
                Vector3 blended = Vector3.Lerp(_lastMoveDir, moveDir.normalized, blendT).normalized;
                _lastMoveDir = blended;

                float cohesion = Mathf.Clamp(_cache.PersonalityProfile?.Cohesion ?? 1f, 0.7f, 1.3f);
                Vector3 humanizedTarget = _bot.Position + blended * moveDir.magnitude;

                humanizedTarget = BotMovementHelper.ApplyMicroDrift(humanizedTarget, _bot.ProfileId, Time.frameCount, _cache.PersonalityProfile);
                BotMovementHelper.SmoothMoveToSafe(_bot, humanizedTarget, slow: false, cohesion);
                ApplyEngagementStance(advanceSqr, safeDest);

                if (_bot.BotTalk != null && UnityEngine.Random.value < 0.08f)
                {
                    try { _bot.BotTalk.TrySay(EPhraseTrigger.GoForward); } catch { }
                }
            }
            catch (Exception ex)
            {
                Plugin.LoggerInstance.LogError($"[EngageHandler] Tick error: {ex}");
            }
        }

        #endregion

        #region Internal Helpers

        private bool IsCombatCapable()
        {
            return _bot != null && _cache != null && _cache.Combat != null;
        }

        private bool TryGetLastKnownEnemy(out Vector3 result)
        {
            result = _cache?.Combat?.LastKnownEnemyPos ?? Vector3.zero;
            return result != Vector3.zero;
        }

        private bool IsWithinRange(Vector3 enemyPos)
        {
            return (_bot.Position - enemyPos).sqrMagnitude < _fallbackRange * _fallbackRange;
        }

        private Vector3 GetAdjustedAdvanceTarget(Vector3 baseTarget)
        {
            if (_cache.SquadPath != null)
            {
                try { return _cache.SquadPath.ApplyOffsetTo(baseTarget); }
                catch { return baseTarget; }
            }

            Vector3 offsetDir = Vector3.Cross(Vector3.up, _bot.LookDirection.normalized);
            float soloOffset = UnityEngine.Random.Range(-LookScanVariance, LookScanVariance);
            return baseTarget + offsetDir * soloOffset;
        }

        private static Vector3 GetNavMeshSafeDestination(Vector3 origin, Vector3 candidate)
        {
            if (NavMesh.SamplePosition(candidate, out var hit, MaxNavSampleRadius, NavMesh.AllAreas))
            {
                float dist = (hit.position - origin).magnitude;
                if (dist < 0.08f || dist > MaxAdvanceDistance)
                    return origin;
                return hit.position;
            }

            return origin;
        }

        private void ApplyEngagementStance(float advanceSqr, Vector3 moveTarget)
        {
            var pose = _cache?.PoseController;
            if (pose == null) return;

            if (advanceSqr < 9.0f || _cache.PersonalityProfile?.Caution > 0.25f)
                pose.Crouch();
            else if (_cache.PersonalityProfile?.AggressionLevel > 0.7f)
                pose.Stand();
            else
                pose.TrySetStanceFromNearbyCover(moveTarget);
        }

        private void SmoothIdleLookScan()
        {
            if (_bot == null || _bot.Transform == null || _bot.IsDead)
                return;

            Vector3 offset = UnityEngine.Random.insideUnitSphere * 1.6f;
            offset.y = 0f;
            Vector3 lookTarget = _bot.Position + _bot.LookDirection.normalized * 2.8f + offset;

            BotMovementHelper.SmoothLookTo(_bot, lookTarget, 2.9f + UnityEngine.Random.value * 1.6f);
        }

        #endregion
    }
}
