// <auto-generated>
//   AI-Refactored: BotPerceptionSystem.cs (Ultimate Realism, Fully Safe & Headless-Compatible)
//   Realism: Flashblindness, flare, suppression, panic triggers.
//   Bulletproof: Null-safe, error isolated, uses only approved helper methods for player/bot data.
//   MIT License.
// </auto-generated>

namespace AIRefactored.AI.Perception
{
    using System;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Groups;
    using AIRefactored.AI.Helpers;
    using AIRefactored.Core;
    using EFT;
    using UnityEngine;

    public sealed class BotPerceptionSystem : IFlashReactiveBot
    {
        private const float BlindSpeechThreshold = 0.4f;
        private const float FlareRecoverySpeed = 0.2f;
        private const float FlashRecoverySpeed = 0.5f;
        private const float MaxSightDistance = 70f;
        private const float MinSightDistance = 15f;
        private const float PanicTriggerThreshold = 0.6f;
        private const float SuppressionRecoverySpeed = 0.3f;
        private const float SuppressedThreshold = 0.18f;
        private const float PanicCooldown = 2.4f;

        private float _blindStartTime = -1f;
        private float _flashBlindness;
        private float _flareIntensity;
        private float _suppressionFactor;

        private BotOwner _bot;
        private BotComponentCache _cache;
        private BotVisionProfile _profile;

        private bool _failed;
        private bool _panicTriggered;
        private float _lastPanicTime;

        public bool IsSuppressed => _suppressionFactor > SuppressedThreshold;

        public void Initialize(BotComponentCache cache)
        {
            _bot = null;
            _cache = null;
            _profile = null;
            _failed = false;
            _panicTriggered = false;
            _lastPanicTime = -1000f;

            try
            {
                if (cache == null || cache.Bot == null)
                    return;

                BotOwner owner = cache.Bot;
                if (owner.IsDead || owner.GetPlayer == null || !owner.GetPlayer.IsAI)
                    return;

                BotVisionProfile profile = BotVisionProfiles.Get(owner.GetPlayer);
                if (profile == null)
                    return;

                _bot = owner;
                _cache = cache;
                _profile = profile;
            }
            catch (Exception ex)
            {
                _failed = true;
                Plugin.LoggerInstance.LogError($"[BotPerceptionSystem] Initialize exception: {ex}");
            }
        }

        public void Tick(float deltaTime)
        {
            if (_failed || !IsActive())
                return;

            try
            {
                UpdateFlashlightExposure();

                float penalty = Mathf.Max(_flashBlindness, _flareIntensity, _suppressionFactor);
                float adjustedSight = Mathf.Lerp(MinSightDistance, MaxSightDistance, 1f - penalty);
                float visibleDist = adjustedSight * (_profile != null ? _profile.AdaptationSpeed : 1f);

                if (_bot.LookSensor != null)
                    _bot.LookSensor.ClearVisibleDist = visibleDist;

                float blindDuration = Mathf.Clamp01(_flashBlindness) * 3f;

                if (_cache != null)
                {
                    _cache.IsBlinded = _flashBlindness > BlindSpeechThreshold;
                    _cache.BlindUntilTime = Time.time + blindDuration;
                }

                TryTriggerPanic();
                RecoverClarity(deltaTime);
                SyncEnemyIfVisible();
            }
            catch (Exception ex)
            {
                _failed = true;
                Plugin.LoggerInstance.LogError($"[BotPerceptionSystem] Tick exception: {ex}");
            }
        }

        public void ApplyFlareExposure(float strength)
        {
            if (_failed || !IsActive())
                return;

            try
            {
                _flareIntensity = Mathf.Clamp(strength * 0.6f, 0f, 0.8f);
            }
            catch (Exception ex)
            {
                _failed = true;
                Plugin.LoggerInstance.LogError($"[BotPerceptionSystem] ApplyFlareExposure exception: {ex}");
            }
        }

        public void ApplyFlashBlindness(float intensity)
        {
            if (_failed || !IsActive())
                return;

            try
            {
                float added = Mathf.Clamp01(intensity * (_profile != null ? _profile.MaxBlindness : 1f));
                _flashBlindness = Mathf.Clamp01(_flashBlindness + added);
                _blindStartTime = Time.time;

                if (_flashBlindness > BlindSpeechThreshold && _bot?.BotTalk != null && !FikaHeadlessDetector.IsHeadless)
                {
                    _bot.BotTalk.TrySay(EPhraseTrigger.OnBeingHurt);
                }
            }
            catch (Exception ex)
            {
                _failed = true;
                Plugin.LoggerInstance.LogError($"[BotPerceptionSystem] ApplyFlashBlindness exception: {ex}");
            }
        }

        public void ApplySuppression(float severity)
        {
            if (_failed || !IsActive())
                return;

            try
            {
                _suppressionFactor = Mathf.Clamp01(severity * (_profile != null ? _profile.AggressionResponse : 1f));
            }
            catch (Exception ex)
            {
                _failed = true;
                Plugin.LoggerInstance.LogError($"[BotPerceptionSystem] ApplySuppression exception: {ex}");
            }
        }

        public void OnFlashExposure(Vector3 lightOrigin)
        {
            if (_failed || !IsActive())
                return;

            try
            {
                ApplyFlashBlindness(0.4f);
            }
            catch (Exception ex)
            {
                _failed = true;
                Plugin.LoggerInstance.LogError($"[BotPerceptionSystem] OnFlashExposure exception: {ex}");
            }
        }

        private bool IsActive()
        {
            return !_failed &&
                   _cache != null &&
                   _bot != null &&
                   _profile != null &&
                   !_bot.IsDead &&
                   _bot.GetPlayer != null &&
                   _bot.GetPlayer.IsAI;
        }

        private void UpdateFlashlightExposure()
        {
            if (_failed)
                return;

            try
            {
                Transform head = BotCacheUtility.Head(_cache);
                if (head == null)
                    return;

                if (FlashlightRegistry.IsExposingBot(_bot.GetPlayer, out Light source) && source != null)
                {
                    float score = FlashLightUtils.CalculateFlashScore(source.transform, head, 20f);
                    if (score > 0.25f)
                    {
                        ApplyFlashBlindness(score);
                    }
                }
            }
            catch (Exception ex)
            {
                _failed = true;
                Plugin.LoggerInstance.LogError($"[BotPerceptionSystem] UpdateFlashlightExposure exception: {ex}");
            }
        }

        private void RecoverClarity(float deltaTime)
        {
            try
            {
                float recovery = _profile != null ? _profile.ClarityRecoverySpeed : 1f;

                _flashBlindness = Mathf.MoveTowards(_flashBlindness, 0f, FlashRecoverySpeed * recovery * deltaTime);
                _flareIntensity = Mathf.MoveTowards(_flareIntensity, 0f, FlareRecoverySpeed * recovery * deltaTime);
                _suppressionFactor = Mathf.MoveTowards(_suppressionFactor, 0f, SuppressionRecoverySpeed * recovery * deltaTime);
            }
            catch (Exception ex)
            {
                _failed = true;
                Plugin.LoggerInstance.LogError($"[BotPerceptionSystem] RecoverClarity exception: {ex}");
            }
        }

        private void TryTriggerPanic()
        {
            try
            {
                if (_cache == null || _cache.PanicHandler == null)
                    return;

                float elapsed = Time.time - _blindStartTime;
                float now = Time.time;
                if (!_panicTriggered && _flashBlindness >= PanicTriggerThreshold && elapsed < PanicCooldown)
                {
                    _cache.PanicHandler.TriggerPanic();
                    _panicTriggered = true;
                    _lastPanicTime = now;
                }
                else if (_panicTriggered && now - _lastPanicTime > PanicCooldown)
                {
                    _panicTriggered = false;
                }
            }
            catch (Exception ex)
            {
                _failed = true;
                Plugin.LoggerInstance.LogError($"[BotPerceptionSystem] TryTriggerPanic exception: {ex}");
            }
        }

        private void SyncEnemyIfVisible()
        {
            try
            {
                if (_cache == null || _cache.IsBlinded || _bot?.Memory == null)
                    return;

                IPlayer raw = _bot.Memory.GoalEnemy?.Person;
                if (raw == null)
                    return;

                Player target = EFTPlayerUtil.AsEFTPlayer(raw);
                Player self = EFTPlayerUtil.ResolvePlayer(_bot);

                if (EFTPlayerUtil.IsValid(target) && EFTPlayerUtil.IsValid(self) && EFTPlayerUtil.IsEnemyOf(_bot, target))
                {
                    BotTeamLogic.AddEnemy(_bot, raw);
                }
            }
            catch (Exception ex)
            {
                _failed = true;
                Plugin.LoggerInstance.LogError($"[BotPerceptionSystem] SyncEnemyIfVisible exception: {ex}");
            }
        }
    }
}
