// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Failures in AIRefactored logic must always trigger safe fallback to EFT base AI.
// </auto-generated>

namespace AIRefactored.AI.Combat
{
    using System;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Helpers;
    using AIRefactored.AI.Memory;
    using AIRefactored.AI.Optimization;
    using AIRefactored.Core;
    using EFT;
    using EFT.HealthSystem;
    using UnityEngine;

    /// <summary>
    /// Handles bot suppression, flash, injury, and squad danger panic behavior.
    /// Manages composure, retreat direction, danger zones, and voice triggers.
    /// Bulletproof: All failures are isolated; only this handler disables itself and triggers vanilla fallback if required.
    /// </summary>
    public sealed class BotPanicHandler
    {
        #region Constants

        private const float PanicCooldown = 5f;
        private const float PanicDuration = 3.5f;
        private const float RecoverySpeed = 0.2f;
        private const float SquadRadiusSqr = 225f;
        private const float LowHealthThreshold = 25f;

        #endregion

        #region Fields

        private BotOwner _bot;
        private BotComponentCache _cache;

        private float _composureLevel = 1f;
        private float _panicStartTime = -1f;
        private float _lastPanicExitTime = -99f;
        private bool _isPanicking;
        private bool _isFallbackMode;

        #endregion

        #region Properties

        public bool IsPanicking => _isPanicking;

        #endregion

        #region Public Methods

        public float GetComposureLevel()
        {
            return _composureLevel;
        }

        public void Initialize(BotComponentCache componentCache)
        {
            if (componentCache == null || componentCache.Bot == null)
            {
                BotFallbackUtility.Trigger(this, null, "[BotPanicHandler] Cannot initialize with null BotComponentCache or Bot.");
                _isFallbackMode = true;
                return;
            }

            _cache = componentCache;
            _bot = componentCache.Bot;
            _isFallbackMode = false;

            try
            {
                if (_bot.GetPlayer is Player player && player.HealthController != null)
                {
                    player.HealthController.ApplyDamageEvent += OnDamaged;
                }
            }
            catch (Exception ex)
            {
                BotFallbackUtility.Trigger(this, _bot, "Exception subscribing to ApplyDamageEvent.", ex);
                _isFallbackMode = true;
            }
        }

        public void Tick(float time)
        {
            if (_isFallbackMode || !IsValid())
                return;

            try
            {
                if (_isPanicking)
                {
                    if (time - _panicStartTime > PanicDuration)
                        EndPanic(time);
                    return;
                }

                RecoverComposure(Time.deltaTime);

                if (time <= _lastPanicExitTime + PanicCooldown)
                    return;

                if (ShouldPanicFromThreat())
                {
                    Vector3 retreat = -_bot.LookDirection.normalized;
                    TryStartPanic(time, retreat);
                    return;
                }

                if (CheckNearbySquadDanger(out Vector3 squadDir))
                {
                    TryStartPanic(time, squadDir);
                }
            }
            catch (Exception ex)
            {
                BotFallbackUtility.Trigger(this, _bot, "Exception in Tick.", ex);
                _isFallbackMode = true;
            }
        }

        public void TriggerPanic()
        {
            if (_isFallbackMode || !IsValid() || _isPanicking || Time.time < _lastPanicExitTime + PanicCooldown)
                return;

            try
            {
                var profile = _cache.AIRefactoredBotOwner?.PersonalityProfile;
                if (profile == null || profile.IsFrenzied || profile.IsStubborn)
                    return;

                Vector3 retreatDir = -_bot.LookDirection.normalized;
                TryStartPanic(Time.time, retreatDir);
            }
            catch (Exception ex)
            {
                BotFallbackUtility.Trigger(this, _bot, "Exception in TriggerPanic.", ex);
                _isFallbackMode = true;
            }
        }

        #endregion

        #region Private Methods

        private void OnDamaged(EBodyPart part, float damage, DamageInfoStruct info)
        {
            if (_isFallbackMode || !IsValid() || _isPanicking || Time.time < _lastPanicExitTime + PanicCooldown)
                return;

            try
            {
                var profile = _cache.AIRefactoredBotOwner?.PersonalityProfile;
                if (profile == null || profile.IsFrenzied || profile.IsStubborn || profile.AggressionLevel > 0.8f)
                    return;

                Vector3 retreatDir = (_bot.Position - info.HitPoint).normalized;
                TryStartPanic(Time.time, retreatDir);

                if (_bot.Memory?.GoalEnemy?.Person is Player enemy && !string.IsNullOrEmpty(enemy.ProfileId))
                    _cache.LastShotTracker?.RegisterHit(enemy.ProfileId);

                _cache.InjurySystem?.OnHit(part, damage);
                _cache.GroupComms?.SayHit();
            }
            catch (Exception ex)
            {
                BotFallbackUtility.Trigger(this, _bot, "Exception in OnDamaged.", ex);
                _isFallbackMode = true;
            }
        }

        private bool ShouldPanicFromThreat()
        {
            try
            {
                var profile = _cache.AIRefactoredBotOwner?.PersonalityProfile;
                if (profile == null || profile.IsFrenzied || profile.IsStubborn)
                    return false;

                if (_cache.FlashGrenade != null && _cache.FlashGrenade.IsFlashed())
                    return true;

                if (_bot.HealthController == null)
                    return false;

                ValueStruct health = _bot.HealthController.GetBodyPartHealth(EBodyPart.Common);
                return health.Current < LowHealthThreshold;
            }
            catch (Exception ex)
            {
                BotFallbackUtility.Trigger(this, _bot, "Exception in ShouldPanicFromThreat.", ex);
                _isFallbackMode = true;
                return false;
            }
        }

        private void RecoverComposure(float deltaTime)
        {
            try
            {
                _composureLevel = Mathf.Clamp01(_composureLevel + deltaTime * RecoverySpeed);
            }
            catch (Exception ex)
            {
                BotFallbackUtility.Trigger(this, _bot, "Exception in RecoverComposure.", ex);
                _isFallbackMode = true;
            }
        }

        private void TryStartPanic(float now, Vector3 retreatDir)
        {
            if (_isFallbackMode || !IsValid())
                return;

            try
            {
                _isPanicking = true;
                _panicStartTime = now;
                _composureLevel = 0f;

                _cache.Escalation?.NotifyPanicTriggered();

                float cohesion = _cache.AIRefactoredBotOwner?.PersonalityProfile?.Cohesion ?? 1f;
                Vector3 fallback = _bot.Position + retreatDir.normalized * 8f;

                if (_cache.Pathing != null)
                {
                    var path = BotCoverRetreatPlanner.GetCoverRetreatPath(_bot, retreatDir, _cache.Pathing);
                    if (path != null && path.Count > 0)
                    {
                        fallback = (Vector3.Distance(path[0], _bot.Position) < 1f && path.Count > 1) ? path[1] : path[0];
                    }
                }

                if (_bot.Mover != null)
                {
                    BotMovementHelper.SmoothMoveTo(_bot, fallback, false, cohesion);
                    BotCoverHelper.TrySetStanceFromNearbyCover(_cache, fallback);
                }
                else
                {
                    BotFallbackUtility.Trigger(this, _bot, "BotMover missing. Fallback to EFT AI.");
                    _isFallbackMode = true;
                    BotFallbackUtility.FallbackToEFTLogic(_bot);
                    return;
                }

                if (GameWorldHandler.TryGetValidMapName() is string mapId)
                {
                    BotMemoryStore.AddDangerZone(mapId, _bot.Position, DangerTriggerType.Panic, 0.6f);
                }

                _bot.Sprint(true);

                if (!FikaHeadlessDetector.IsHeadless && _bot.BotTalk != null)
                {
                    try { _bot.BotTalk.TrySay(EPhraseTrigger.OnBeingHurt); }
                    catch { /* no-op */ }
                }
            }
            catch (Exception ex)
            {
                BotFallbackUtility.Trigger(this, _bot, "Exception in TryStartPanic.", ex);
                _isFallbackMode = true;
            }
        }

        private void EndPanic(float now)
        {
            try
            {
                _isPanicking = false;
                _lastPanicExitTime = now;

                if (_bot.Memory != null)
                {
                    _bot.Memory.SetLastTimeSeeEnemy();
                    _bot.Memory.CheckIsPeace();
                }
            }
            catch (Exception ex)
            {
                BotFallbackUtility.Trigger(this, _bot, "Exception in EndPanic.", ex);
                _isFallbackMode = true;
            }
        }

        private bool CheckNearbySquadDanger(out Vector3 retreatDir)
        {
            retreatDir = Vector3.zero;

            try
            {
                if (_bot.Profile?.Info?.GroupId == null)
                    return false;

                string mapId = GameWorldHandler.TryGetValidMapName();
                if (string.IsNullOrEmpty(mapId))
                    return false;

                Vector3 myPos = _bot.Position;
                var zones = BotMemoryStore.GetZonesForMap(mapId);

                for (int i = 0; i < zones.Count; i++)
                {
                    if ((zones[i].Position - myPos).sqrMagnitude <= SquadRadiusSqr)
                    {
                        retreatDir = (myPos - zones[i].Position).normalized;
                        return true;
                    }
                }
            }
            catch (Exception ex)
            {
                BotFallbackUtility.Trigger(this, _bot, "Exception in CheckNearbySquadDanger.", ex);
                _isFallbackMode = true;
            }

            return false;
        }

        private bool IsValid()
        {
            try
            {
                return _bot != null &&
                       _cache != null &&
                       !_bot.IsDead &&
                       _bot.GetPlayer is Player player &&
                       player.IsAI;
            }
            catch
            {
                return false;
            }
        }

        #endregion
    }
}
