// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Failures in AIRefactored logic must always trigger safe fallback to EFT base AI.
// </auto-generated>

namespace AIRefactored.AI.Missions.Subsystems
{
    using System;
    using System.Collections.Generic;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Groups;
    using AIRefactored.AI.Helpers;
    using AIRefactored.AI.Optimization;
    using AIRefactored.Core;
    using AIRefactored.Pools;
    using AIRefactored.Runtime;
    using BepInEx.Logging;
    using EFT;
    using EFT.Interactive;
    using EFT.InventoryLogic;
    using UnityEngine;

    /// <summary>
    /// Evaluates combat, squad cohesion, loot status, and fallback triggers to adjust bot missions.
    /// </summary>
    public sealed class MissionEvaluator
    {
        #region Constants

        private const int LootItemCountThreshold = 40;
        private const float SquadCohesionRange = 10f;
        private const float StuckCooldown = 30f;
        private const float StuckDuration = 25f;
        private const float MinMoveThreshold = 0.3f;

        #endregion

        #region Fields

        private static readonly ManualLogSource Logger = Plugin.LoggerInstance;

        private readonly BotOwner _bot;
        private readonly BotComponentCache _cache;
        private readonly BotGroupSyncCoordinator _group;
        private readonly BotPersonalityProfile _profile;

        private int _fallbackAttempts;
        private float _lastMoveTime;
        private float _stuckSince;
        private float _lastStuckFallbackTime;
        private Vector3 _lastPos;

        #endregion

        #region Constructor

        public MissionEvaluator(BotOwner bot, BotComponentCache cache)
        {
            if (!EFTPlayerUtil.IsValidBotOwner(bot) || cache == null)
            {
                throw new ArgumentException("[MissionEvaluator] Invalid bot or cache.");
            }

            _bot = bot;
            _cache = cache;
            _profile = BotRegistry.Get(bot.ProfileId);
            _group = BotCacheUtility.GetGroupSync(cache);
            _lastPos = bot.Position;
            _lastMoveTime = Time.time;
        }

        #endregion

        #region Mission Checks

        public bool IsGroupAligned()
        {
            if (_group == null) return true;

            IReadOnlyList<BotOwner> squad = _group.GetTeammates();
            if (squad == null || squad.Count == 0) return true;

            int nearby = 0;
            Vector3 selfPos = _bot.Position;
            float sqrRange = SquadCohesionRange * SquadCohesionRange;

            for (int i = 0; i < squad.Count; i++)
            {
                BotOwner mate = squad[i];
                if (mate != null && !mate.IsDead && (mate.Position - selfPos).sqrMagnitude <= sqrRange)
                {
                    nearby++;
                }
            }

            int required = Mathf.CeilToInt(squad.Count * 0.6f);
            return nearby >= required;
        }

        public bool ShouldExtractEarly()
        {
            if (_profile.IsFrenzied || _profile.Caution <= 0.6f) return false;

            Player player = _bot.GetPlayer;
            if (player?.Inventory?.Equipment == null) return false;

            Slot backpackSlot = player.Inventory.Equipment.GetSlot(EquipmentSlot.Backpack);
            if (backpackSlot?.ContainedItem == null) return false;

            List<Item> items = TempListPool.Rent<Item>();
            try
            {
                items.AddRange(backpackSlot.ContainedItem.GetAllItems());
                float fullness = (float)items.Count / LootItemCountThreshold;
                return fullness >= _profile.RetreatThreshold;
            }
            finally
            {
                TempListPool.Return(items);
            }
        }

        public void TryExtract()
        {
            try
            {
                ExfiltrationPoint[] allPoints = GameObject.FindObjectsOfType<ExfiltrationPoint>();
                if (allPoints == null || allPoints.Length == 0) return;

                ExfiltrationPoint closest = null;
                float minDist = float.MaxValue;
                Vector3 myPos = _bot.Position;

                for (int i = 0; i < allPoints.Length; i++)
                {
                    ExfiltrationPoint point = allPoints[i];
                    if (point != null && point.Status == EExfiltrationStatus.RegularMode)
                    {
                        float dist = (point.transform.position - myPos).sqrMagnitude;
                        if (dist < minDist)
                        {
                            minDist = dist;
                            closest = point;
                        }
                    }
                }

                if (closest != null)
                {
                    BotMovementHelper.SmoothMoveTo(_bot, closest.transform.position);
                    Say(EPhraseTrigger.ExitLocated);
                }
            }
            catch (Exception ex)
            {
                Logger.LogWarning("[MissionEvaluator] Extraction failed: " + ex.Message);
            }
        }

        #endregion

        #region Stuck Detection

        public void UpdateStuckCheck(float time)
        {
            float moved = Vector3.Distance(_bot.Position, _lastPos);

            if (moved > MinMoveThreshold)
            {
                _lastPos = _bot.Position;
                _lastMoveTime = time;
                _fallbackAttempts = 0;
                return;
            }

            bool cooldownPassed = time - _stuckSince > StuckCooldown;
            bool stuckLongEnough = time - _lastMoveTime > StuckDuration;
            bool notRecentlyFellback = time - _lastStuckFallbackTime > StuckCooldown;

            if (stuckLongEnough && cooldownPassed && notRecentlyFellback && _fallbackAttempts < 2)
            {
                _stuckSince = time;
                _lastStuckFallbackTime = time;
                _fallbackAttempts++;

                Vector3 dir = _bot.LookDirection;
                Vector3? fallback = HybridFallbackResolver.GetBestRetreatPoint(_bot, dir);
                if (fallback.HasValue)
                {
                    Logger.LogDebug("[MissionEvaluator] " + (_bot.Profile?.Info?.Nickname ?? "Unknown") +
                                    " fallback #" + _fallbackAttempts + " → " + fallback.Value);
                    BotMovementHelper.SmoothMoveTo(_bot, fallback.Value);
                }
            }
        }

        #endregion

        #region Utilities

        private void Say(EPhraseTrigger phrase)
        {
            try
            {
                if (!FikaHeadlessDetector.IsHeadless && _bot?.GetPlayer != null)
                {
                    _bot.GetPlayer.Say(phrase);
                }
            }
            catch (Exception ex)
            {
                Logger.LogWarning("[MissionEvaluator] VO failed: " + ex.Message);
            }
        }

        #endregion
    }
}
