// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Bulletproof: All failures are locally contained, never break other subsystems, and always trigger fallback isolation.
//   See: AIRefactored “Bulletproof Fallback & Isolation Safety Rule Set” for audit compliance.
// </auto-generated>

namespace AIRefactored.Bootstrap
{
    using System;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Hotspots;
    using AIRefactored.Core;
    using BepInEx.Logging;

    /// <summary>
    /// Bootstraps and manages the lifecycle of the HotspotRegistry system across raid sessions.
    /// Fully enforces isolation—failures never cascade, only locally fallback.
    /// </summary>
    public sealed class HotspotRegistryBootstrapper : IAIWorldSystemBootstrapper
    {
        private static readonly ManualLogSource Logger = Plugin.LoggerInstance;
        private volatile bool _isInitialized;
        private volatile bool _hasFailed;

        /// <inheritdoc />
        public void Initialize()
        {
            _isInitialized = false;
            _hasFailed = false;

            try
            {
                HotspotRegistry.Clear();

                if (!GameWorldHandler.IsHost)
                {
                    Logger.LogWarning("[HotspotRegistry] Initialization skipped — not authoritative host.");
                    return;
                }

                if (!GameWorldHandler.IsSafeToInitialize)
                {
                    Logger.LogWarning("[HotspotRegistry] Initialization skipped — world not ready.");
                    return;
                }

                string mapId = GameWorldHandler.TryGetValidMapName();
                if (string.IsNullOrEmpty(mapId) || mapId == "unknown")
                {
                    Logger.LogWarning("[HotspotRegistry] Initialization skipped — invalid map ID.");
                    return;
                }

                HotspotRegistry.Initialize(mapId);
                _isInitialized = true;
                Logger.LogDebug("[HotspotRegistry] ✅ Initialized for map: " + mapId);
            }
            catch (Exception ex)
            {
                _hasFailed = true;
                _isInitialized = false;
                Logger.LogError("[HotspotRegistry] Initialization failed: " + ex);
                OnFailover();
            }
        }

        /// <inheritdoc />
        public void Tick(float deltaTime)
        {
            // Future: Add runtime hotspot logic here. All errors must remain locally isolated.
        }

        /// <inheritdoc />
        public void OnRaidEnd()
        {
            try
            {
                HotspotRegistry.Clear();
                _isInitialized = false;
                Logger.LogDebug("[HotspotRegistry] 🔻 Cleared on raid end.");
            }
            catch (Exception ex)
            {
                _hasFailed = true;
                Logger.LogError("[HotspotRegistry] OnRaidEnd failed: " + ex);
                OnFailover();
            }
        }

        /// <inheritdoc />
        public bool IsReady()
        {
            return _isInitialized && !_hasFailed;
        }

        /// <inheritdoc />
        public WorldPhase RequiredPhase()
        {
            return WorldPhase.WorldReady;
        }

        /// <summary>
        /// Invoked on initialization or teardown failure. Fallback disables only this system.
        /// </summary>
        private void OnFailover()
        {
            // Optional: Add fallback logic like HotspotRegistry.RevertToVanilla() here.
            // Must never affect global systems or other AI components.
        }
    }
}
