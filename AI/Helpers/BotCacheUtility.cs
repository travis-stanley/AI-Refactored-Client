// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

namespace AIRefactored.AI.Helpers
{
    using System.Collections.Generic;
    using AIRefactored.AI.Combat;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Groups;
    using AIRefactored.AI.Missions;
    using AIRefactored.AI.Movement;
    using AIRefactored.Core;
    using AIRefactored.Runtime;
    using BepInEx.Logging;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Centralized runtime registry for bot caches, profiles, and group links.
    /// Provides fast lookup and utility access across AIRefactored systems.
    /// </summary>
    public static class BotCacheUtility
    {
        #region Fields

        private static readonly Dictionary<BotOwner, BotComponentCache> CacheRegistry = new Dictionary<BotOwner, BotComponentCache>(64);
        private static readonly Dictionary<string, BotComponentCache> ProfileIdLookup = new Dictionary<string, BotComponentCache>(64);
        private static readonly ManualLogSource Logger = Plugin.LoggerInstance;

        #endregion

        #region Public API

        public static IEnumerable<BotComponentCache> AllActiveBots()
        {
            foreach (var pair in CacheRegistry)
            {
                if (pair.Key != null && !pair.Key.IsDead)
                {
                    yield return pair.Value;
                }
            }
        }

        public static void DumpCache()
        {
            Logger.LogDebug("[BotCacheUtility] Dumping bot caches:");

            foreach (var pair in CacheRegistry)
            {
                if (pair.Key == null)
                    continue;

                string name = GetBotName(pair.Value);
                Vector3 pos = pair.Key.Position;
                bool alive = !pair.Key.IsDead;

                Logger.LogDebug($" → {name}, Pos={pos}, Alive={alive}");
            }
        }

        public static bool TryGet(BotOwner bot, out BotComponentCache cache)
        {
            if (bot != null && CacheRegistry.TryGetValue(bot, out cache))
            {
                return true;
            }

            cache = BotComponentCache.Empty;
            return false;
        }

        public static BotComponentCache GetCache(BotOwner bot)
        {
            return bot != null && CacheRegistry.TryGetValue(bot, out var cache) ? cache : null;
        }

        public static BotComponentCache GetCache(Player player)
        {
            if (player?.AIData?.BotOwner != null)
            {
                return GetCache(player.AIData.BotOwner);
            }

            return null;
        }

        public static BotComponentCache GetCache(string profileId)
        {
            return !string.IsNullOrEmpty(profileId) && ProfileIdLookup.TryGetValue(profileId, out var cache)
                ? cache
                : null;
        }

        public static string GetBotName(BotComponentCache cache)
        {
            if (cache?.Bot?.Profile?.Info != null)
            {
                return $"{cache.Bot.Profile.Info.Nickname} ({cache.Bot.Profile.Side})";
            }

            return "Unknown";
        }

        public static BotGroupSyncCoordinator GetGroupSync(BotComponentCache cache)
        {
            return cache?.GroupSync ?? cache?.GroupBehavior?.GroupSync;
        }

        public static BotComponentCache GetClosestBot(Vector3 origin, float maxDistance)
        {
            float maxSqr = maxDistance * maxDistance;
            float bestSqr = maxSqr;
            BotComponentCache closest = null;

            foreach (var pair in CacheRegistry)
            {
                BotOwner bot = pair.Key;
                if (bot == null || bot.IsDead)
                {
                    continue;
                }

                Vector3 pos = bot.Position;
                float dx = pos.x - origin.x;
                float dy = pos.y - origin.y;
                float dz = pos.z - origin.z;
                float distSqr = (dx * dx) + (dy * dy) + (dz * dz);

                if (distSqr < bestSqr)
                {
                    bestSqr = distSqr;
                    closest = pair.Value;
                }
            }

            return closest;
        }

        public static Transform Head(BotComponentCache cache)
        {
            if (cache?.Bot?.MainParts == null)
            {
                return null;
            }

            if (cache.Bot.MainParts.TryGetValue(BodyPartType.head, out EnemyPart part) &&
                part != null && part._transform != null)
            {
                return part._transform.Original;
            }

            return null;
        }

        public static void Register(BotOwner bot, BotComponentCache cache)
        {
            if (bot == null || cache == null || bot.IsDead)
            {
                return;
            }

            CacheRegistry[bot] = cache;

            string profileId = bot.ProfileId;
            if (!string.IsNullOrEmpty(profileId))
            {
                ProfileIdLookup[profileId] = cache;
            }

            BotTeamTracker.RegisterFromBot(bot);
            GroupMissionCoordinator.RegisterFromBot(bot);
        }

        public static void Unregister(BotOwner bot)
        {
            if (bot == null)
            {
                return;
            }

            CacheRegistry.Remove(bot);

            string profileId = bot.ProfileId;
            if (!string.IsNullOrEmpty(profileId))
            {
                ProfileIdLookup.Remove(profileId);
            }

            BotTeamTracker.Unregister(bot);
        }

        #endregion
    }
}
