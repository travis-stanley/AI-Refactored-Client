// <auto-generated>
//   AI-Refactored: TempDictionaryPool.cs (Beyond Diamond, Zero-Alloc Edition, June 2025)
//   Bulletproof, type-safe pooling for Dictionary<TKey, TValue> (no capacity logic for .NET 4.7.1).
//   Thread-safe, teardown/reload safe, and compliant with AI-Refactored pooling architecture.
//   MIT License.
// </auto-generated>

namespace AIRefactored.Pools
{
    using System;
    using System.Collections.Generic;

    /// <summary>
    /// Centralized pool for temporary <see cref="Dictionary{TKey, TValue}"/> reuse.
    /// Reduces garbage generation in AI logic and hot paths.
    /// </summary>
    public static class TempDictionaryPool
    {
        private static readonly Dictionary<string, Stack<object>> PoolByTypeKey = new Dictionary<string, Stack<object>>(128);
        private static readonly object SyncRoot = new object();

        static TempDictionaryPool()
        {
            try
            {
                AppDomain.CurrentDomain.DomainUnload += (_, __) => ClearAll();
            }
            catch { }
        }

        /// <summary>
        /// Retrieves a cleared dictionary from the pool, or allocates a new one.
        /// </summary>
        /// <typeparam name="TKey">Dictionary key type.</typeparam>
        /// <typeparam name="TValue">Dictionary value type.</typeparam>
        /// <returns>A clean dictionary ready for use.</returns>
        public static Dictionary<TKey, TValue> Rent<TKey, TValue>()
        {
            string typeKey = GetTypeKey<TKey, TValue>();

            lock (SyncRoot)
            {
                if (PoolByTypeKey.TryGetValue(typeKey, out Stack<object> stack) && stack.Count > 0)
                    return (Dictionary<TKey, TValue>)stack.Pop();
            }

            return new Dictionary<TKey, TValue>();
        }

        /// <summary>
        /// Returns a dictionary to the pool after clearing it.
        /// </summary>
        /// <typeparam name="TKey">Dictionary key type.</typeparam>
        /// <typeparam name="TValue">Dictionary value type.</typeparam>
        /// <param name="dict">The dictionary to return.</param>
        public static void Return<TKey, TValue>(Dictionary<TKey, TValue> dict)
        {
            if (dict == null)
                return;

            dict.Clear();
            string typeKey = GetTypeKey<TKey, TValue>();

            lock (SyncRoot)
            {
                if (!PoolByTypeKey.TryGetValue(typeKey, out Stack<object> stack))
                {
                    stack = new Stack<object>(32);
                    PoolByTypeKey[typeKey] = stack;
                }

                stack.Push(dict);
            }
        }

        /// <summary>
        /// Pre-warms the pool with empty dictionaries of the specified key/value types.
        /// </summary>
        /// <typeparam name="TKey">Dictionary key type.</typeparam>
        /// <typeparam name="TValue">Dictionary value type.</typeparam>
        /// <param name="count">The number of dictionaries to pre-allocate.</param>
        public static void Prewarm<TKey, TValue>(int count)
        {
            if (count <= 0)
                return;

            string typeKey = GetTypeKey<TKey, TValue>();

            lock (SyncRoot)
            {
                if (!PoolByTypeKey.TryGetValue(typeKey, out Stack<object> stack))
                {
                    stack = new Stack<object>(count);
                    PoolByTypeKey[typeKey] = stack;
                }

                for (int i = 0; i < count; i++)
                    stack.Push(new Dictionary<TKey, TValue>());
            }
        }

        /// <summary>
        /// Clears all dictionary pools across all types.
        /// </summary>
        public static void ClearAll()
        {
            lock (SyncRoot)
            {
                foreach (var stack in PoolByTypeKey.Values)
                    stack.Clear();

                PoolByTypeKey.Clear();
            }
        }

        /// <summary>
        /// Constructs a unique type key for identifying generic dictionary stacks.
        /// </summary>
        private static string GetTypeKey<TKey, TValue>()
        {
            return typeof(TKey).FullName + "|" + typeof(TValue).FullName;
        }
    }
}
