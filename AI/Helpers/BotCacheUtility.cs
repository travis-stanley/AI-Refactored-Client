// <auto-generated>
//   AI-Refactored: BotCacheUtility.cs (Beyond Diamond – Max Realism Registry Edition)
//   Bulletproof registry for all bot caches and profile-linked logic.
//   Realism-safe, no cascading errors, no fallback disables. MIT License.
// </auto-generated>

namespace AIRefactored.AI.Helpers
{
    using System;
    using System.Collections.Generic;
    using AIRefactored.AI.Combat;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Groups;
    using AIRefactored.AI.Missions;
    using AIRefactored.AI.Movement;
    using AIRefactored.Core;
    using AIRefactored.Runtime;
    using BepInEx.Logging;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Centralized, safe, and zero-cascade registry for all bot component caches.
    /// Bulletproof: No operation here can break other systems. All errors are locally contained.
    /// </summary>
    public static class BotCacheUtility
    {
        #region Internal State

        private static readonly Dictionary<BotOwner, BotComponentCache> CacheRegistry = new Dictionary<BotOwner, BotComponentCache>(64);
        private static readonly Dictionary<string, BotComponentCache> ProfileIdLookup = new Dictionary<string, BotComponentCache>(64);
        private static readonly ManualLogSource Logger = Plugin.LoggerInstance;

        #endregion

        #region Public API

        /// <summary>Returns all currently active bot caches.</summary>
        public static IEnumerable<BotComponentCache> AllActiveBots()
        {
            foreach (var pair in CacheRegistry)
            {
                if (pair.Key != null && !pair.Key.IsDead && pair.Value != null)
                    yield return pair.Value;
            }
        }

        /// <summary>Logs all known bot caches to the logger.</summary>
        public static void DumpCache()
        {
            Logger.LogDebug("[BotCacheUtility] Dumping bot cache state:");
            foreach (var pair in CacheRegistry)
            {
                if (pair.Key == null || pair.Value == null) continue;
                string name = GetBotName(pair.Value);
                Vector3 pos = pair.Key.Position;
                bool alive = !pair.Key.IsDead;
                Logger.LogDebug($"  → {name}, Pos={pos}, Alive={alive}");
            }
        }

        /// <summary>Try-get cache for a given BotOwner.</summary>
        public static bool TryGet(BotOwner bot, out BotComponentCache cache)
        {
            if (bot != null && CacheRegistry.TryGetValue(bot, out cache) && cache != null)
                return true;

            cache = BotComponentCache.Empty;
            return false;
        }

        /// <summary>Gets cache for a BotOwner, or null.</summary>
        public static BotComponentCache GetCache(BotOwner bot)
        {
            return bot != null && CacheRegistry.TryGetValue(bot, out var cache) ? cache : null;
        }

        /// <summary>Gets cache for a Player, or null.</summary>
        public static BotComponentCache GetCache(Player player)
        {
            return player?.AIData?.BotOwner != null ? GetCache(player.AIData.BotOwner) : null;
        }

        /// <summary>Gets cache by ProfileId.</summary>
        public static BotComponentCache GetCache(string profileId)
        {
            return !string.IsNullOrEmpty(profileId) && ProfileIdLookup.TryGetValue(profileId, out var cache) ? cache : null;
        }

        /// <summary>Gets display name for a bot cache.</summary>
        public static string GetBotName(BotComponentCache cache)
        {
            if (cache?.Bot?.Profile?.Info != null)
                return $"{cache.Bot.Profile.Info.Nickname} ({cache.Bot.Profile.Side})";
            return "Unknown";
        }

        /// <summary>Returns the group sync coordinator for a cache (fallback-safe).</summary>
        public static BotGroupSyncCoordinator GetGroupSync(BotComponentCache cache)
        {
            return cache?.GroupSync ?? cache?.GroupBehavior?.GroupSync;
        }

        /// <summary>Gets the closest alive bot cache to the given point (within range).</summary>
        public static BotComponentCache GetClosestBot(Vector3 origin, float maxDistance)
        {
            float maxSqr = maxDistance * maxDistance;
            float bestSqr = maxSqr;
            BotComponentCache best = null;

            foreach (var pair in CacheRegistry)
            {
                BotOwner bot = pair.Key;
                if (bot == null || bot.IsDead || pair.Value == null)
                    continue;

                float distSqr = (bot.Position - origin).sqrMagnitude;
                if (distSqr < bestSqr)
                {
                    bestSqr = distSqr;
                    best = pair.Value;
                }
            }

            return best;
        }

        /// <summary>Gets head transform of the bot, if available.</summary>
        public static Transform Head(BotComponentCache cache)
        {
            if (cache?.Bot?.MainParts == null)
                return null;

            if (cache.Bot.MainParts.TryGetValue(BodyPartType.head, out EnemyPart part) &&
                part != null && part._transform != null)
            {
                return part._transform.Original;
            }

            return null;
        }

        #endregion

        #region Registry Lifecycle

        /// <summary>Registers the bot and cache into the active registry.</summary>
        public static void Register(BotOwner bot, BotComponentCache cache)
        {
            if (bot == null || cache == null || bot.IsDead)
                return;

            try
            {
                CacheRegistry[bot] = cache;

                string pid = bot.ProfileId;
                if (!string.IsNullOrEmpty(pid))
                    ProfileIdLookup[pid] = cache;

                // Local-only side effects: never cascades.
                try { BotTeamTracker.RegisterFromBot(bot); } catch (Exception ex) { Logger.LogWarning($"[BotCacheUtility] Team register failed: {ex.Message}"); }
                try { GroupMissionCoordinator.RegisterFromBot(bot); } catch (Exception ex) { Logger.LogWarning($"[BotCacheUtility] Mission register failed: {ex.Message}"); }
            }
            catch (Exception ex)
            {
                Logger.LogError($"[BotCacheUtility] Failed Register: {ex}");
            }
        }

        /// <summary>Removes bot from all registries (cache, profile lookup, group).</summary>
        public static void Unregister(BotOwner bot)
        {
            if (bot == null) return;

            try
            {
                CacheRegistry.Remove(bot);

                string pid = bot.ProfileId;
                if (!string.IsNullOrEmpty(pid))
                    ProfileIdLookup.Remove(pid);

                try { BotTeamTracker.Unregister(bot); } catch (Exception ex) { Logger.LogWarning($"[BotCacheUtility] Team unregister failed: {ex.Message}"); }
            }
            catch (Exception ex)
            {
                Logger.LogError($"[BotCacheUtility] Failed Unregister: {ex}");
            }
        }

        #endregion
    }
}
