// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Failures in AIRefactored logic must always trigger safe fallback to EFT base AI.
//   All navigation and cover checks use only EFT vanilla logic. No custom navpoint registry is used.
// </auto-generated>

namespace AIRefactored.AI.Movement
{
    using System;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Helpers;
    using AIRefactored.AI.Memory;
    using AIRefactored.Core;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Controls bot stance transitions (standing, crouching, prone) based on combat, panic, suppression, and cover logic.
    /// Smoothly blends transitions for realistic animation flow. All failures are locally isolated; never propagate.
    /// </summary>
    public sealed class BotPoseController
    {
        #region Constants

        private const float FlankAngleThreshold = 120f;
        private const float MinPoseThreshold = 0.1f;
        private const float PoseBlendSpeedBase = 140f;
        private const float PoseCheckInterval = 0.3f;
        private const float SuppressionCrouchDuration = 2.5f;
        private const float CrouchPose = 50f;
        private const float PronePose = 0f;
        private const float StandPose = 100f;

        #endregion

        #region Fields

        private readonly BotOwner _bot;
        private readonly BotComponentCache _cache;
        private readonly MovementContext _movement;
        private readonly BotPersonalityProfile _personality;

        private float _currentPoseLevel;
        private float _targetPoseLevel;
        private float _nextPoseCheckTime;
        private float _lastTickTime;
        private float _suppressedUntil;
        private bool _isLocked;

        #endregion

        #region Constructor

        /// <summary>
        /// Creates a new BotPoseController with strict null-safety and correct references.
        /// </summary>
        public BotPoseController(BotOwner bot, BotComponentCache cache)
        {
            if (!EFTPlayerUtil.IsValidBotOwner(bot)) throw new ArgumentException("[BotPoseController] Invalid bot.");
            if (cache == null || cache.PersonalityProfile == null) throw new ArgumentException("[BotPoseController] Cache/personality is null.");
            MovementContext movement = bot.GetPlayer?.MovementContext;
            if (movement == null) throw new ArgumentException("[BotPoseController] Missing MovementContext.");

            _bot = bot;
            _cache = cache;
            _movement = movement;
            _personality = cache.PersonalityProfile;
            _currentPoseLevel = _movement.PoseLevel;
            _targetPoseLevel = _currentPoseLevel;
            _lastTickTime = Time.time;
            _nextPoseCheckTime = _lastTickTime;
        }

        #endregion

        #region Public API

        /// <summary>
        /// Gets the bot's current pose level (0=prone, 50=crouch, 100=stand).
        /// </summary>
        public float GetPoseLevel()
        {
            try
            {
                return _movement.PoseLevel;
            }
            catch
            {
                return StandPose;
            }
        }

        /// <summary>
        /// Locks the bot into a crouch pose until unlocked.
        /// </summary>
        public void LockCrouchPose()
        {
            _targetPoseLevel = CrouchPose;
            _isLocked = true;
        }

        /// <summary>
        /// Unlocks pose (returns to normal AI-driven logic).
        /// </summary>
        public void UnlockPose()
        {
            _isLocked = false;
        }

        /// <summary>
        /// Explicitly sets pose to crouch, optionally using anticipation value.
        /// </summary>
        public void SetCrouch(bool anticipate = false)
        {
            _targetPoseLevel = anticipate ? 60f : CrouchPose;
        }

        /// <summary>
        /// Explicitly sets pose to prone, optionally using anticipation value.
        /// </summary>
        public void SetProne(bool anticipate = false)
        {
            _targetPoseLevel = anticipate ? 20f : PronePose;
        }

        /// <summary>
        /// Explicitly sets pose to full standing.
        /// </summary>
        public void SetStand()
        {
            _targetPoseLevel = StandPose;
        }

        /// <summary>
        /// Main tick entry. Blends pose toward target, updates pose intent on interval.
        /// </summary>
        public void Tick(float currentTime)
        {
            try
            {
                if (_bot == null || _bot.IsDead || _movement == null)
                    return;

                float deltaTime = currentTime - _lastTickTime;
                _lastTickTime = currentTime;

                if (_isLocked)
                {
                    BlendPose(deltaTime);
                    return;
                }

                if (currentTime >= _nextPoseCheckTime)
                {
                    _nextPoseCheckTime = currentTime + PoseCheckInterval;
                    EvaluatePoseIntent(currentTime);
                }

                BlendPose(deltaTime);
            }
            catch
            {
                // Bulletproof: failures are isolated
            }
        }

        /// <summary>
        /// Examines cover near the given position and anticipates best pose, using only CustomNavigationPoint.
        /// </summary>
        public void TrySetStanceFromNearbyCover(Vector3 position)
        {
            try
            {
                // No registry or custom nav queries. Use only BotMemory/cover info if available.
                if (_bot?.Memory?.BotCurrentCoverInfo?.LastCover is CustomNavigationPoint lastCover)
                {
                    float dist = Vector3.Distance(position, lastCover.Position);
                    if (dist < 2.5f)
                    {
                        if (lastCover.CoverLevel == CoverLevel.Lay)
                        {
                            SetProne(true);
                            return;
                        }
                        if (lastCover.CoverLevel == CoverLevel.Sit)
                        {
                            SetCrouch(true);
                            return;
                        }
                    }
                }
                // If no valid cover found, do nothing. (Do not call fallback, since stance logic is not critical.)
            }
            catch
            {
                // Isolated: never propagates
            }
        }

        #endregion

        #region Internal Logic

        /// <summary>
        /// Blends pose smoothly towards the target, using panic/combat speed factors.
        /// </summary>
        private void BlendPose(float deltaTime)
        {
            try
            {
                if (Mathf.Abs(_currentPoseLevel - _targetPoseLevel) < MinPoseThreshold)
                    return;

                float panicFactor = _cache.PanicHandler != null && _cache.PanicHandler.IsPanicking ? 0.6f : 1f;
                float combatFactor = _cache.Combat != null && _cache.Combat.IsInCombatState() ? 1f : 0.4f;
                float speed = PoseBlendSpeedBase * panicFactor * combatFactor;

                _currentPoseLevel = Mathf.MoveTowards(_currentPoseLevel, _targetPoseLevel, speed * deltaTime);
                _movement.SetPoseLevel(_currentPoseLevel);
            }
            catch
            {
                // Isolated: never cascades or breaks system
            }
        }

        /// <summary>
        /// Evaluates current threat/cover/suppression and sets pose intent.
        /// </summary>
        private void EvaluatePoseIntent(float currentTime)
        {
            try
            {
                if (_cache.PanicHandler != null && _cache.PanicHandler.IsPanicking)
                {
                    _targetPoseLevel = PronePose;
                    return;
                }

                if (_cache.Suppression != null && _cache.Suppression.IsSuppressed())
                {
                    _suppressedUntil = currentTime + SuppressionCrouchDuration;
                }

                if (currentTime < _suppressedUntil)
                {
                    _targetPoseLevel = CrouchPose;
                    return;
                }

                if (_personality.IsFrenzied || _personality.IsFearful || _personality.Personality == PersonalityType.Sniper)
                {
                    bool flankFound;
                    Vector3 flankDir = _bot.TryGetFlankDirection(out flankFound);
                    if (flankFound)
                    {
                        float angle = Vector3.Angle(_bot.LookDirection, flankDir.normalized);
                        if (angle > FlankAngleThreshold)
                        {
                            _targetPoseLevel = PronePose;
                            return;
                        }
                    }
                }

                // Use only last cover from memory if available
                if (_bot.Memory != null && _bot.Memory.BotCurrentCoverInfo != null)
                {
                    CustomNavigationPoint lastCover = _bot.Memory.BotCurrentCoverInfo.LastCover;
                    if (lastCover != null)
                    {
                        float dist = Vector3.Distance(_bot.Position, lastCover.Position);

                        if (dist < 2.5f)
                        {
                            if (lastCover.CoverLevel == CoverLevel.Lay)
                            {
                                _targetPoseLevel = PronePose;
                                return;
                            }

                            if (lastCover.CoverLevel == CoverLevel.Sit)
                            {
                                _targetPoseLevel = CrouchPose;
                                return;
                            }
                        }
                    }
                }

                bool inCombat = _cache.Combat != null && _cache.Combat.IsInCombatState();
                bool prefersCrouch = _personality.Caution > 0.6f || _personality.IsCamper;

                _targetPoseLevel = inCombat && prefersCrouch ? CrouchPose : StandPose;
            }
            catch
            {
                // Isolated: never propagates
            }
        }

        #endregion
    }
}
