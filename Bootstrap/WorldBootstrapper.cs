// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

namespace AIRefactored.Bootstrap
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Hotspots;
    using AIRefactored.AI.Looting;
    using AIRefactored.AI.Navigation;
    using AIRefactored.AI.Optimization;
    using AIRefactored.AI.Threads;
    using AIRefactored.Core;
    using AIRefactored.Pools;
    using AIRefactored.Runtime;
    using BepInEx.Logging;
    using Comfort.Common;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Main coordinator for AIRefactored world systems. Handles initialization, updates, and teardown.
    /// </summary>
    public static class WorldBootstrapper
    {
        #region Fields

        private static readonly List<IAIWorldSystemBootstrapper> Systems = new List<IAIWorldSystemBootstrapper>(16);
        private static ManualLogSource _loggerInstance = Plugin.LoggerInstance;

        private static bool _hasInitialized;
        private static bool _hasShutdownLogged;
        private static float _lastSweep;
        private const float SweepInterval = 20f;

        private static ManualLogSource Logger => _loggerInstance ?? Plugin.LoggerInstance;

        #endregion

        #region Lifecycle

        /// <summary>
        /// Begins world system initialization. Does NOT register navmesh or navpoints.
        /// </summary>
        public static void Begin(ManualLogSource logger, string mapId)
        {
            _loggerInstance = logger ?? Plugin.LoggerInstance;

            if (_hasInitialized)
            {
                Logger.LogDebug("[WorldBootstrapper] Already initialized — skipping.");
                return;
            }

            try
            {
                _hasShutdownLogged = false;
                Systems.Clear();

                // Global resets: never triggers navmesh/navpoint population here!
                BotRecoveryService.Reset();
                BotSpawnWatcherService.Reset();
                LootRuntimeWatcher.Reset();
                DeadBodyObserverService.Reset();
                DeadBodyContainerCache.Clear();
                LootRegistry.Clear();
                HotspotRegistry.Clear();
                NavPointRegistry.Clear();

                // Only initialize HotspotRegistry if mapId is valid.
                if (!string.IsNullOrEmpty(mapId))
                {
                    HotspotRegistry.Initialize(mapId);
                }
                else
                {
                    Logger.LogWarning("[WorldBootstrapper] Cannot initialize registries — mapId is invalid.");
                }

                // Register world systems (do not add navmesh/navpoint managers here)
                RegisterSystem(new RaidLifecycleWatcher());
                RegisterSystem(new BotRecoveryService());
                RegisterSystem(new BotSpawnWatcherService());
                RegisterSystem(new LootRuntimeWatcher());
                RegisterSystem(new DeadBodyObserverService());
                RegisterSystem(new HotspotRegistryBootstrapper());

                // Initialize all systems
                for (int i = 0; i < Systems.Count; i++)
                {
                    try { Systems[i].Initialize(); }
                    catch (Exception ex) { Logger.LogError("[WorldBootstrapper] Failed to initialize system: " + ex); }
                }

                _hasInitialized = true;
                Logger.LogDebug("[WorldBootstrapper] ✅ World systems initialized.");
            }
            catch (Exception ex)
            {
                Logger.LogError("[WorldBootstrapper] Initialization failed: " + ex);
            }
        }

        /// <summary>
        /// Stops and tears down world systems. Does not touch navmesh/navpoint state.
        /// </summary>
        public static void Stop()
        {
            if (!_hasInitialized) return;

            try
            {
                for (int i = 0; i < Systems.Count; i++)
                {
                    try { Systems[i].OnRaidEnd(); }
                    catch (Exception ex) { Logger.LogError("[WorldBootstrapper] OnRaidEnd error in system: " + ex); }
                }

                Systems.Clear();
                _hasInitialized = false;

                if (!_hasShutdownLogged)
                {
                    _hasShutdownLogged = true;
                    Logger.LogDebug("[WorldBootstrapper] 🔻 AIRefactored systems shut down.");
                }
            }
            catch (Exception ex)
            {
                Logger.LogError("[WorldBootstrapper] Stop() encountered error: " + ex);
            }
        }

        #endregion

        #region Tick

        /// <summary>
        /// Ticks all registered world systems and attached BotBrains (per frame/tick).
        /// </summary>
        public static void Tick(float deltaTime)
        {
            if (!_hasInitialized)
            {
                return;
            }

            try
            {
                float now = Time.time;

                for (int i = 0; i < Systems.Count; i++)
                {
                    IAIWorldSystemBootstrapper system = Systems[i];
                    if (system == null) continue;

                    try
                    {
                        if (WorldInitState.IsInPhase(system.RequiredPhase()))
                        {
                            system.Tick(deltaTime);
                        }
                    }
                    catch (Exception ex)
                    {
                        Logger.LogError("[WorldBootstrapper] System Tick() error: " + ex);
                    }
                }

                List<Player> players = GameWorldHandler.GetAllAlivePlayers();
                try
                {
                    for (int i = 0; i < players.Count; i++)
                    {
                        Player player = players[i];
                        if (!EFTPlayerUtil.IsValid(player) || !player.IsAI) continue;

                        GameObject go = player.gameObject;
                        if (go == null) continue;

                        BotBrain brain = go.GetComponent<BotBrain>();
                        if (brain != null && brain.enabled)
                        {
                            try { brain.Tick(deltaTime); }
                            catch (Exception ex) { Logger.LogError("[WorldBootstrapper] BotBrain.Tick() error: " + ex); }
                        }
                    }
                }
                finally
                {
                    TempListPool.Return(players);
                }

                if (now - _lastSweep >= SweepInterval)
                {
                    _lastSweep = now;
                    GameWorldHandler.EnforceBotBrains();
                    GameWorldHandler.CleanupDeadBotsSmoothly();
                }
            }
            catch (Exception ex)
            {
                Logger.LogError("[WorldBootstrapper] Tick() outer error: " + ex);
            }
        }

        #endregion

        #region BotBrain Injection

        /// <summary>
        /// Ensures the given player has a BotBrain attached and initialized.
        /// </summary>
        public static void EnforceBotBrain(Player player, BotOwner bot)
        {
            if (!EFTPlayerUtil.IsValid(player) || !player.IsAI) return;

            GameObject go = player.gameObject;
            if (go == null) return;

            try
            {
                BotBrainGuardian.Enforce(go);

                BotBrain existing = go.GetComponent<BotBrain>();
                if (existing == null && bot != null)
                {
                    BotBrain brain = go.AddComponent<BotBrain>();
                    brain.enabled = true;
                    brain.Initialize(bot);
                }
                else if (existing != null && !existing.enabled)
                {
                    existing.enabled = true;
                    Logger.LogWarning("[WorldBootstrapper] Re-enabled BotBrain for: " + player.ProfileId);
                }
            }
            catch (Exception ex)
            {
                Logger.LogWarning("[WorldBootstrapper] BotBrain init failed for " + player.ProfileId + ": " + ex);
            }
        }

        #endregion

        #region System Registration

        public static void RegisterSystem(IAIWorldSystemBootstrapper system)
        {
            if (system == null || Systems.Contains(system)) return;
            Systems.Add(system);
        }

        #endregion
    }
}
