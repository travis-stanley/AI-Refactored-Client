// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>


namespace AIRefactored.Pools
{
    using System;
    using System.Collections.Generic;
    using UnityEngine;

    /// <summary>
    /// Pool for reusable <see cref="RaycastCommand"/> arrays for batch physics queries.
    /// </summary>
    public static class TempRaycastCommandPool
    {
        private static readonly Dictionary<int, Stack<RaycastCommand[]>> PoolBySize = new Dictionary<int, Stack<RaycastCommand[]>>(8);
        private static readonly object SyncRoot = new object();

        static TempRaycastCommandPool()
        {
            AppDomain.CurrentDomain.DomainUnload += (_, __) => ClearAll();
        }

        /// <summary>
        /// Rents a <see cref="RaycastCommand"/> array of the specified size.
        /// </summary>
        /// <param name="size">Requested array length.</param>
        /// <returns>A reusable array of RaycastCommand structs.</returns>
        public static RaycastCommand[] Rent(int size)
        {
            if (size <= 0)
            {
                size = 1;
            }

            lock (SyncRoot)
            {
                Stack<RaycastCommand[]> stack;
                if (PoolBySize.TryGetValue(size, out stack) && stack.Count > 0)
                {
                    return stack.Pop();
                }
            }

            return new RaycastCommand[size];
        }

        /// <summary>
        /// Returns a <see cref="RaycastCommand"/> array to the pool.
        /// </summary>
        /// <param name="array">The array to return.</param>
        public static void Return(RaycastCommand[] array)
        {
            if (array == null || array.Length == 0)
            {
                return;
            }

            lock (SyncRoot)
            {
                Stack<RaycastCommand[]> stack;
                if (!PoolBySize.TryGetValue(array.Length, out stack))
                {
                    stack = new Stack<RaycastCommand[]>(8);
                    PoolBySize[array.Length] = stack;
                }

                stack.Push(array);
            }
        }

        /// <summary>
        /// Prewarms the pool with arrays of <see cref="RaycastCommand"/>.
        /// </summary>
        /// <param name="size">Length of each array.</param>
        /// <param name="count">Number of arrays to cache.</param>
        public static void Prewarm(int size, int count)
        {
            if (size <= 0 || count <= 0)
            {
                return;
            }

            lock (SyncRoot)
            {
                Stack<RaycastCommand[]> stack;
                if (!PoolBySize.TryGetValue(size, out stack))
                {
                    stack = new Stack<RaycastCommand[]>(count);
                    PoolBySize[size] = stack;
                }

                for (int i = 0; i < count; i++)
                {
                    stack.Push(new RaycastCommand[size]);
                }
            }
        }

        /// <summary>
        /// Clears all pooled <see cref="RaycastCommand"/> arrays.
        /// </summary>
        public static void ClearAll()
        {
            lock (SyncRoot)
            {
                foreach (KeyValuePair<int, Stack<RaycastCommand[]>> kvp in PoolBySize)
                {
                    kvp.Value.Clear();
                }

                PoolBySize.Clear();
            }
        }
    }
}
