// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Failures in AIRefactored logic must always trigger safe fallback to EFT base AI.
// </auto-generated>

using MissionType = AIRefactored.AI.Missions.BotMissionController.MissionType;

namespace AIRefactored.AI.Missions.Subsystems
{
    using System;
    using System.Collections.Generic;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Helpers;
    using AIRefactored.AI.Hotspots;
    using AIRefactored.AI.Looting;
    using AIRefactored.Core;
    using AIRefactored.Pools;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Handles routing, objective assignment, and mission-based movement logic.
    /// Supports squad-aware quest paths and loot/fight transitions.
    /// </summary>
    public sealed class ObjectiveController
    {
        #region Fields

        private readonly BotOwner _bot;
        private readonly BotComponentCache _cache;
        private readonly BotLootScanner _lootScanner;
        private readonly Queue<Vector3> _questRoute;
        private readonly System.Random _rng;

        #endregion

        #region Constructor

        public ObjectiveController(BotOwner bot, BotComponentCache cache)
        {
            if (!EFTPlayerUtil.IsValidBotOwner(bot))
            {
                throw new ArgumentException("[ObjectiveController] Invalid BotOwner.");
            }
            if (cache == null)
            {
                throw new ArgumentNullException(nameof(cache));
            }

            _bot = bot;
            _cache = cache;
            _lootScanner = cache.LootScanner;
            _questRoute = new Queue<Vector3>(4);
            _rng = new System.Random();
        }

        #endregion

        #region Properties

        /// <summary>
        /// Gets the current movement target.
        /// </summary>
        public Vector3 CurrentObjective { get; private set; }

        #endregion

        #region Public Methods

        /// <summary>
        /// Called when a bot reaches its current objective.
        /// </summary>
        public void OnObjectiveReached(MissionType type)
        {
            Vector3 next = GetObjectiveTarget(type);
            CurrentObjective = next;
            BotMovementHelper.SmoothMoveTo(_bot, next);
        }

        /// <summary>
        /// Resumes movement along the quest path.
        /// </summary>
        public void ResumeQuesting()
        {
            if (_questRoute.Count == 0)
            {
                PopulateQuestRoute();
            }

            if (_questRoute.Count > 0)
            {
                Vector3 next = GetNextQuestObjective();
                CurrentObjective = next;
                BotMovementHelper.SmoothMoveTo(_bot, next);
            }
        }

        /// <summary>
        /// Sets the initial movement objective based on mission type.
        /// </summary>
        public void SetInitialObjective(MissionType type)
        {
            Vector3 target = GetObjectiveTarget(type);
            CurrentObjective = target;
            BotMovementHelper.SmoothMoveTo(_bot, target);
        }

        #endregion

        #region Internal Logic

        private Vector3 GetObjectiveTarget(MissionType type)
        {
            switch (type)
            {
                case MissionType.Quest:
                    return GetNextQuestObjective();
                case MissionType.Fight:
                    return GetFightZone();
                case MissionType.Loot:
                    return GetLootObjective();
                default:
                    return _bot.Position;
            }
        }

        private Vector3 GetFightZone()
        {
            BotZone[] zones = GameObject.FindObjectsOfType<BotZone>();
            if (zones == null || zones.Length == 0)
            {
                return _bot.Position;
            }
            int index = _rng.Next(0, zones.Length);
            BotZone zone = zones[index];
            return zone != null ? zone.transform.position : _bot.Position;
        }

        private Vector3 GetLootObjective()
        {
            return _lootScanner != null
                ? _lootScanner.GetBestLootPosition()
                : _bot.Position;
        }

        private Vector3 GetNextQuestObjective()
        {
            return _questRoute.Count > 0
                ? _questRoute.Dequeue()
                : _bot.Position;
        }

        private void PopulateQuestRoute()
        {
            _questRoute.Clear();

            Vector3 origin = _bot.Position;
            Vector3 forward = _bot.LookDirection.normalized;

            Predicate<HotspotRegistry.Hotspot> directionFilter = h =>
            {
                Vector3 dir = h.Position - origin;
                return dir.sqrMagnitude > 1f && Vector3.Dot(dir.normalized, forward) > 0.25f;
            };

            List<HotspotRegistry.Hotspot> candidates = HotspotRegistry.QueryNearby(origin, 100f, directionFilter);
            if (candidates == null || candidates.Count == 0)
            {
                return;
            }

            int desired = UnityEngine.Random.Range(2, 4);
            HashSet<int> used = TempHashSetPool.Rent<int>();

            while (_questRoute.Count < desired && used.Count < candidates.Count)
            {
                int index = UnityEngine.Random.Range(0, candidates.Count);
                if (used.Add(index))
                {
                    _questRoute.Enqueue(candidates[index].Position);
                }
            }

            TempHashSetPool.Return(used);
        }

        #endregion
    }
}
