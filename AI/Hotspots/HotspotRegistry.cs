// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

namespace AIRefactored.AI.Hotspots
{
    using System;
    using System.Collections.Generic;
    using AIRefactored.Bootstrap;
    using AIRefactored.Pools;
    using AIRefactored.Runtime;
    using BepInEx.Logging;
    using UnityEngine;

    /// <summary>
    /// Global registry for map-specific hotspots (loot zones, patrol targets, tactical nodes).
    /// Only uses flat zone-based and global lookup (no dynamic grid/quadtree).
    /// Bulletproof: all initialization, query, and builder logic is isolation-safe and never cascades or breaks the mod.
    /// </summary>
    public static class HotspotRegistry
    {
        #region Static Fields

        private static readonly ManualLogSource Logger = Plugin.LoggerInstance;

        private static readonly List<Hotspot> All = new List<Hotspot>(256);
        private static readonly Dictionary<string, List<Hotspot>> ByZone = new Dictionary<string, List<Hotspot>>(StringComparer.OrdinalIgnoreCase);

        private static string _loadedMap = "none";

        #endregion

        #region Lifecycle

        public static void Clear()
        {
            All.Clear();
            ByZone.Clear();
            _loadedMap = "none";
        }

        public static void Initialize(string mapId)
        {
            try
            {
                if (!WorldInitState.IsInPhase(WorldPhase.WorldReady))
                {
                    Logger.LogWarning("[HotspotRegistry] ⚠ Initialization attempted outside of WorldReady phase. Skipping.");
                    return;
                }

                if (string.IsNullOrEmpty(mapId))
                {
                    Logger.LogWarning("[HotspotRegistry] ⚠ Null mapId passed to Initialize.");
                    return;
                }

                string normalizedMapId = mapId.Trim().ToLowerInvariant();
                if (_loadedMap.Equals(normalizedMapId, StringComparison.OrdinalIgnoreCase))
                {
                    return;
                }

                Clear();
                _loadedMap = normalizedMapId;

                HotspotSet set = HardcodedHotspots.GetForMap(_loadedMap);
                if (set == null || set.Points == null || set.Points.Count == 0)
                {
                    Logger.LogWarning($"[HotspotRegistry] ⚠ No hotspots found for map '{_loadedMap}'");
                    return;
                }

                for (int i = 0; i < set.Points.Count; i++)
                {
                    HotspotData data = set.Points[i];
                    if (data == null || string.IsNullOrWhiteSpace(data.Zone))
                        continue;

                    string zone = data.Zone.Trim();
                    Hotspot h = new Hotspot(data.Position, zone);
                    All.Add(h);

                    if (!ByZone.TryGetValue(zone, out var list))
                    {
                        list = new List<Hotspot>(8);
                        ByZone[zone] = list;
                    }

                    list.Add(h);
                }

                Logger.LogDebug($"[HotspotRegistry] ✅ Registered {All.Count} hotspots for map '{_loadedMap}' (flat mode)");
            }
            catch (Exception ex)
            {
                Logger.LogError($"[HotspotRegistry] Unexpected error in Initialize: {ex}");
                Clear();
            }
        }

        #endregion

        #region Query API

        public static IReadOnlyList<Hotspot> GetAll() => All;

        public static IReadOnlyList<Hotspot> GetAllInZone(string zone)
        {
            if (string.IsNullOrEmpty(zone))
                return Array.Empty<Hotspot>();

            return ByZone.TryGetValue(zone.Trim(), out var result) ? result : Array.Empty<Hotspot>();
        }

        public static Hotspot GetRandomHotspot()
        {
            int count = All.Count;
            return count == 0 ? new Hotspot(Vector3.zero, "none") : All[UnityEngine.Random.Range(0, count)];
        }

        /// <summary>
        /// Returns all hotspots within a radius of the given position, optionally filtered.
        /// Uses a linear scan over all hotspots (no grid/quadtree).
        /// </summary>
        public static List<Hotspot> QueryNearby(Vector3 position, float radius, Predicate<Hotspot> filter)
        {
            List<Hotspot> result = TempListPool.Rent<Hotspot>();
            float radiusSq = radius * radius;

            for (int i = 0; i < All.Count; i++)
            {
                Hotspot h = All[i];
                if ((h.Position - position).sqrMagnitude <= radiusSq && (filter == null || filter(h)))
                {
                    result.Add(h);
                }
            }
            return result;
        }

        #endregion

        #region Types

        /// <summary>
        /// Represents a runtime hotspot: a tactical point on the map with a zone label.
        /// </summary>
        public sealed class Hotspot
        {
            public Hotspot(Vector3 position, string zone)
            {
                Position = position;
                Zone = string.IsNullOrEmpty(zone) ? "none" : zone;
            }

            public Vector3 Position { get; }
            public string Zone { get; }
        }

        #endregion
    }
}
