// <auto-generated>
//   AI-Refactored: TempIntArrayPool.cs (Beyond Diamond, Zero-Alloc & Parity Edition, June 2025)
//   Bulletproof reusable int[] pooling for ultra-high-performance AI and math-heavy world logic.
//   Thread-safe, teardown/reload safe, and compliant with all AI-Refactored pooling architecture.
//   MIT License.
// </auto-generated>

namespace AIRefactored.Pools
{
    using System;
    using System.Collections.Generic;

    /// <summary>
    /// Pool for temporary <see cref="int"/> array reuse across math-heavy logic paths.
    /// </summary>
    public static class TempIntArrayPool
    {
        private static readonly Dictionary<int, Stack<int[]>> PoolBySize = new Dictionary<int, Stack<int[]>>(32);
        private static readonly object SyncRoot = new object();

        static TempIntArrayPool()
        {
            try
            {
                AppDomain.CurrentDomain.DomainUnload += (_, __) => ClearAll();
            }
            catch { }
        }

        /// <summary>
        /// Rents a pooled array of integers with the specified size.
        /// </summary>
        /// <param name="size">Minimum array length.</param>
        /// <returns>Reusable int array.</returns>
        public static int[] Rent(int size)
        {
            if (size <= 0)
                size = 1;

            lock (SyncRoot)
            {
                if (PoolBySize.TryGetValue(size, out Stack<int[]> stack) && stack.Count > 0)
                    return stack.Pop();
            }

            return new int[size];
        }

        /// <summary>
        /// Returns an int array to the pool.
        /// </summary>
        /// <param name="array">Array to return.</param>
        public static void Return(int[] array)
        {
            if (array == null || array.Length == 0)
                return;

            lock (SyncRoot)
            {
                if (!PoolBySize.TryGetValue(array.Length, out Stack<int[]> stack))
                {
                    stack = new Stack<int[]>(8);
                    PoolBySize[array.Length] = stack;
                }

                stack.Push(array);
            }
        }

        /// <summary>
        /// Pre-warms the pool with reusable int arrays.
        /// </summary>
        /// <param name="size">Array length.</param>
        /// <param name="count">Number of arrays to pre-allocate.</param>
        public static void Prewarm(int size, int count)
        {
            if (size <= 0 || count <= 0)
                return;

            lock (SyncRoot)
            {
                if (!PoolBySize.TryGetValue(size, out Stack<int[]> stack))
                {
                    stack = new Stack<int[]>(count);
                    PoolBySize[size] = stack;
                }

                for (int i = 0; i < count; i++)
                    stack.Push(new int[size]);
            }
        }

        /// <summary>
        /// Clears all pooled int arrays and resets pool state.
        /// </summary>
        public static void ClearAll()
        {
            lock (SyncRoot)
            {
                foreach (var stack in PoolBySize.Values)
                    stack.Clear();

                PoolBySize.Clear();
            }
        }
    }
}
