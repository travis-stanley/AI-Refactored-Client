// <auto-generated>
//   AI-Refactored. Human-Realistic Squad Communication System.
//   MIT License. SYSTEMATICALLY MANAGED.
//
//   Realism: Group-aware, context-sensitive, proximity-limited, non-repetitive.
//   Bulletproof: Never throws or disables other bots, only locally mutes on error.
// </auto-generated>

namespace AIRefactored.AI.Groups
{
    using System;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Helpers;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Controls squad VO communication: fallback shouts, frag calls, suppression, injury, and all group-action comms.
    /// Uses cooldowns, proximity checks, “no-echo” logic, and chance for immersion.
    /// Bulletproof: All failures are isolated, never breaks group or disables any AI.
    /// </summary>
    public sealed class BotGroupComms
    {
        #region Constants

        private const float AllyRadius = 12.0f;
        private const float VoiceCooldown = 4.5f;
        private static readonly float AllyRadiusSqr = AllyRadius * AllyRadius;

        // Additional group cooldown (anti-echo)
        private const float GroupEchoCooldown = 3.2f;

        #endregion

        #region Fields

        private readonly BotComponentCache _cache;
        private readonly BotOwner _bot;
        private float _nextVoiceTime;
        private float _nextGroupCommsAllowed;
        private static string _lastCommsPhrase = "";
        private static float _lastCommsTime = -99f;

        #endregion

        #region Properties

        public bool IsMuted { get; set; }

        #endregion

        #region Constructor

        public BotGroupComms(BotComponentCache cache)
        {
            if (cache == null || cache.Bot == null)
            {
                IsMuted = true;
                return;
            }

            _cache = cache;
            _bot = cache.Bot;
            IsMuted = false;
            _nextVoiceTime = 0f;
            _nextGroupCommsAllowed = 0f;
        }

        #endregion

        #region Public Methods

        public void Say(EPhraseTrigger phrase)
        {
            if (!IsEligible())
                return;
            TryTriggerVoice(phrase, 1.0f, groupComms: false);
        }

        public void SayFallback()
        {
            TryTriggerVoice(EPhraseTrigger.GetBack, 0.53f, groupComms: true);
        }

        public void SayFragOut()
        {
            float chance = HasNearbyAlly() ? 0.78f : 0.0f;
            TryTriggerVoice(EPhraseTrigger.OnEnemyGrenade, chance, groupComms: true);
        }

        public void SayHit()
        {
            TryTriggerVoice(EPhraseTrigger.OnBeingHurt, UnityEngine.Random.Range(0.62f, 0.84f), groupComms: true);
        }

        public void SaySuppression()
        {
            TryTriggerVoice(EPhraseTrigger.Suppress, 0.68f, groupComms: true);
        }

        // --- LOOT & SQUAD-COORDINATED PHRASES BELOW ---

        public void SayLootRequest()
        {
            TryTriggerVoice(EPhraseTrigger.GoLoot, 0.95f, groupComms: true);
        }

        public void SayScanArea()
        {
            TryTriggerVoice(EPhraseTrigger.Look, 0.88f, groupComms: true);
        }

        public void SayLootMove()
        {
            TryTriggerVoice(EPhraseTrigger.OnPosition, 0.84f, groupComms: true);
        }

        public void SayLootOpen()
        {
            TryTriggerVoice(EPhraseTrigger.OnLoot, 0.8f, groupComms: true);
        }

        public void SayLootSearch()
        {
            TryTriggerVoice(EPhraseTrigger.LootGeneric, 0.72f, groupComms: true);
        }

        public void SayLootTake()
        {
            TryTriggerVoice(EPhraseTrigger.LootContainer, 0.85f, groupComms: true);
        }

        public void SayLootDone()
        {
            TryTriggerVoice(EPhraseTrigger.GoodWork, 0.67f, groupComms: true);
        }

        public void SayLootGiveUp()
        {
            TryTriggerVoice(EPhraseTrigger.LootNothing, 0.82f, groupComms: true);
        }

        // --- Group loot memory/negotiation logic hooks ---

        public bool TryRequestLootClaim(string profileId)
        {
            // Only allow 1 bot at a time in group to loot a given container.
            // In real implementation, sync with squad “loot claimed” registry.
            if (Time.time < _nextGroupCommsAllowed)
                return false;

            _nextGroupCommsAllowed = Time.time + GroupEchoCooldown;
            return true;
        }

        public void RegisterLootTaken(string lootId)
        {
            // Could sync this lootId to a shared registry to prevent duplicate looting.
        }

        public bool IsGroupLooting()
        {
            // Could check if another bot in group is already looting
            return false; // Expand with group/squad logic as needed.
        }

        #endregion

        #region Internal Methods

        private bool IsEligible()
        {
            return !IsMuted &&
                   _bot != null &&
                   _bot.BotTalk != null &&
                   _bot.GetPlayer != null &&
                   !_bot.IsDead &&
                   _bot.GetPlayer.IsAI &&
                   !FikaHeadlessDetector.IsHeadless;
        }

        private void TryTriggerVoice(EPhraseTrigger phrase, float chance, bool groupComms)
        {
            if (!IsEligible())
                return;

            float now = Time.time;
            if (now < _nextVoiceTime)
                return;

            // Anti-group-echo: avoid repeat of same phrase in rapid succession squad-wide
            if (groupComms && _lastCommsPhrase == phrase.ToString() && now - _lastCommsTime < GroupEchoCooldown)
                return;

            if (chance < 1f && UnityEngine.Random.value > chance)
                return;

            _nextVoiceTime = now + (VoiceCooldown * UnityEngine.Random.Range(0.85f, 1.17f));

            try
            {
                _bot.BotTalk.TrySay(phrase);
                if (groupComms)
                {
                    _lastCommsPhrase = phrase.ToString();
                    _lastCommsTime = now;
                }
            }
            catch
            {
                IsMuted = true;
            }
        }

        private bool HasNearbyAlly()
        {
            if (_bot?.Profile?.Info == null)
                return false;

            string groupId = _bot.Profile.Info.GroupId;
            if (string.IsNullOrEmpty(groupId))
                return false;

            Vector3 myPos = _bot.Position;

            foreach (BotComponentCache other in BotCacheUtility.AllActiveBots())
            {
                if (ReferenceEquals(other, _cache) || other?.Bot?.Profile?.Info == null || other.Bot.IsDead)
                    continue;

                if (!groupId.Equals(other.Bot.Profile.Info.GroupId, StringComparison.Ordinal))
                    continue;

                Vector3 delta = other.Bot.Position - myPos;
                if (delta.sqrMagnitude <= AllyRadiusSqr)
                    return true;
            }

            return false;
        }

        #endregion
    }
}
