// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

namespace AIRefactored.AI.Perception
{
    using System;
    using System.Collections.Generic;
    using AIRefactored.AI.Core;
    using AIRefactored.Core;
    using AIRefactored.Pools;
    using EFT;
    using EFT.InventoryLogic;
    using UnityEngine;
    using Random = UnityEngine.Random;

    /// <summary>
    /// Manages flashlight, laser, NVG, and thermal toggling.
    /// Reacts to ambient light, fog density, and chaos-driven bait behavior.
    /// </summary>
    public sealed class BotTacticalDeviceController
    {
        #region Fields

        private BotOwner _bot;
        private BotComponentCache _cache;
        private float _nextDecisionTime;

        #endregion

        #region Initialization

        /// <summary>
        /// Initializes the controller with the bot's runtime cache.
        /// </summary>
        public void Initialize(BotComponentCache cache)
        {
            if (cache == null || cache.Bot == null)
            {
                throw new ArgumentNullException(nameof(cache));
            }

            _bot = cache.Bot;
            _cache = cache;
        }

        #endregion

        #region Tick

        /// <summary>
        /// Ticks the logic once per frame for toggling tactical devices.
        /// </summary>
        public void Tick()
        {
            if (!CanThink())
            {
                return;
            }

            _nextDecisionTime = Time.time + TacticalConfig.CheckInterval;

            Weapon weapon = _bot.WeaponManager?.CurrentWeapon;
            if (weapon == null)
            {
                return;
            }

            List<LightComponent> devices = TempListPool.Rent<LightComponent>();
            try
            {
                ScanMods(weapon, devices);

                bool lowVisibility = IsLowVisibility();
                bool baitTrigger = Random.value < GetChaosBaitChance();
                bool shouldEnable = lowVisibility || baitTrigger;

                for (int i = 0; i < devices.Count; i++)
                {
                    LightComponent device = devices[i];
                    if (device != null && device.IsActive != shouldEnable)
                    {
                        device.IsActive = shouldEnable;
                    }
                }

                if (baitTrigger)
                {
                    _nextDecisionTime = Time.time + 1.5f;
                    for (int i = 0; i < devices.Count; i++)
                    {
                        LightComponent device = devices[i];
                        if (device != null)
                        {
                            device.IsActive = false;
                        }
                    }
                }
            }
            finally
            {
                TempListPool.Return(devices);
            }
        }

        #endregion

        #region Internal Logic

        private bool CanThink()
        {
            return _bot != null &&
                   _cache != null &&
                   !_bot.IsDead &&
                   Time.time >= _nextDecisionTime &&
                   EFTPlayerUtil.IsValid(_bot.GetPlayer) &&
                   _bot.GetPlayer.IsAI;
        }

        private float GetChaosBaitChance()
        {
            if (_cache.AIRefactoredBotOwner == null)
            {
                return 0f;
            }

            BotPersonalityProfile profile = _cache.AIRefactoredBotOwner.PersonalityProfile;
            return profile != null ? profile.ChaosFactor * 0.25f : 0f;
        }

        private static bool IsLowVisibility()
        {
            float ambient = RenderSettings.ambientLight.grayscale;
            float fogDensity = RenderSettings.fog ? RenderSettings.fogDensity : 0f;
            return ambient < TacticalConfig.LightThreshold || fogDensity > TacticalConfig.FogThreshold;
        }

        private static void ScanMods(Weapon weapon, List<LightComponent> result)
        {
            IEnumerable<Slot> slots = weapon.AllSlots;
            if (slots == null)
            {
                return;
            }

            foreach (Slot slot in slots)
            {
                if (slot == null)
                {
                    continue;
                }

                Item mod = slot.ContainedItem;
                if (mod == null || mod.Template == null)
                {
                    continue;
                }

                string name = mod.Template.Name?.ToLowerInvariant();
                if (string.IsNullOrEmpty(name) || !IsTacticalName(name))
                {
                    continue;
                }

                switch (mod)
                {
                    case FlashlightItemClass f when f.Light != null:
                        result.Add(f.Light);
                        break;
                    case TacticalComboItemClass c when c.Light != null:
                        result.Add(c.Light);
                        break;
                    case LightLaserItemClass l when l.Light != null:
                        result.Add(l.Light);
                        break;
                }
            }
        }

        private static bool IsTacticalName(string name)
        {
            for (int i = 0; i < TacticalConfig.Keywords.Length; i++)
            {
                if (name.Contains(TacticalConfig.Keywords[i]))
                {
                    return true;
                }
            }

            return false;
        }

        #endregion

        #region Tactical Settings

        private static class TacticalConfig
        {
            public const float CheckInterval = 2.0f;
            public const float FogThreshold = 0.5f;
            public const float LightThreshold = 0.3f;

            public static readonly string[] Keywords = { "light", "laser", "nvg", "thermal", "flash" };
        }

        #endregion
    }
}
