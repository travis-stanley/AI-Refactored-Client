// <auto-generated>
//   AI-Refactored: HotspotRegistryBootstrapper.cs (Beyond Diamond – Fallback-Isolated, Raid/World Safe Edition)
//   SYSTEMATICALLY MANAGED. All failures locally contained; never escalate or affect other AI systems.
//   Full compliance: Realism, Headless/Client Parity, Bulletproof Isolation, and Robust World/Lifecycle Management.
//   MIT License.
// </auto-generated>

namespace AIRefactored.Bootstrap
{
    using System;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Hotspots;
    using AIRefactored.Core;
    using BepInEx.Logging;

    /// <summary>
    /// Bootstraps and manages HotspotRegistry across world/raid sessions.
    /// Bulletproof: all failures are strictly local; no global disables or cascade possible.
    /// </summary>
    public sealed class HotspotRegistryBootstrapper : IAIWorldSystemBootstrapper
    {
        #region Fields

        private static readonly ManualLogSource Logger = Plugin.LoggerInstance;
        private volatile bool _isInitialized;
        private volatile bool _hasFailed;

        #endregion

        #region Initialization

        /// <inheritdoc />
        public void Initialize()
        {
            _isInitialized = false;
            _hasFailed = false;

            try
            {
                // Always clear first; never risk stale data.
                HotspotRegistry.Clear();

                // Host gating now handled ONLY by world bootstrap/init layer (no per-mode logic here).
                if (!GameWorldHandler.IsHost)
                {
                    Logger.LogWarning("[HotspotRegistry] Initialization skipped — not authoritative host.");
                    return;
                }

                if (!GameWorldHandler.IsSafeToInitialize)
                {
                    Logger.LogWarning("[HotspotRegistry] Initialization skipped — world not ready.");
                    return;
                }

                string mapId = GameWorldHandler.TryGetValidMapName();
                if (string.IsNullOrEmpty(mapId) || mapId == "unknown")
                {
                    Logger.LogWarning("[HotspotRegistry] Initialization skipped — invalid map ID.");
                    return;
                }

                HotspotRegistry.Initialize(mapId);
                _isInitialized = true;
                Logger.LogInfo("[HotspotRegistry] ✅ Initialized for map: " + mapId);
            }
            catch (Exception ex)
            {
                _hasFailed = true;
                _isInitialized = false;
                Logger.LogError("[HotspotRegistry] Initialization failed: " + ex);
                OnFailover();
            }
        }

        #endregion

        #region Runtime Tick

        /// <inheritdoc />
        public void Tick(float deltaTime)
        {
            // All runtime logic must remain bulletproof and locally error-contained.
            // Extend here for runtime hotspot updates if needed.
            if (!_isInitialized || _hasFailed)
                return;
            // No runtime logic at present.
        }

        #endregion

        #region Raid End / Teardown

        /// <inheritdoc />
        public void OnRaidEnd()
        {
            try
            {
                HotspotRegistry.Clear();
                _isInitialized = false;
                Logger.LogInfo("[HotspotRegistry] 🔻 Cleared on raid end.");
            }
            catch (Exception ex)
            {
                _hasFailed = true;
                Logger.LogError("[HotspotRegistry] OnRaidEnd failed: " + ex);
                OnFailover();
            }
        }

        #endregion

        #region Gating & Phase

        /// <inheritdoc />
        public bool IsReady()
        {
            return _isInitialized && !_hasFailed;
        }

        /// <inheritdoc />
        public WorldPhase RequiredPhase()
        {
            return WorldPhase.WorldReady;
        }

        #endregion

        #region Local Fallback / Failover

        /// <summary>
        /// Invoked on local failure. Only this system is affected—never disables or breaks global AI state.
        /// </summary>
        private void OnFailover()
        {
            // Optionally implement fallback to vanilla or safe mode.
            // Never escalate; never affect other systems.
        }

        #endregion
    }
}
