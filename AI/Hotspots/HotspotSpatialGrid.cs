// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

namespace AIRefactored.AI.Hotspots
{
    using System;
    using System.Collections.Generic;
    using AIRefactored.Pools;
    using UnityEngine;

    /// <summary>
    /// Uniform grid-based spatial index for fast hotspot lookups in small or flat maps.
    /// Used as a fallback when quadtree is unnecessary or too sparse.
    /// Bulletproof: all input and output logic is null-safe, range-guarded, and never throws or leaks.
    /// </summary>
    public sealed class HotspotSpatialGrid
    {
        #region Fields

        private readonly float _cellSize;
        private readonly Dictionary<Vector2Int, List<HotspotRegistry.Hotspot>> _grid;

        #endregion

        #region Constructor

        /// <summary>
        /// Initializes a new instance of the <see cref="HotspotSpatialGrid"/> class.
        /// </summary>
        /// <param name="cellSize">Grid cell size in world units.</param>
        public HotspotSpatialGrid(float cellSize)
        {
            _cellSize = (cellSize < 1f) ? 1f : cellSize;
            _grid = new Dictionary<Vector2Int, List<HotspotRegistry.Hotspot>>(128);
        }

        #endregion

        #region Public Methods

        /// <summary>
        /// Inserts a hotspot into the appropriate spatial cell.
        /// </summary>
        public void Insert(HotspotRegistry.Hotspot hotspot)
        {
            if (hotspot == null)
                return;

            try
            {
                Vector2Int cell = WorldToCell(hotspot.Position);

                if (!_grid.TryGetValue(cell, out var list) || list == null)
                {
                    list = new List<HotspotRegistry.Hotspot>(4);
                    _grid[cell] = list;
                }

                list.Add(hotspot);
            }
            catch
            {
                // Bulletproof: skip insert on error
            }
        }

        /// <summary>
        /// Queries all hotspots within a radius of the given world position.
        /// </summary>
        public List<HotspotRegistry.Hotspot> Query(Vector3 worldPos, float radius, Predicate<HotspotRegistry.Hotspot> filter)
        {
            List<HotspotRegistry.Hotspot> results = TempListPool.Rent<HotspotRegistry.Hotspot>();

            try
            {
                float radiusSq = radius * radius;

                Vector2Int center = WorldToCell(worldPos);
                int cellRadius = Mathf.CeilToInt(radius / _cellSize);

                for (int dx = -cellRadius; dx <= cellRadius; dx++)
                {
                    for (int dz = -cellRadius; dz <= cellRadius; dz++)
                    {
                        Vector2Int check = new Vector2Int(center.x + dx, center.y + dz);
                        if (!_grid.TryGetValue(check, out var candidates) || candidates == null)
                            continue;

                        for (int i = 0; i < candidates.Count; i++)
                        {
                            HotspotRegistry.Hotspot h = candidates[i];
                            if ((h.Position - worldPos).sqrMagnitude <= radiusSq &&
                                (filter == null || filter(h)))
                            {
                                results.Add(h);
                            }
                        }
                    }
                }
            }
            catch
            {
                // Never break; just return collected results so far
            }

            return results;
        }

        #endregion

        #region Private Methods

        private Vector2Int WorldToCell(Vector3 worldPos)
        {
            try
            {
                if (float.IsNaN(worldPos.x) || float.IsNaN(worldPos.z) ||
                    float.IsInfinity(worldPos.x) || float.IsInfinity(worldPos.z))
                {
                    return default;
                }

                int x = Mathf.FloorToInt(worldPos.x / _cellSize);
                int z = Mathf.FloorToInt(worldPos.z / _cellSize);
                return new Vector2Int(x, z);
            }
            catch
            {
                return default;
            }
        }

        #endregion
    }
}
