// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Failures in AIRefactored logic must always trigger safe fallback to EFT base AI.
// </auto-generated>

namespace AIRefactored.AI.Movement
{
    using System;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Helpers;
    using AIRefactored.Core;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Determines the optimal flank side and path for a bot based on enemy state, squad angle, and prior usage.
    /// Prevents flank clustering and simulates intelligent side selection.
    /// </summary>
    public static class FlankCoordinator
    {
        #region Constants

        private const float FlankAngleThreshold = 35f;
        private const float SuppressionBiasWeight = 0.3f;
        private const float SquadSpreadBias = 0.15f;
        private const float RecentlyUsedFlankCooldown = 6f;

        #endregion

        #region State

        private static float _lastLeftUseTime = -999f;
        private static float _lastRightUseTime = -999f;

        #endregion

        #region Public API

        /// <summary>
        /// Determines the best flank side based on squad spacing, suppression, and enemy angle.
        /// Enforces per-side cooldown to avoid flank spam.
        /// </summary>
        public static FlankPositionPlanner.Side GetOptimalFlankSide(BotOwner bot, BotComponentCache cache)
        {
            if (!EFTPlayerUtil.IsValidBotOwner(bot) || cache == null || bot.Memory == null || bot.Memory.GoalEnemy == null)
            {
                return FlankPositionPlanner.Side.Left;
            }

            Vector3 botPos = bot.Position;
            Vector3 enemyPos = bot.Memory.GoalEnemy.CurrPosition;

            BifacialTransform enemyTransform = bot.Memory.GoalEnemy.Person?.Transform;
            if (enemyTransform == null)
            {
                return FlankPositionPlanner.Side.Left;
            }

            float now = Time.time;
            Vector3 enemyForward = enemyTransform.forward;
            Vector3 toBot = botPos - enemyPos;

            float angle = Vector3.SignedAngle(enemyForward, toBot, Vector3.up);
            float squadBias = GetSquadBias(bot, enemyPos);
            float suppressionBias = GetSuppressionBias(cache);

            float leftCooldown = now - _lastLeftUseTime;
            float rightCooldown = now - _lastRightUseTime;

            float leftScore = 0f;
            float rightScore = 0f;

            if (angle > FlankAngleThreshold)
            {
                leftScore += 1f;
            }
            else if (angle < -FlankAngleThreshold)
            {
                rightScore += 1f;
            }

            leftScore += squadBias + suppressionBias;
            rightScore -= squadBias;
            rightScore += suppressionBias;

            if (leftCooldown < RecentlyUsedFlankCooldown)
            {
                leftScore -= 0.75f;
            }

            if (rightCooldown < RecentlyUsedFlankCooldown)
            {
                rightScore -= 0.75f;
            }

            if (leftScore >= rightScore)
            {
                _lastLeftUseTime = now;
                return FlankPositionPlanner.Side.Left;
            }

            _lastRightUseTime = now;
            return FlankPositionPlanner.Side.Right;
        }

        #endregion

        #region Helpers

        private static float GetSuppressionBias(BotComponentCache cache)
        {
            return cache.Suppression != null && cache.Suppression.IsSuppressed()
                ? SuppressionBiasWeight
                : 0f;
        }

        private static float GetSquadBias(BotOwner bot, Vector3 enemyPosition)
        {
            BotsGroup group = bot.BotsGroup;
            if (group == null || group.MembersCount <= 1)
            {
                return 0f;
            }

            Vector3 selfOffset = bot.Position - enemyPosition;
            Vector3 normSelf = selfOffset.sqrMagnitude > 0.001f ? selfOffset.normalized : Vector3.forward;

            float dotSum = 0f;
            int contributors = 0;

            for (int i = 0; i < group.MembersCount; i++)
            {
                BotOwner mate = group.Member(i);
                if (mate == null || mate == bot || mate.IsDead)
                {
                    continue;
                }

                Vector3 toMate = mate.Position - enemyPosition;
                if (toMate.sqrMagnitude > 0.001f)
                {
                    dotSum += Vector3.Dot(normSelf, toMate.normalized);
                    contributors++;
                }
            }

            return contributors > 0 ? (dotSum / contributors) * SquadSpreadBias : 0f;
        }

        #endregion
    }
}
