// <auto-generated>
//   AI-Refactored: TempPoolManager.cs (Beyond Diamond – Bulletproof Pooling, Isolation & Lifecycle Edition)
//   SYSTEMATICALLY MANAGED. All pooling, clear, and prewarm logic is isolated; teardown cannot break global state.
//   All failures strictly local; teardown/unload and prewarm immune to all exceptions/platform differences.
//   MIT License.
// </auto-generated>

namespace AIRefactored.Core
{
    using System;
    using System.Collections.Generic;
    using AIRefactored.Pools;
    using UnityEngine;
    using UnityEngine.AI;

    /// <summary>
    /// Centralized manager for initializing, clearing, and registering temporary pooling systems.
    /// Handles teardown, plugin unload, prewarming, and memory flushes.
    /// Bulletproof: All exceptions are locally contained; teardown cannot break global state or cause leaks.
    /// </summary>
    public static class TempPoolManager
    {
        #region Fields

        private static readonly List<Action> _registeredCustomClearers = new List<Action>(16);
        private static bool _domainHooked;

        #endregion

        #region Lifecycle

        /// <summary>
        /// Initializes the manager and binds cleanup logic to AppDomain unload (if supported).
        /// Bulletproof: Errors are locally contained and cannot break global logic. Safe on IL2CPP/AOT.
        /// </summary>
        public static void Initialize()
        {
            if (_domainHooked)
                return;

            _domainHooked = true;

            try
            {
                AppDomain.CurrentDomain.DomainUnload += (_, __) => ClearAll();
            }
            catch
            {
                // IL2CPP/AOT platforms may not support AppDomain events; ignore silently.
            }
        }

        /// <summary>
        /// Registers a custom pool clear method for global teardown.
        /// Bulletproof: No nulls, no duplicates; always safe to call.
        /// </summary>
        /// <param name="clearMethod">Action to execute during ClearAll.</param>
        public static void RegisterCustom(Action clearMethod)
        {
            if (clearMethod == null)
                return;

            if (!_registeredCustomClearers.Contains(clearMethod))
            {
                _registeredCustomClearers.Add(clearMethod);
            }
        }

        #endregion

        #region Pooling API

        /// <summary>
        /// Prewarms all known AIRefactored temporary pools to reduce runtime allocations.
        /// Bulletproof: All errors locally contained; all pools guaranteed safe after call.
        /// </summary>
        public static void PrewarmAll()
        {
            try
            {
                // Generic pooled collections
                TempListPool.Prewarm<int>(16);
                TempListPool.Prewarm<Vector3>(16);
                TempListPool.Prewarm<RaycastHit>(16);
                TempListPool.Prewarm<NavMeshHit>(8);
                TempListPool.Prewarm<Bounds>(8);

                TempHashSetPool.Prewarm<int>(16);
                TempDictionaryPool.Prewarm<string, int>(8);
                TempQueuePool.Prewarm<float>(8);
                TempStackPool.Prewarm<Vector3>(8);

                // Fixed-size pooled arrays
                TempIntArrayPool.Prewarm(32, 8);
                TempVector3Pool.Prewarm(16, 8);
                TempNavPathCornerPool.Prewarm(16, 8);

                // Unity struct pools
                TempBoundsPool.Prewarm(8, 4);
                TempRaycastHitPool.Prewarm(16, 4);
                TempRaycastHitListPool.Prewarm(8);
                TempNavMeshHitPool.Prewarm(8, 4);
                TempRaycastCommandPool.Prewarm(8, 4);
                TempNavMeshPathPool.Prewarm(4);
            }
            catch (Exception)
            {
                // Bulletproof: ignore and continue.
            }
        }

        /// <summary>
        /// Clears all pooling systems and resets the internal registry state.
        /// Bulletproof: All custom clearers are invoked safely; teardown is always safe to call repeatedly.
        /// </summary>
        public static void ClearAll()
        {
            try { TempListPool.ClearAll(); } catch { }
            try { TempHashSetPool.ClearAll(); } catch { }
            try { TempDictionaryPool.ClearAll(); } catch { }
            try { TempQueuePool.ClearAll(); } catch { }
            try { TempStackPool.ClearAll(); } catch { }

            try { TempIntArrayPool.ClearAll(); } catch { }
            try { TempVector3Pool.ClearAll(); } catch { }
            try { TempNavPathCornerPool.ClearAll(); } catch { }

            try { TempRaycastHitPool.ClearAll(); } catch { }
            try { TempRaycastHitListPool.ClearAll(); } catch { }
            try { TempBoundsPool.ClearAll(); } catch { }
            try { TempNavMeshHitPool.ClearAll(); } catch { }
            try { TempRaycastCommandPool.ClearAll(); } catch { }
            try { TempNavMeshPathPool.ClearAll(); } catch { }

            for (int i = 0; i < _registeredCustomClearers.Count; i++)
            {
                try
                {
                    _registeredCustomClearers[i].Invoke();
                }
                catch
                {
                    // Fail silently — custom pool cleanup failed.
                }
            }
        }

        #endregion
    }
}
