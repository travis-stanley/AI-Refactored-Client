// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Failures in AIRefactored logic must always trigger safe fallback to EFT base AI.
// </auto-generated>

namespace AIRefactored.AI.Combat
{
    using System;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Helpers;
    using AIRefactored.AI.Optimization;
    using AIRefactored.Core;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Handles bot suppression logic, including sprint retreat, composure impact,
    /// and panic escalation. Suppression is triggered by incoming fire or explosions.
    /// Bulletproof: All failures are isolated; only this handler disables itself and triggers vanilla fallback if required.
    /// </summary>
    public sealed class BotSuppressionReactionComponent
    {
        #region Constants

        private const float MinSuppressionRetreatDistance = 6.0f;
        private const float SuppressionDuration = 2.0f;

        #endregion

        #region Fields

        private BotOwner _bot;
        private BotComponentCache _cache;
        private bool _isSuppressed;
        private float _suppressionStartTime = float.NegativeInfinity;
        private bool _isFallbackMode;

        #endregion

        #region Public Methods

        /// <summary>
        /// Initializes the suppression reaction component with a bot's component cache.
        /// </summary>
        public void Initialize(BotComponentCache componentCache)
        {
            if (componentCache == null || componentCache.Bot == null)
            {
                BotFallbackUtility.Trigger(this, null, "[Suppression] Bot or cache is null in Initialize.");
                _isFallbackMode = true;
                return;
            }

            _cache = componentCache;
            _bot = componentCache.Bot;
            _isSuppressed = false;
            _suppressionStartTime = float.NegativeInfinity;
            _isFallbackMode = false;
        }

        /// <summary>
        /// Returns whether the bot is currently suppressed.
        /// </summary>
        public bool IsSuppressed()
        {
            if (_isFallbackMode)
                return false;

            return _isSuppressed;
        }

        /// <summary>
        /// Updates suppression decay over time.
        /// </summary>
        public void Tick(float time)
        {
            if (_isFallbackMode || !_isSuppressed)
                return;

            try
            {
                if (!IsValid())
                {
                    _isSuppressed = false;
                    return;
                }

                if (time - _suppressionStartTime >= SuppressionDuration)
                {
                    _isSuppressed = false;
                }
            }
            catch (Exception ex)
            {
                BotFallbackUtility.Trigger(this, _bot, "Exception in Tick.", ex);
                _isSuppressed = false;
                _isFallbackMode = true;
            }
        }

        /// <summary>
        /// Triggers suppression effects: sprint, fallback, panic escalation.
        /// </summary>
        public void TriggerSuppression(Vector3? source)
        {
            if (_isFallbackMode || _isSuppressed || !IsValid())
                return;

            try
            {
                var panic = _cache.PanicHandler;
                if (panic != null && panic.IsPanicking)
                    return;

                _isSuppressed = true;
                _suppressionStartTime = Time.time;

                Vector3 retreatDir = source.HasValue
                    ? (_bot.Position - source.Value).normalized
                    : GetDefaultRetreatDirection();

                Vector3 fallback = ComputeFallbackPosition(retreatDir);
                float cohesion = _cache.AIRefactoredBotOwner?.PersonalityProfile?.Cohesion ?? 1f;

                if (_bot.Mover != null)
                {
                    BotMovementHelper.SmoothMoveTo(_bot, fallback, false, cohesion);
                    _bot.Sprint(true);
                }
                else
                {
                    BotFallbackUtility.Trigger(this, _bot, "BotMover missing. Fallback to EFT AI.");
                    _isFallbackMode = true;
                    BotFallbackUtility.FallbackToEFTLogic(_bot);
                    return;
                }

                panic?.TriggerPanic();
                _cache.Escalation?.NotifyPanicTriggered();

                if (!FikaHeadlessDetector.IsHeadless && _bot.BotTalk != null)
                {
                    try { _bot.BotTalk.TrySay(EPhraseTrigger.OnLostVisual); }
                    catch { /* no-op */ }
                }
            }
            catch (Exception ex)
            {
                BotFallbackUtility.Trigger(this, _bot, "Exception in TriggerSuppression.", ex);
                _isFallbackMode = true;
            }
        }

        #endregion

        #region Private Methods

        private Vector3 ComputeFallbackPosition(Vector3 retreatDirection)
        {
            try
            {
                if (_cache.Pathing != null)
                {
                    var path = BotCoverRetreatPlanner.GetCoverRetreatPath(_bot, retreatDirection, _cache.Pathing);
                    if (path != null && path.Count > 0)
                    {
                        return (Vector3.Distance(path[0], _bot.Position) < 1f && path.Count > 1)
                            ? path[1]
                            : path[0];
                    }
                }

                return _bot.Position + retreatDirection.normalized * MinSuppressionRetreatDistance;
            }
            catch (Exception ex)
            {
                BotFallbackUtility.Trigger(this, _bot, "Exception in ComputeFallbackPosition.", ex);
                _isFallbackMode = true;
                return _bot != null ? _bot.Position : Vector3.zero;
            }
        }

        private static Vector3 GetDefaultRetreatDirection()
        {
            return Vector3.back;
        }

        private bool IsValid()
        {
            try
            {
                return _bot != null &&
                       _cache != null &&
                       !_bot.IsDead &&
                       _bot.GetPlayer is Player player &&
                       player.IsAI;
            }
            catch
            {
                return false;
            }
        }

        #endregion
    }
}
