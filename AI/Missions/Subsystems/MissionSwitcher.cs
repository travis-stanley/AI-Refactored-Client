// <auto-generated>
//   AI-Refactored: MissionSwitcher.cs (Beyond Diamond – Human Priorities Edition, June 2025)
//   Dynamically switches bot missions using realistic logic: loot drive, squad cohesion, panic, aggression.
//   No direct movement, all routing through safe pooled systems. All errors strictly localized.
//   MIT License.
// </auto-generated>

using MissionType = AIRefactored.AI.Missions.BotMissionController.MissionType;

namespace AIRefactored.AI.Missions.Subsystems
{
    using System;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Groups;
    using AIRefactored.AI.Helpers;
    using AIRefactored.AI.Looting;
    using AIRefactored.Core;
    using AIRefactored.Runtime;
    using BepInEx.Logging;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Dynamically selects bot mission types using realistic state-based logic.
    /// Never issues direct movement or transitions outside of localized mission change.
    /// </summary>
    public sealed class MissionSwitcher
    {
        #region Constants

        private const float SwitchCooldown = 10f;

        #endregion

        #region Fields

        private readonly BotOwner _bot;
        private readonly BotComponentCache _cache;
        private readonly BotGroupSyncCoordinator _group;
        private readonly BotLootDecisionSystem _lootDecision;
        private readonly BotPersonalityProfile _profile;
        private readonly ManualLogSource _log;

        private float _lastSwitchTime;

        #endregion

        #region Constructor

        /// <summary>
        /// Instantiates a MissionSwitcher for the provided bot and cache.
        /// </summary>
        public MissionSwitcher(BotOwner bot, BotComponentCache cache)
        {
            if (!EFTPlayerUtil.IsValidBotOwner(bot) || cache == null)
                throw new ArgumentException("[MissionSwitcher] Invalid bot or component cache.");

            _bot = bot;
            _cache = cache;
            _profile = BotRegistry.Get(bot.ProfileId);
            _group = BotCacheUtility.GetGroupSync(cache);
            _lootDecision = cache.LootDecisionSystem;
            _log = Plugin.LoggerInstance;
        }

        #endregion

        #region Evaluation Logic

        /// <summary>
        /// Evaluates bot state and decides whether to switch mission type.
        /// Strictly isolated. Does not issue movement or side effects directly.
        /// </summary>
        public void Evaluate(
            ref MissionType currentMission,
            float time,
            Action switchToFight,
            Action resumeQuesting,
            Func<bool> isGroupAligned)
        {
            try
            {
                if (_bot == null || _cache == null || _profile == null || _bot.IsDead || _bot.GetPlayer == null || !_bot.GetPlayer.IsAI)
                    return;

                if (time - _lastSwitchTime < SwitchCooldown)
                    return;

                string name = _bot.Profile?.Info?.Nickname ?? "Unknown";

                // 1. Escalate to Fight if under fire and aggressive
                if (_bot.Memory?.IsUnderFire == true &&
                    _profile.AggressionLevel > 0.6f &&
                    currentMission != MissionType.Fight)
                {
                    currentMission = MissionType.Fight;
                    _lastSwitchTime = time;
                    switchToFight?.Invoke();
                    _log.LogDebug($"[MissionSwitcher] {name} escalating → Fight (under fire + aggressive)");
                    return;
                }

                // 2. Switch to Loot if loot-driven and opportunity exists
                if (currentMission == MissionType.Quest &&
                    _profile.PreferredMission == MissionBias.Loot &&
                    _lootDecision?.ShouldLootNow() == true)
                {
                    Vector3 lootPos = _lootDecision.GetLootDestination();
                    if (lootPos != Vector3.zero)
                    {
                        currentMission = MissionType.Loot;
                        _lastSwitchTime = time;
                        _log.LogDebug($"[MissionSwitcher] {name} switching → Loot (loot opportunity nearby)");
                        return;
                    }
                }

                // 3. Revert to Quest if squad lost during combat
                if (currentMission == MissionType.Fight &&
                    isGroupAligned != null &&
                    !isGroupAligned())
                {
                    currentMission = MissionType.Quest;
                    _lastSwitchTime = time;
                    resumeQuesting?.Invoke();
                    _log.LogDebug($"[MissionSwitcher] {name} falling back → Quest (squad separation)");
                }
            }
            catch (Exception ex)
            {
                _log.LogError($"[MissionSwitcher] Evaluate failed: {ex}");
            }
        }

        #endregion
    }
}
