// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Failures in AIRefactored logic must always trigger safe fallback to EFT base AI.
// </auto-generated>

namespace AIRefactored.AI.Combat
{
    using System;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Helpers;
    using AIRefactored.AI.Memory;
    using AIRefactored.AI.Optimization;
    using AIRefactored.Core;
    using EFT;
    using EFT.HealthSystem;
    using UnityEngine;

    /// <summary>
    /// Handles bot suppression, flash, injury, and squad danger panic behavior.
    /// Manages composure, retreat direction, danger zones, and voice triggers.
    /// </summary>
    public sealed class BotPanicHandler
    {
        #region Constants

        private const float PanicCooldown = 5f;
        private const float PanicDuration = 3.5f;
        private const float RecoverySpeed = 0.2f;
        private const float SquadRadiusSqr = 225f;
        private const float LowHealthThreshold = 25f;

        #endregion

        #region Fields

        private BotOwner _bot;
        private BotComponentCache _cache;

        private float _composureLevel = 1f;
        private float _panicStartTime = -1f;
        private float _lastPanicExitTime = -99f;
        private bool _isPanicking;

        #endregion

        #region Properties

        public bool IsPanicking => _isPanicking;

        #endregion

        #region Public Methods

        public float GetComposureLevel()
        {
            return _composureLevel;
        }

        public void Initialize(BotComponentCache componentCache)
        {
            if (componentCache == null || componentCache.Bot == null)
            {
                throw new InvalidOperationException("[BotPanicHandler] Cannot initialize with null BotComponentCache or Bot.");
            }

            _cache = componentCache;
            _bot = componentCache.Bot;

            if (_bot.GetPlayer is Player player && player.HealthController != null)
            {
                player.HealthController.ApplyDamageEvent += OnDamaged;
            }
        }

        public void Tick(float time)
        {
            if (!IsValid())
            {
                return;
            }

            if (_isPanicking)
            {
                if (time - _panicStartTime > PanicDuration)
                {
                    EndPanic(time);
                }

                return;
            }

            RecoverComposure(Time.deltaTime);

            if (time <= _lastPanicExitTime + PanicCooldown)
            {
                return;
            }

            if (ShouldPanicFromThreat())
            {
                Vector3 retreat = -_bot.LookDirection.normalized;
                TryStartPanic(time, retreat);
                return;
            }

            if (CheckNearbySquadDanger(out Vector3 squadDir))
            {
                TryStartPanic(time, squadDir);
            }
        }

        public void TriggerPanic()
        {
            if (!IsValid() || _isPanicking || Time.time < _lastPanicExitTime + PanicCooldown)
            {
                return;
            }

            var profile = _cache.AIRefactoredBotOwner?.PersonalityProfile;
            if (profile == null || profile.IsFrenzied || profile.IsStubborn)
            {
                return;
            }

            Vector3 retreatDir = -_bot.LookDirection.normalized;
            TryStartPanic(Time.time, retreatDir);
        }

        #endregion

        #region Private Methods

        private void OnDamaged(EBodyPart part, float damage, DamageInfoStruct info)
        {
            if (!IsValid() || _isPanicking || Time.time < _lastPanicExitTime + PanicCooldown)
            {
                return;
            }

            var profile = _cache.AIRefactoredBotOwner?.PersonalityProfile;
            if (profile == null || profile.IsFrenzied || profile.IsStubborn || profile.AggressionLevel > 0.8f)
            {
                return;
            }

            Vector3 retreatDir = (_bot.Position - info.HitPoint).normalized;
            TryStartPanic(Time.time, retreatDir);

            if (_bot.Memory?.GoalEnemy?.Person is Player enemy && !string.IsNullOrEmpty(enemy.ProfileId))
            {
                _cache.LastShotTracker?.RegisterHit(enemy.ProfileId);
            }

            _cache.InjurySystem?.OnHit(part, damage);
            _cache.GroupComms?.SayHit();
        }

        private bool ShouldPanicFromThreat()
        {
            var profile = _cache.AIRefactoredBotOwner?.PersonalityProfile;
            if (profile == null || profile.IsFrenzied || profile.IsStubborn)
            {
                return false;
            }

            if (_cache.FlashGrenade?.IsFlashed() == true)
            {
                return true;
            }

            if (_bot.HealthController == null)
            {
                return false;
            }

            ValueStruct health = _bot.HealthController.GetBodyPartHealth(EBodyPart.Common);
            return health.Current < LowHealthThreshold;
        }

        private void RecoverComposure(float deltaTime)
        {
            _composureLevel = Mathf.Clamp01(_composureLevel + deltaTime * RecoverySpeed);
        }

        private void TryStartPanic(float now, Vector3 retreatDir)
        {
            if (!IsValid())
            {
                return;
            }

            _isPanicking = true;
            _panicStartTime = now;
            _composureLevel = 0f;

            _cache.Escalation?.NotifyPanicTriggered();

            float cohesion = _cache.AIRefactoredBotOwner?.PersonalityProfile?.Cohesion ?? 1f;
            Vector3 fallback = _bot.Position + retreatDir.normalized * 8f;

            if (_cache.Pathing != null)
            {
                var path = BotCoverRetreatPlanner.GetCoverRetreatPath(_bot, retreatDir, _cache.Pathing);
                if (path.Count > 0)
                {
                    fallback = (Vector3.Distance(path[0], _bot.Position) < 1f && path.Count > 1) ? path[1] : path[0];
                }
            }

            BotMovementHelper.SmoothMoveTo(_bot, fallback, false, cohesion);
            BotCoverHelper.TrySetStanceFromNearbyCover(_cache, fallback);

            if (GameWorldHandler.TryGetValidMapName() is string mapId)
            {
                BotMemoryStore.AddDangerZone(mapId, _bot.Position, DangerTriggerType.Panic, 0.6f);
            }

            _bot.Sprint(true);

            if (!FikaHeadlessDetector.IsHeadless && _bot.BotTalk != null)
            {
                _bot.BotTalk.TrySay(EPhraseTrigger.OnBeingHurt);
            }
        }

        private void EndPanic(float now)
        {
            _isPanicking = false;
            _lastPanicExitTime = now;

            if (_bot.Memory != null)
            {
                _bot.Memory.SetLastTimeSeeEnemy();
                _bot.Memory.CheckIsPeace();
            }
        }

        private bool CheckNearbySquadDanger(out Vector3 retreatDir)
        {
            retreatDir = Vector3.zero;

            if (_bot.Profile?.Info?.GroupId == null)
            {
                return false;
            }

            string mapId = GameWorldHandler.TryGetValidMapName();
            if (string.IsNullOrEmpty(mapId))
            {
                return false;
            }

            Vector3 myPos = _bot.Position;
            var zones = BotMemoryStore.GetZonesForMap(mapId);

            for (int i = 0; i < zones.Count; i++)
            {
                if ((zones[i].Position - myPos).sqrMagnitude <= SquadRadiusSqr)
                {
                    retreatDir = (myPos - zones[i].Position).normalized;
                    return true;
                }
            }

            return false;
        }

        private bool IsValid()
        {
            return _bot != null &&
                   _cache != null &&
                   !_bot.IsDead &&
                   _bot.GetPlayer is Player player &&
                   player.IsAI;
        }

        #endregion
    }
}
