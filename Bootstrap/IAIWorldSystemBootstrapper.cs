// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

namespace AIRefactored.AI.Core
{
    using AIRefactored.Bootstrap;

    /// <summary>
    /// Defines the interface for modular AIRefactored world systems to participate in lifecycle events.
    /// Used during phased initialization, frame-based execution, and raid teardown.
    /// </summary>
    public interface IAIWorldSystemBootstrapper
    {
        /// <summary>
        /// Called once when the system is permitted to initialize during the appropriate world phase.
        /// Implementers must perform one-time setup logic and avoid runtime dependencies unless IsReady() will succeed.
        /// </summary>
        void Initialize();

        /// <summary>
        /// Called every frame after initialization for system updates.
        /// Implementers must wrap logic in try/catch and verify internal readiness.
        /// </summary>
        /// <param name="deltaTime">The elapsed time in seconds since the last tick.</param>
        void Tick(float deltaTime);

        /// <summary>
        /// Called once when the raid ends.
        /// Systems should use this to clear memory, detach handlers, or reset static state.
        /// </summary>
        void OnRaidEnd();

        /// <summary>
        /// Returns whether the system is fully initialized and safe to receive Tick() calls.
        /// </summary>
        /// <returns>True if the system is active and internally valid; otherwise, false.</returns>
        bool IsReady();

        /// <summary>
        /// Specifies the required world phase before this system can initialize.
        /// Used to defer bootstrap until the world is fully prepared.
        /// </summary>
        /// <returns>The minimum <see cref="WorldPhase"/> required for initialization.</returns>
        WorldPhase RequiredPhase();
    }
}
