// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Failures in AIRefactored logic must always trigger safe fallback to EFT base AI.
// </auto-generated>

namespace AIRefactored.AI.Medical
{
    using System;
    using AIRefactored.AI.Core;
    using AIRefactored.Core;
    using BepInEx.Logging;
    using EFT;
    using EFT.HealthSystem;
    using UnityEngine;

    /// <summary>
    /// Manages bot injuries, healing behavior, and surgical procedures on destroyed limbs.
    /// Prioritizes realistic timing, cover safety, and cooldown between medical actions.
    /// </summary>
    public sealed class BotInjurySystem
    {
        #region Constants

        private const float HealCooldown = 6f;

        #endregion

        #region Fields

        private static readonly ManualLogSource Logger = Plugin.LoggerInstance;

        private readonly BotComponentCache _cache;

        private EBodyPart _injuredLimb;
        private float _lastHitTime;
        private float _nextHealTime;
        private bool _hasInjury;
        private bool _hasBlackLimb;

        #endregion

        #region Constructor

        public BotInjurySystem(BotComponentCache cache)
        {
            if (cache == null || cache.Bot == null)
            {
                throw new ArgumentException("[BotInjurySystem] Invalid cache or missing bot.");
            }

            _cache = cache;
            Reset();
        }

        #endregion

        #region Public API

        public void OnHit(EBodyPart part, float damage)
        {
            BotOwner bot = _cache.Bot;
            if (!EFTPlayerUtil.IsValidBotOwner(bot))
            {
                return;
            }

            Player player = bot.GetPlayer;
            IHealthController health = player?.HealthController;
            if (health == null)
            {
                return;
            }

            _lastHitTime = Time.time;
            _nextHealTime = _lastHitTime + HealCooldown;
            _injuredLimb = part;
            _hasInjury = true;
            _hasBlackLimb = health.IsBodyPartDestroyed(part);
        }

        public void Reset()
        {
            _injuredLimb = EBodyPart.Common;
            _lastHitTime = -1f;
            _nextHealTime = -1f;
            _hasInjury = false;
            _hasBlackLimb = false;
        }

        public bool ShouldHeal()
        {
            return ShouldHeal(Time.time);
        }

        public bool ShouldHeal(float time)
        {
            if (!_hasInjury || !_hasBlackLimb || time < _nextHealTime)
            {
                return false;
            }

            if (_cache.PanicHandler != null && _cache.PanicHandler.IsPanicking)
            {
                return false;
            }

            if (_cache.Combat != null && _cache.Combat.IsInCombatState())
            {
                return false;
            }

            return true;
        }

        public void Tick(float time)
        {
            if (ShouldHeal(time))
            {
                TryUseMedicine();
            }
        }

        #endregion

        #region Internal Logic

        private void TryUseMedicine()
        {
            BotOwner bot = _cache.Bot;
            if (!EFTPlayerUtil.IsValidBotOwner(bot) || !_hasInjury)
            {
                return;
            }

            Player player = bot.GetPlayer;
            IHealthController health = player?.HealthController;
            if (health == null || !health.IsBodyPartDestroyed(_injuredLimb))
            {
                return;
            }

            GClass473 surgery = bot.Medecine?.SurgicalKit as GClass473;
            if (surgery == null || !surgery.HaveWork || !surgery.ShallStartUse())
            {
                return;
            }

            bot.Sprint(false);
            bot.WeaponManager?.Selector?.TakePrevWeapon();

            if (!FikaHeadlessDetector.IsHeadless && bot.BotTalk != null)
            {
                bot.BotTalk.TrySay(EPhraseTrigger.StartHeal);
            }

            surgery.ApplyToCurrentPart();
            Reset();

            string nickname = bot.Profile?.Info?.Nickname ?? "Unknown";
            Logger.LogDebug("[BotInjurySystem] 🛠 " + nickname + " applied surgery to " + _injuredLimb);
        }

        #endregion
    }
}
