// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Failures in AIRefactored logic must always trigger safe fallback to EFT base AI.
// </auto-generated>

namespace AIRefactored.AI.Helpers
{
    using System.Collections.Generic;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Tracks and exposes active tactical flashlights in the scene.
    /// Used by AI perception systems for flashblindness, evasion, and visual panic triggers.
    /// </summary>
    public static class FlashlightRegistry
    {
        #region Constants

        private const float AngleThreshold = 60f;
        private const float ExposureConeAngle = 35f;
        private const float EyeRayBias = 0.22f;
        private const float IntensityThreshold = 1.5f;
        private const float MaxExposureDistance = 28f;

        #endregion

        #region Static State

        private static readonly List<Light> ActiveLights = new List<Light>(32);
        private static readonly List<Vector3> LastKnownFlashPositions = new List<Vector3>(32);

        #endregion

        #region Public API

        /// <summary>
        /// Scans the scene for active tactical flashlights.
        /// </summary>
        public static IEnumerable<Light> GetActiveFlashlights()
        {
            ActiveLights.Clear();
            LastKnownFlashPositions.Clear();

            Light[] lights = Object.FindObjectsOfType<Light>();
            for (int i = 0; i < lights.Length; i++)
            {
                Light light = lights[i];
                if (IsValidTacticalLight(light))
                {
                    Transform t = light.transform;
                    if (t != null)
                    {
                        ActiveLights.Add(light);
                        LastKnownFlashPositions.Add(t.position);
                    }
                }
            }

            return ActiveLights;
        }

        /// <summary>
        /// Returns the last-known positions of visible flashlights.
        /// </summary>
        public static IReadOnlyList<Vector3> GetLastKnownFlashlightPositions()
        {
            return LastKnownFlashPositions;
        }

        /// <summary>
        /// Determines if any flashlight is currently hitting this bot in the eyes.
        /// </summary>
        public static bool IsExposingBot(Transform botHead, out Light blindingLight, float customMaxDist = MaxExposureDistance)
        {
            blindingLight = null;
            if (botHead == null)
                return false;

            Vector3 eyePos = botHead.position + (Vector3.up * EyeRayBias);

            for (int i = 0; i < ActiveLights.Count; i++)
            {
                Light light = ActiveLights[i];
                if (!IsValidTacticalLight(light))
                    continue;

                Transform lightTransform = light.transform;
                if (lightTransform == null)
                    continue;

                Vector3 toBot = eyePos - lightTransform.position;
                float distance = toBot.magnitude;

                if (distance > customMaxDist)
                    continue;

                float angle = Vector3.Angle(lightTransform.forward, toBot);
                if (angle > ExposureConeAngle)
                    continue;

                Vector3 origin = lightTransform.position;
                Vector3 dir = toBot.normalized;
                float rayLen = distance + 0.1f;

                if (Physics.Raycast(origin, dir, out RaycastHit hit, rayLen, LayerMaskClass.HighPolyWithTerrainMaskAI))
                {
                    if (ReferenceEquals(hit.transform, botHead) || ReferenceEquals(hit.collider.transform, botHead))
                    {
                        blindingLight = light;
                        return true;
                    }
                }
                else if (angle < (ExposureConeAngle * 0.5f) && distance < 4.5f)
                {
                    blindingLight = light;
                    return true;
                }
            }

            return false;
        }

        /// <summary>
        /// Indicates whether any flashlight is flickering (reserved for future upgrades).
        /// </summary>
        public static bool IsFlickeringFlashlightActive()
        {
            return false;
        }

        #endregion

        #region Internal

        private static bool IsValidTacticalLight(Light light)
        {
            return light != null &&
                   light.enabled &&
                   light.type == LightType.Spot &&
                   light.intensity >= IntensityThreshold &&
                   light.spotAngle <= AngleThreshold &&
                   light.gameObject.activeInHierarchy;
        }

        #endregion
    }
}
