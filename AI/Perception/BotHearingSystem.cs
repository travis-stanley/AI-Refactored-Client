// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

namespace AIRefactored.AI.Perception
{
    using System.Collections.Generic;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Helpers;
    using AIRefactored.AI.Memory;
    using AIRefactored.Core;
    using AIRefactored.Pools;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Detects footsteps and gunfire from nearby bots and players, filtered by hearing range.
    /// Ignores self and squadmates based on GroupId.
    /// </summary>
    public sealed class BotHearingSystem
    {
        #region Constants

        private const float BaseHearingRange = 35f;
        private const float TimeWindow = 3f;

        #endregion

        #region Fields

        private BotOwner _bot;
        private BotComponentCache _cache;

        #endregion

        #region Public API

        /// <summary>
        /// Initializes the hearing system with the bot's component cache.
        /// </summary>
        /// <param name="cache">Runtime bot cache.</param>
        public void Initialize(BotComponentCache cache)
        {
            if (cache == null || cache.Bot == null)
            {
                return;
            }

            Player player = cache.Bot.GetPlayer;
            if (!EFTPlayerUtil.IsValid(player))
            {
                return;
            }

            _bot = cache.Bot;
            _cache = cache;
        }

        /// <summary>
        /// Scans for sound cues from nearby players and bots.
        /// </summary>
        /// <param name="deltaTime">Frame time in seconds.</param>
        public void Tick(float deltaTime)
        {
            if (!GameWorldHandler.IsSafeToInitialize || _bot == null || _cache == null)
            {
                return;
            }

            if (!IsActive())
            {
                return;
            }

            Vector3 origin = _bot.Position;
            float rangeSqr = BaseHearingRange * BaseHearingRange;

            List<Player> players = BotMemoryStore.GetNearbyPlayers(origin, BaseHearingRange);
            try
            {
                for (int i = 0; i < players.Count; i++)
                {
                    Player candidate = players[i];
                    if (!IsAudibleSource(candidate, origin, rangeSqr))
                    {
                        continue;
                    }

                    if (HeardSomething(candidate))
                    {
                        Vector3 pos = EFTPlayerUtil.GetPosition(candidate);
                        if (pos.sqrMagnitude > 0.01f)
                        {
                            _cache.RegisterHeardSound(pos);
                        }
                    }
                }
            }
            finally
            {
                TempListPool.Return(players);
            }
        }

        #endregion

        #region Internal Logic

        private bool IsActive()
        {
            return _bot != null &&
                   !_bot.IsDead &&
                   EFTPlayerUtil.IsValid(_bot.GetPlayer) &&
                   _cache.PanicHandler != null &&
                   !_cache.PanicHandler.IsPanicking;
        }

        private bool HeardSomething(Player source)
        {
            return BotSoundUtils.DidFireRecently(_bot, source, 1f, TimeWindow) ||
                   BotSoundUtils.DidStepRecently(_bot, source, 1f, TimeWindow);
        }

        private bool IsAudibleSource(Player candidate, Vector3 origin, float rangeSqr)
        {
            if (!EFTPlayerUtil.IsValid(candidate))
            {
                return false;
            }

            Player self = _bot.GetPlayer;
            if (candidate == self)
            {
                return false;
            }

            if (IsSameGroup(self, candidate))
            {
                return false;
            }

            Vector3 pos = EFTPlayerUtil.GetPosition(candidate);
            return (pos - origin).sqrMagnitude <= rangeSqr;
        }

        private static bool IsSameGroup(Player a, Player b)
        {
            if (a == null || b == null)
            {
                return false;
            }

            string ag = a.Profile?.Info?.GroupId;
            string bg = b.Profile?.Info?.GroupId;

            return !string.IsNullOrEmpty(ag) && ag == bg;
        }

        #endregion
    }
}
