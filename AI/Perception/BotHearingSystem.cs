// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   All hearing, memory, and error logic is bulletproof, null-guarded, pooling-optimized, and multiplayer/headless safe.
//   Realism: Personality-driven hearing, squad filtering, variable auditory delay, and non-robotic scan intervals.
// </auto-generated>

namespace AIRefactored.AI.Perception
{
    using System;
    using System.Collections.Generic;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Helpers;
    using AIRefactored.AI.Memory;
    using AIRefactored.Core;
    using AIRefactored.Pools;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Scans for footsteps and gunfire from bots/players, with human-like delays, personality bias, and squad filtering.
    /// Ignores self and live squadmates; always hears enemies/unknowns.
    /// Bulletproof: all logic is null-safe, multiplayer/headless compatible, error-isolated, pooling-optimized.
    /// </summary>
    public sealed class BotHearingSystem
    {
        #region Constants

        private const float BaseHearingRange = 35f;
        private const float TimeWindow = 3f;
        private const float MinScanJitter = -0.45f;
        private const float MaxScanJitter = 0.75f;
        private const float MinEffectiveRange = 15f;
        private const float MaxEffectiveRange = 55f;

        #endregion

        #region Fields

        private BotOwner _bot;
        private BotComponentCache _cache;
        private float _nextScanTime;
        private float _personalScanJitter;

        #endregion

        #region Public API

        /// <summary>
        /// Initializes the hearing system for the bot.
        /// </summary>
        public void Initialize(BotComponentCache cache)
        {
            if (cache == null || cache.Bot == null)
            {
                Reset();
                return;
            }

            Player player = cache.Bot.GetPlayer;
            if (!EFTPlayerUtil.IsValid(player))
            {
                Reset();
                return;
            }

            _bot = cache.Bot;
            _cache = cache;
            _personalScanJitter = UnityEngine.Random.Range(MinScanJitter, MaxScanJitter);
            _nextScanTime = Time.time + 1f + _personalScanJitter;
        }

        /// <summary>
        /// Main AI update: scans for nearby sound sources using lifelike delays and squad/role logic.
        /// </summary>
        public void Tick(float deltaTime)
        {
            try
            {
                if (!GameWorldHandler.IsSafeToInitialize || _bot == null || _cache == null)
                    return;
                if (!IsActive())
                    return;

                float now = Time.time;
                if (now < _nextScanTime)
                    return;

                float hearingRange = GetEffectiveHearingRange(_bot, _cache);
                _nextScanTime = now + UnityEngine.Random.Range(1.4f, 2.1f) + _personalScanJitter;

                Vector3 origin = _bot.Position;
                float rangeSqr = hearingRange * hearingRange;

                List<Player> players = null;
                try
                {
                    players = BotMemoryStore.GetNearbyPlayers(origin, hearingRange);
                    int count = players != null ? players.Count : 0;

                    for (int i = 0; i < count; i++)
                    {
                        Player candidate = players[i];
                        if (!IsAudibleSource(candidate, origin, rangeSqr))
                            continue;

                        if (HeardSomething(candidate))
                        {
                            Vector3 pos = EFTPlayerUtil.GetPosition(candidate);
                            if (pos.sqrMagnitude > 0.01f)
                            {
                                _cache.RegisterHeardSound(pos);
                            }
                        }
                    }
                }
                finally
                {
                    if (players != null)
                        TempListPool.Return(players);
                }
            }
            catch (Exception ex)
            {
                Plugin.LoggerInstance.LogError($"[BotHearingSystem] Tick exception: {ex}");
                Reset();
            }
        }

        #endregion

        #region Internal Logic

        /// <summary>
        /// Clears and disables the hearing system.
        /// </summary>
        private void Reset()
        {
            _bot = null;
            _cache = null;
            _nextScanTime = 0f;
            _personalScanJitter = 0f;
        }

        /// <summary>
        /// Returns true if the bot and cache are valid, alive, and not panicking.
        /// </summary>
        private bool IsActive()
        {
            return _bot != null
                && !_bot.IsDead
                && EFTPlayerUtil.IsValid(_bot.GetPlayer)
                && _cache != null
                && _cache.PanicHandler != null
                && !_cache.PanicHandler.IsPanicking;
        }

        /// <summary>
        /// True if the candidate fired or stepped recently (using utility).
        /// </summary>
        private bool HeardSomething(Player source)
        {
            return source != null
                && (BotSoundUtils.DidFireRecently(_bot, source, 1f, TimeWindow) ||
                    BotSoundUtils.DidStepRecently(_bot, source, 1f, TimeWindow));
        }

        /// <summary>
        /// Returns true if the candidate is not self, not a squadmate, and within range.
        /// </summary>
        private bool IsAudibleSource(Player candidate, Vector3 origin, float rangeSqr)
        {
            if (!EFTPlayerUtil.IsValid(candidate))
                return false;

            Player self = _bot.GetPlayer;
            if (candidate == self)
                return false;

            if (IsSameActiveSquad(self, candidate))
                return false;

            Vector3 pos = EFTPlayerUtil.GetPosition(candidate);
            return (pos - origin).sqrMagnitude <= rangeSqr;
        }

        /// <summary>
        /// Returns true if both players share an active group ID and candidate is alive.
        /// </summary>
        private static bool IsSameActiveSquad(Player a, Player b)
        {
            if (a == null || b == null)
                return false;

            string ag = a.Profile?.Info?.GroupId;
            string bg = b.Profile?.Info?.GroupId;
            return !string.IsNullOrEmpty(ag) && ag == bg
                && b.HealthController != null && b.HealthController.IsAlive;
        }

        /// <summary>
        /// Calculates effective hearing range using bot's personality profile, stance, and mild environment noise.
        /// </summary>
        private static float GetEffectiveHearingRange(BotOwner bot, BotComponentCache cache)
        {
            float awareness = 0.5f;
            float hearing = 0.5f;
            float caution = 0.5f;
            float stanceBias = 0f;

            var profile = cache.AIRefactoredBotOwner?.PersonalityProfile;
            if (profile != null)
            {
                awareness = Mathf.Clamp01(profile.Awareness);
                hearing = Mathf.Clamp01(profile.HearingBias);
                caution = Mathf.Clamp01(profile.Caution);
                stanceBias = Mathf.Clamp(profile.StanceBias, -1.0f, 2.0f);
            }

            float stanceFactor = 1.0f;
            try
            {
                var movement = bot.GetPlayer?.MovementContext;
                if (movement != null)
                {
                    float pose = movement.PoseLevel;
                    if (pose > 20f && pose < 65f) stanceFactor = 1.1f + 0.1f * stanceBias;
                    else if (pose <= 20f) stanceFactor = 1.05f + 0.1f * stanceBias;
                    else stanceFactor = 1.0f + 0.05f * stanceBias;
                }
            }
            catch { }

            float environmentNoise = UnityEngine.Random.Range(0.93f, 1.04f);

            float range = BaseHearingRange
                * (0.90f + 0.14f * awareness + 0.13f * hearing + 0.09f * caution)
                * stanceFactor
                * environmentNoise;

            return Mathf.Clamp(range, MinEffectiveRange, MaxEffectiveRange);
        }

        #endregion
    }
}
