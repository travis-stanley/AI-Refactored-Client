// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Failures in AIRefactored logic must always trigger safe fallback to EFT base AI.
// </auto-generated>

namespace AIRefactored.AI.Looting
{
    using System;
    using System.Collections.Generic;
    using AIRefactored.AI.Core;
    using AIRefactored.Core;
    using AIRefactored.Pools;
    using AIRefactored.Runtime;
    using EFT;
    using EFT.Interactive;
    using EFT.InventoryLogic;
    using UnityEngine;

    /// <summary>
    /// Scans and prioritizes lootable containers and corpses near the bot.
    /// Supports visibility checks, cooldowns, and value filtering.
    /// All failures are locally isolated; cannot break or cascade into other systems.
    /// </summary>
    public sealed class BotLootScanner
    {
        #region Constants

        private const float ScanInterval = 1.6f;
        private const float LootRadius = 12f;
        private const float HighValueRadius = 24f;
        private const float MaxAngle = 120f;
        private const float CooldownSeconds = 6f;
        private const float StaleResetSeconds = 10f;

        #endregion

        #region Fields

        private readonly Dictionary<string, float> _cooldowns = new Dictionary<string, float>(64);

        private BotOwner _bot;
        private BotComponentCache _cache;

        private float _nextScanTime;
        private float _lastUpdateTime;
        private float _cachedLootValue;

        #endregion

        #region Properties

        /// <summary>
        /// Gets the estimated total loot value around the bot's scanning radius.
        /// </summary>
        public float TotalLootValue => _cachedLootValue;

        #endregion

        #region Initialization

        /// <summary>
        /// Initializes the scanner for the given bot cache.
        /// </summary>
        public void Initialize(BotComponentCache cache)
        {
            try
            {
                if (cache == null || cache.Bot == null)
                {
                    throw new ArgumentException("[BotLootScanner] Invalid initialization: missing cache or bot.");
                }

                _cache = cache;
                _bot = cache.Bot;
            }
            catch (Exception ex)
            {
                Plugin.LoggerInstance.LogError($"[BotLootScanner] Initialize failed: {ex}");
            }
        }

        #endregion

        #region Public Methods

        /// <summary>
        /// Performs loot scanning and interaction logic.
        /// </summary>
        public void Tick(float time)
        {
            try
            {
                if (_bot == null || _bot.IsDead || time < _nextScanTime)
                    return;

                _nextScanTime = time + ScanInterval;

                if (!IsEligibleToLoot())
                    return;

                TryLootNearby();

                _cachedLootValue = CalculateNearbyLootValue();

                if (_cachedLootValue <= 0f && time - _lastUpdateTime > StaleResetSeconds)
                    _cachedLootValue = 0f;

                _lastUpdateTime = time;
            }
            catch (Exception ex)
            {
                Plugin.LoggerInstance.LogError($"[BotLootScanner] Tick failed: {ex}");
            }
        }

        /// <summary>
        /// Finds the highest-value loot position nearby the bot.
        /// </summary>
        public Vector3 GetBestLootPosition()
        {
            try
            {
                if (_bot == null)
                    return Vector3.zero;

                Vector3 origin = _bot.Position;
                Vector3 best = origin;
                float bestValue = 0f;

                List<LootableContainer> containers = LootRegistry.GetAllContainers();
                for (int i = 0; i < containers.Count; i++)
                {
                    LootableContainer container = containers[i];
                    if (container == null || !container.enabled || IsOnCooldown(container.name))
                        continue;

                    Vector3 position = container.transform.position;
                    if (Vector3.Distance(origin, position) > HighValueRadius || !HasLineOfSight(position))
                        continue;

                    float value = EstimateContainerValue(container);
                    if (value > bestValue)
                    {
                        bestValue = value;
                        best = position;
                    }
                }

                return best;
            }
            catch (Exception ex)
            {
                Plugin.LoggerInstance.LogError($"[BotLootScanner] GetBestLootPosition failed: {ex}");
                return Vector3.zero;
            }
        }

        /// <summary>
        /// Attempts to loot containers or loose items within range.
        /// </summary>
        public void TryLootNearby()
        {
            try
            {
                if (_bot == null)
                    return;

                Vector3 origin = _bot.Position;

                LootableContainer corpse = DeadBodyContainerCache.Get(_bot.ProfileId);
                if (corpse != null && corpse.enabled && !IsOnCooldown(corpse.name))
                {
                    Vector3 position = corpse.transform.position;
                    if (Vector3.Distance(origin, position) <= LootRadius && HasLineOfSight(position))
                    {
                        Loot(corpse);
                        return;
                    }
                }

                List<LootableContainer> containers = LootRegistry.GetAllContainers();
                for (int i = 0; i < containers.Count; i++)
                {
                    LootableContainer container = containers[i];
                    if (container != null && container.enabled && !IsOnCooldown(container.name))
                    {
                        Vector3 position = container.transform.position;
                        if (Vector3.Distance(origin, position) <= LootRadius && HasLineOfSight(position))
                        {
                            Loot(container);
                            return;
                        }
                    }
                }

                List<LootItem> items = LootRegistry.GetAllItems();
                for (int i = 0; i < items.Count; i++)
                {
                    LootItem item = items[i];
                    if (item != null && item.enabled && !IsOnCooldown(item.name))
                    {
                        Vector3 position = item.transform.position;
                        if (Vector3.Distance(origin, position) <= LootRadius && HasLineOfSight(position))
                        {
                            MarkCooldown(item.name);
                            _cache.Movement.EnterLootingMode();
                            _cache.Movement.ExitLootingMode();
                            Plugin.LoggerInstance.LogDebug("[BotLootScanner] Picked up item: " + item.name);
                            return;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Plugin.LoggerInstance.LogError($"[BotLootScanner] TryLootNearby failed: {ex}");
            }
        }

        #endregion

        #region Internal Logic

        private bool IsEligibleToLoot()
        {
            try
            {
                return _cache != null &&
                       _cache.PanicHandler != null &&
                       !_cache.PanicHandler.IsPanicking &&
                       _bot != null &&
                       _bot.Memory != null &&
                       _bot.Memory.GoalEnemy == null &&
                       (_bot.EnemiesController == null || _bot.EnemiesController.EnemyInfos.Count == 0);
            }
            catch (Exception ex)
            {
                Plugin.LoggerInstance.LogError($"[BotLootScanner] IsEligibleToLoot failed: {ex}");
                return false;
            }
        }

        private float CalculateNearbyLootValue()
        {
            float sum = 0f;
            try
            {
                Vector3 origin = _bot.Position;
                List<LootableContainer> containers = LootRegistry.GetAllContainers();

                for (int i = 0; i < containers.Count; i++)
                {
                    LootableContainer container = containers[i];
                    if (container != null && container.enabled && Vector3.Distance(origin, container.transform.position) <= LootRadius)
                    {
                        sum += EstimateContainerValue(container);
                    }
                }
            }
            catch (Exception ex)
            {
                Plugin.LoggerInstance.LogError($"[BotLootScanner] CalculateNearbyLootValue failed: {ex}");
            }
            return sum;
        }

        private void Loot(LootableContainer container)
        {
            try
            {
                MarkCooldown(container.name);
                _cache.Movement.EnterLootingMode();
                container.Interact(new InteractionResult(EInteractionType.Open));
                _cache.Movement.ExitLootingMode();
                Plugin.LoggerInstance.LogDebug("[BotLootScanner] Looted container: " + container.name);
            }
            catch (Exception ex)
            {
                Plugin.LoggerInstance.LogError($"[BotLootScanner] Loot failed: {ex}");
            }
        }

        private float EstimateContainerValue(LootableContainer container)
        {
            List<Item> items = null;
            try
            {
                if (container.ItemOwner == null || container.ItemOwner.RootItem == null)
                    return 0f;

                Item root = container.ItemOwner.RootItem;
                float total = 0f;

                items = TempListPool.Rent<Item>();
                root.GetAllItemsNonAlloc(items);

                for (int i = 0; i < items.Count; i++)
                {
                    Item item = items[i];
                    if (item != null && item.Template != null)
                    {
                        float price = item.Template.CreditsPrice;
                        if (price > 0f)
                            total += price;
                    }
                }

                return total;
            }
            catch (Exception ex)
            {
                Plugin.LoggerInstance.LogError($"[BotLootScanner] EstimateContainerValue failed: {ex}");
                return 0f;
            }
            finally
            {
                if (items != null)
                    TempListPool.Return(items);
            }
        }

        private bool HasLineOfSight(Vector3 target)
        {
            try
            {
                Vector3 origin = _bot.WeaponRoot != null ? _bot.WeaponRoot.position : _bot.Position;
                Vector3 direction = target - origin;

                if (_bot.WeaponRoot != null && Vector3.Angle(_bot.WeaponRoot.forward, direction) > MaxAngle)
                    return false;

                float distance = direction.magnitude + 0.3f;
                return Physics.Raycast(origin, direction.normalized, out RaycastHit hit, distance, AIRefactoredLayerMasks.HighPolyWithTerrainMaskAI)
                       && Vector3.Distance(hit.point, target) < 0.4f;
            }
            catch (Exception ex)
            {
                Plugin.LoggerInstance.LogError($"[BotLootScanner] HasLineOfSight failed: {ex}");
                return false;
            }
        }

        private void MarkCooldown(string id)
        {
            try
            {
                if (!string.IsNullOrEmpty(id))
                    _cooldowns[id.Trim()] = Time.time + CooldownSeconds;
            }
            catch (Exception ex)
            {
                Plugin.LoggerInstance.LogError($"[BotLootScanner] MarkCooldown failed: {ex}");
            }
        }

        private bool IsOnCooldown(string id)
        {
            try
            {
                if (string.IsNullOrEmpty(id))
                    return true;

                float expires;
                return _cooldowns.TryGetValue(id.Trim(), out expires) && Time.time < expires;
            }
            catch (Exception ex)
            {
                Plugin.LoggerInstance.LogError($"[BotLootScanner] IsOnCooldown failed: {ex}");
                return true;
            }
        }

        #endregion
    }
}
