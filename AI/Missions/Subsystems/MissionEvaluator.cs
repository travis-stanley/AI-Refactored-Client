// <auto-generated>
//   AI-Refactored: MissionEvaluator.cs (Beyond Diamond Realism Edition, Full Fix Plan Applied)
//   Bulletproof: No fallback logic. All navigation and stuck correction failures are locally contained and only log or skip.
//   MIT License.
// </auto-generated>

namespace AIRefactored.AI.Missions.Subsystems
{
    using System;
    using System.Collections.Generic;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Groups;
    using AIRefactored.AI.Helpers;
    using AIRefactored.AI.Navigation;
    using AIRefactored.Core;
    using AIRefactored.Pools;
    using AIRefactored.Runtime;
    using BepInEx.Logging;
    using EFT;
    using EFT.Interactive;
    using EFT.InventoryLogic;
    using UnityEngine;
    using UnityEngine.AI;

    public sealed class MissionEvaluator
    {
        #region Constants

        private const int LootItemCountThreshold = 40;
        private const float SquadCohesionRange = 10f;
        private const float StuckCooldown = 30f;
        private const float StuckDuration = 25f;
        private const float MinMoveThreshold = 0.3f;

        #endregion

        #region Fields

        private static readonly ManualLogSource Logger = Plugin.LoggerInstance;

        private readonly BotOwner _bot;
        private readonly BotComponentCache _cache;
        private readonly BotGroupSyncCoordinator _group;
        private readonly BotPersonalityProfile _profile;

        private int _fallbackAttempts;
        private float _lastMoveTime;
        private float _stuckSince;
        private float _lastStuckFallbackTime;
        private Vector3 _lastPos;

        #endregion

        #region Constructor

        public MissionEvaluator(BotOwner bot, BotComponentCache cache)
        {
            if (!EFTPlayerUtil.IsValidBotOwner(bot) || cache == null)
            {
                Logger.LogError("[MissionEvaluator] Invalid bot or cache. Disabling mission evaluation for this bot.");
                throw new ArgumentException("[MissionEvaluator] Invalid bot or cache.");
            }

            _bot = bot;
            _cache = cache;
            _profile = BotRegistry.Get(bot.ProfileId);
            _group = BotCacheUtility.GetGroupSync(cache);
            _lastPos = EFTPlayerUtil.GetPosition(bot);
            _lastMoveTime = Time.time;
        }

        #endregion

        #region Mission Checks

        public bool IsGroupAligned()
        {
            try
            {
                if (_group == null)
                    return true;

                IReadOnlyList<BotOwner> squad = _group.GetTeammates();
                if (squad == null || squad.Count == 0)
                    return true;

                int nearby = 0;
                Vector3 selfPos = EFTPlayerUtil.GetPosition(_bot);
                float sqrRange = SquadCohesionRange * SquadCohesionRange;

                for (int i = 0; i < squad.Count; i++)
                {
                    BotOwner mate = squad[i];
                    if (mate != null && !mate.IsDead && (EFTPlayerUtil.GetPosition(mate) - selfPos).sqrMagnitude <= sqrRange)
                        nearby++;
                }

                int required = Mathf.CeilToInt(squad.Count * 0.6f);
                return nearby >= required;
            }
            catch (Exception ex)
            {
                Logger.LogError($"[MissionEvaluator] IsGroupAligned failed: {ex}");
                return true;
            }
        }

        public bool ShouldExtractEarly()
        {
            try
            {
                if (_profile == null || _profile.IsFrenzied || _profile.Caution <= 0.6f)
                    return false;

                Player player = _bot.GetPlayer;
                if (player?.Inventory?.Equipment == null)
                    return false;

                Slot backpackSlot = player.Inventory.Equipment.GetSlot(EquipmentSlot.Backpack);
                if (backpackSlot?.ContainedItem == null)
                    return false;

                List<Item> items = TempListPool.Rent<Item>();
                try
                {
                    backpackSlot.ContainedItem.GetAllItemsNonAlloc(items);
                    float fullness = (float)items.Count / LootItemCountThreshold;
                    return fullness >= _profile.RetreatThreshold;
                }
                finally
                {
                    TempListPool.Return(items);
                }
            }
            catch (Exception ex)
            {
                Logger.LogError($"[MissionEvaluator] ShouldExtractEarly failed: {ex}");
                return false;
            }
        }

        public void TryExtract()
        {
            try
            {
                ExfiltrationPoint[] allPoints = GameObject.FindObjectsOfType<ExfiltrationPoint>();
                if (allPoints == null || allPoints.Length == 0)
                    return;

                ExfiltrationPoint closest = null;
                float minDist = float.MaxValue;
                Vector3 myPos = EFTPlayerUtil.GetPosition(_bot);

                for (int i = 0; i < allPoints.Length; i++)
                {
                    ExfiltrationPoint point = allPoints[i];
                    if (point != null && point.Status == EExfiltrationStatus.RegularMode)
                    {
                        float dist = (point.transform.position - myPos).sqrMagnitude;
                        if (dist < minDist)
                        {
                            minDist = dist;
                            closest = point;
                        }
                    }
                }

                if (closest != null && _bot.Mover != null)
                {
                    if (NavMesh.SamplePosition(closest.transform.position, out NavMeshHit hit, 1.0f, AIRefactoredLayerMasks.NavMeshAll))
                    {
                        // PATCH: Fallback retry logic per fix plan
                        if (BotNavHelper.IsAtDestination(_bot) || BotMovementHelper.IsStuckAtTarget(_bot))
                            BotMovementHelper.ForceFallbackMove(_bot);
                        else
                            BotMovementHelper.SmoothMoveTo(_bot, hit.position);
                        Say(EPhraseTrigger.ExitLocated);
                    }
                }
            }
            catch (Exception ex)
            {
                Logger.LogWarning("[MissionEvaluator] Extraction failed: " + ex.Message);
            }
        }

        #endregion

        #region Stuck Detection

        public void UpdateStuckCheck(float time)
        {
            try
            {
                Vector3 current = EFTPlayerUtil.GetPosition(_bot);
                float moved = Vector3.Distance(current, _lastPos);

                if (moved > MinMoveThreshold)
                {
                    _lastPos = current;
                    _lastMoveTime = time;
                    _fallbackAttempts = 0;
                    return;
                }

                bool cooldownPassed = time - _stuckSince > StuckCooldown;
                bool stuckLongEnough = time - _lastMoveTime > StuckDuration;
                bool notRecentlyFellback = time - _lastStuckFallbackTime > StuckCooldown;

                if (stuckLongEnough && cooldownPassed && notRecentlyFellback && _fallbackAttempts < 2)
                {
                    _stuckSince = time;
                    _lastStuckFallbackTime = time;
                    _fallbackAttempts++;

                    if (BotNavHelper.TryGetSafeTarget(_bot, out Vector3 candidate) && _bot.Mover != null)
                    {
                        if (NavMesh.SamplePosition(candidate, out NavMeshHit hit, 1.0f, AIRefactoredLayerMasks.NavMeshAll))
                        {
                            BotMovementHelper.SmoothMoveTo(_bot, hit.position);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Logger.LogError($"[MissionEvaluator] UpdateStuckCheck failed: {ex}");
            }
        }

        #endregion

        #region Utilities

        private void Say(EPhraseTrigger phrase)
        {
            try
            {
                if (!FikaHeadlessDetector.IsHeadless && _bot?.BotTalk != null)
                {
                    _bot.BotTalk.TrySay(phrase);
                }
            }
            catch (Exception ex)
            {
                Logger.LogWarning("[MissionEvaluator] VO failed: " + ex.Message);
            }
        }

        #endregion
    }
}
