// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

namespace AIRefactored.AI.Reactions
{
    using AIRefactored.AI.Combat;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Helpers;
    using AIRefactored.AI.Optimization;
    using AIRefactored.Core;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Handles bot reactions to intense light exposure (e.g., flashlights or flashbangs).
    /// Applies suppression, triggers scored fallback movement, and panic if threshold reached.
    /// </summary>
    public sealed class BotFlashReactionComponent
    {
        #region Constants

        private const float FallbackDistance = 5f;
        private const float FallbackJitter = 1.25f;
        private const float MaxSuppressionDuration = 5f;
        private const float MinSuppressionDuration = 1f;
        private const float ReactionCooldown = 0.5f;
        private const float TriggerIntensityThreshold = 0.35f;

        #endregion

        #region Fields

        private BotComponentCache _cache;
        private float _lastTriggerTime = -1f;
        private float _suppressedUntil = -1f;

        #endregion

        #region Initialization

        /// <summary>
        /// Links this flash reaction handler to the active bot's shared component cache.
        /// </summary>
        public void Initialize(BotComponentCache cache)
        {
            _cache = cache ?? throw new System.ArgumentNullException(nameof(cache));
        }

        #endregion

        #region Runtime

        /// <summary>
        /// Returns true if the bot is still suppressed from a flash reaction.
        /// </summary>
        public bool IsSuppressed()
        {
            return Time.time < _suppressedUntil;
        }

        /// <summary>
        /// Called every frame from BotBrain. Updates suppression state and performs exposure checks.
        /// </summary>
        public void Tick(float time)
        {
            if (_cache == null || _cache.Bot == null)
            {
                return;
            }

            if (time >= _suppressedUntil)
            {
                _suppressedUntil = -1f;
            }

            Transform head = BotCacheUtility.Head(_cache);
            if (head == null)
            {
                return;
            }

            var lights = FlashlightRegistry.GetLastKnownFlashlightPositions();
            for (int i = 0; i < lights.Count; i++)
            {
                if (FlashlightRegistry.IsExposingBot(head, out Light light) && light != null)
                {
                    float score = FlashLightUtils.CalculateFlashScore(light.transform, head, 20f);
                    if (score >= TriggerIntensityThreshold)
                    {
                        TriggerSuppression(score);
                        return;
                    }
                }
            }
        }

        /// <summary>
        /// Triggers suppression, fallback, and panic based on light strength and composure.
        /// </summary>
        public void TriggerSuppression(float strength = 0.6f)
        {
            if (_cache == null || _cache.Bot == null)
            {
                return;
            }

            BotOwner bot = _cache.Bot;
            if (bot.IsDead)
            {
                return;
            }

            Player player = bot.GetPlayer;
            if (player == null || !player.IsAI || player.IsYourPlayer)
            {
                return;
            }

            float now = Time.time;
            if (now - _lastTriggerTime < ReactionCooldown)
            {
                return;
            }

            _lastTriggerTime = now;

            float composure = 1f;
            if (_cache.PanicHandler != null)
            {
                composure = _cache.PanicHandler.GetComposureLevel();
            }

            float scaled = Mathf.Clamp01(strength) * composure;
            float duration = Mathf.Lerp(MinSuppressionDuration, MaxSuppressionDuration, scaled);
            _suppressedUntil = now + duration;

            TriggerFallback(bot);
            TriggerPanic(_cache);
        }

        #endregion

        #region Helpers

        private static void TriggerFallback(BotOwner bot)
        {
            Vector3 dir = bot.LookDirection;
            Vector3? retreat = HybridFallbackResolver.GetBestRetreatPoint(bot, dir);

            if (retreat.HasValue)
            {
                BotMovementHelper.SmoothMoveTo(bot, retreat.Value);
                return;
            }

            Vector3 lateral = new Vector3(-dir.x, 0f, -dir.z).normalized;
            Vector3 fallback = bot.Position + lateral * FallbackDistance + Random.insideUnitSphere * FallbackJitter;
            fallback.y = bot.Position.y;

            BotMovementHelper.SmoothMoveTo(bot, fallback);
        }

        private static void TriggerPanic(BotComponentCache cache)
        {
            if (BotPanicUtility.TryGetPanicComponent(cache, out BotPanicHandler panic))
            {
                panic.TriggerPanic();
            }
        }

        #endregion
    }
}
