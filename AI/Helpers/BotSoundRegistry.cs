// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Failures in AIRefactored logic must always trigger safe fallback to EFT base AI.
// </auto-generated>

namespace AIRefactored.AI.Helpers
{
    using System.Collections.Generic;
    using AIRefactored.AI.Core;
    using AIRefactored.Core;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Central registry for gunfire and footstep timestamps and locations.
    /// Bots use this for directional awareness, hearing checks, and zone-based escalation.
    /// </summary>
    public static class BotSoundRegistry
    {
        #region Constants

        private const float DefaultHearingRadius = 30f;

        #endregion

        #region Fields

        private static readonly Dictionary<string, float> FootstepTimestamps = new Dictionary<string, float>(64);
        private static readonly Dictionary<string, float> ShotTimestamps = new Dictionary<string, float>(64);
        private static readonly Dictionary<string, Vector3> SoundZones = new Dictionary<string, Vector3>(64);

        #endregion

        #region Public API

        public static void Clear()
        {
            FootstepTimestamps.Clear();
            ShotTimestamps.Clear();
            SoundZones.Clear();
        }

        public static bool FiredRecently(Player player, float withinSeconds = 1.5f, float now = -1f)
        {
            return TryGetLastShot(player, out float time) &&
                   ((now >= 0f ? now : Time.time) - time <= withinSeconds);
        }

        public static bool SteppedRecently(Player player, float withinSeconds = 1.2f, float now = -1f)
        {
            return TryGetLastStep(player, out float time) &&
                   ((now >= 0f ? now : Time.time) - time <= withinSeconds);
        }

        public static void NotifyShot(Player player)
        {
            if (!EFTPlayerUtil.IsValid(player))
                return;

            string id = player.ProfileId;
            if (string.IsNullOrEmpty(id))
                return;

            ShotTimestamps[id] = Time.time;

            Transform transform = player.Transform?.Original;
            if (transform == null)
                return;

            Vector3 pos = transform.position;
            SoundZones[id] = pos;

            TriggerSquadPing(id, pos, true);
        }

        public static void NotifyStep(Player player)
        {
            if (!EFTPlayerUtil.IsValid(player))
                return;

            string id = player.ProfileId;
            if (string.IsNullOrEmpty(id))
                return;

            FootstepTimestamps[id] = Time.time;

            Transform transform = player.Transform?.Original;
            if (transform == null)
                return;

            Vector3 pos = transform.position;
            SoundZones[id] = pos;

            TriggerSquadPing(id, pos, false);
        }

        public static bool TryGetLastShot(Player player, out float time)
        {
            time = -1f;

            if (!EFTPlayerUtil.IsValid(player))
                return false;

            string id = player.ProfileId;
            return !string.IsNullOrEmpty(id) && ShotTimestamps.TryGetValue(id, out time);
        }

        public static bool TryGetLastStep(Player player, out float time)
        {
            time = -1f;

            if (!EFTPlayerUtil.IsValid(player))
                return false;

            string id = player.ProfileId;
            return !string.IsNullOrEmpty(id) && FootstepTimestamps.TryGetValue(id, out time);
        }

        public static bool TryGetSoundPosition(Player player, out Vector3 pos)
        {
            pos = Vector3.zero;

            if (!EFTPlayerUtil.IsValid(player))
                return false;

            string id = player.ProfileId;
            return !string.IsNullOrEmpty(id) && SoundZones.TryGetValue(id, out pos);
        }

        #endregion

        #region Private Helpers

        private static void TriggerSquadPing(string sourceId, Vector3 location, bool isGunshot)
        {
            float radiusSq = DefaultHearingRadius * DefaultHearingRadius;

            foreach (BotComponentCache cache in BotCacheUtility.AllActiveBots())
            {
                if (cache?.Bot == null || cache.Bot.IsDead)
                    continue;

                string id = cache.Bot.ProfileId;
                if (string.Equals(id, sourceId))
                    continue;

                Vector3 pos = cache.Bot.Position;
                float dx = pos.x - location.x;
                float dy = pos.y - location.y;
                float dz = pos.z - location.z;
                float distSq = (dx * dx) + (dy * dy) + (dz * dz);

                if (distSq > radiusSq)
                    continue;

                cache.RegisterHeardSound(location);

                if (cache.GroupComms != null)
                {
                    if (isGunshot)
                        cache.GroupComms.SaySuppression();
                    else
                        cache.GroupComms.SayFallback();
                }
            }
        }

        #endregion
    }
}
