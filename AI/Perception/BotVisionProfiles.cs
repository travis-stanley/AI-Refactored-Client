// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

namespace AIRefactored.AI.Perception
{
    using System.Collections.Generic;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Helpers;
    using AIRefactored.Core;
    using AIRefactored.Pools;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Provides vision profiles per <see cref="WildSpawnType"/>, with optional personality scaling.
    /// Used to simulate flash/flare/suppression resistance and light reactivity.
    /// </summary>
    public static class BotVisionProfiles
    {
        #region Static Defaults

        private static readonly BotVisionProfile DefaultProfile = BotVisionProfile.CreateDefault();
        private static readonly Dictionary<WildSpawnType, BotVisionProfile> Profiles = InitializeProfiles();

        #endregion

        #region Public API

        /// <summary>
        /// Retrieves the bot vision profile, applying role-based defaults and optional personality blending.
        /// </summary>
        public static BotVisionProfile Get(Player bot)
        {
            if (!EFTPlayerUtil.IsValid(bot))
            {
                return DefaultProfile;
            }

            WildSpawnType role = bot.Profile?.Info?.Settings?.Role ?? WildSpawnType.assault;

            BotVisionProfile baseProfile;
            if (!Profiles.TryGetValue(role, out baseProfile))
            {
                baseProfile = DefaultProfile;
            }

            BotComponentCache cache = BotCacheUtility.GetCache(bot);
            if (cache == null || cache.AIRefactoredBotOwner == null)
            {
                return baseProfile;
            }

            BotPersonalityProfile personality = cache.AIRefactoredBotOwner.PersonalityProfile;
            if (personality == null)
            {
                return baseProfile;
            }

            return new BotVisionProfile
            {
                AdaptationSpeed = Mathf.Clamp(baseProfile.AdaptationSpeed + (1f - personality.Caution) * 0.5f, 0.5f, 3f),
                MaxBlindness = Mathf.Clamp(baseProfile.MaxBlindness + (1f - personality.RiskTolerance) * 0.4f, 0.5f, 2f),
                LightSensitivity = Mathf.Clamp(baseProfile.LightSensitivity + personality.Caution * 0.5f, 0.3f, 2f),
                AggressionResponse = Mathf.Clamp(baseProfile.AggressionResponse + personality.AggressionLevel * 0.5f, 0.5f, 3f),
                ClarityRecoverySpeed = Mathf.Clamp(baseProfile.ClarityRecoverySpeed + (1f - personality.Caution) * 0.3f, 0.1f, 1f)
            };
        }

        #endregion

        #region Static Initialization

        private static Dictionary<WildSpawnType, BotVisionProfile> InitializeProfiles()
        {
            Dictionary<WildSpawnType, BotVisionProfile> temp = TempDictionaryPool.Rent<WildSpawnType, BotVisionProfile>();
            Dictionary<WildSpawnType, BotVisionProfile> result = new Dictionary<WildSpawnType, BotVisionProfile>(32);

            temp[WildSpawnType.assault] = new BotVisionProfile { AdaptationSpeed = 0.75f, LightSensitivity = 1.2f, AggressionResponse = 0.9f, MaxBlindness = 1.1f, ClarityRecoverySpeed = 0.35f };
            temp[WildSpawnType.cursedAssault] = new BotVisionProfile { AdaptationSpeed = 0.7f, LightSensitivity = 1.4f, AggressionResponse = 1.0f, MaxBlindness = 1.2f, ClarityRecoverySpeed = 0.3f };
            temp[WildSpawnType.marksman] = new BotVisionProfile { AdaptationSpeed = 1f, LightSensitivity = 1f, AggressionResponse = 1.1f, MaxBlindness = 1.1f, ClarityRecoverySpeed = 0.4f };
            temp[WildSpawnType.sectantPriest] = new BotVisionProfile { AdaptationSpeed = 0.5f, LightSensitivity = 1.5f, AggressionResponse = 0.5f, MaxBlindness = 1.3f, ClarityRecoverySpeed = 0.25f };
            temp[WildSpawnType.sectantWarrior] = new BotVisionProfile { AdaptationSpeed = 0.6f, LightSensitivity = 1.5f, AggressionResponse = 0.8f, MaxBlindness = 1.3f, ClarityRecoverySpeed = 0.3f };
            temp[WildSpawnType.pmcBot] = new BotVisionProfile { AdaptationSpeed = 2f, LightSensitivity = 0.85f, AggressionResponse = 1.4f, MaxBlindness = 0.8f, ClarityRecoverySpeed = 0.5f };
            temp[WildSpawnType.exUsec] = new BotVisionProfile { AdaptationSpeed = 1.9f, LightSensitivity = 0.85f, AggressionResponse = 1.4f, MaxBlindness = 0.85f, ClarityRecoverySpeed = 0.45f };
            temp[WildSpawnType.bossBully] = new BotVisionProfile { AdaptationSpeed = 1.3f, LightSensitivity = 1f, AggressionResponse = 2f, MaxBlindness = 1f, ClarityRecoverySpeed = 0.55f };
            temp[WildSpawnType.followerBully] = new BotVisionProfile { AdaptationSpeed = 1.1f, LightSensitivity = 1f, AggressionResponse = 1.7f, MaxBlindness = 1f, ClarityRecoverySpeed = 0.45f };
            temp[WildSpawnType.bossKilla] = new BotVisionProfile { AdaptationSpeed = 1.6f, LightSensitivity = 0.7f, AggressionResponse = 2.5f, MaxBlindness = 0.9f, ClarityRecoverySpeed = 0.5f };
            temp[WildSpawnType.bossTagilla] = new BotVisionProfile { AdaptationSpeed = 1.5f, LightSensitivity = 0.9f, AggressionResponse = 2.2f, MaxBlindness = 0.95f, ClarityRecoverySpeed = 0.4f };
            temp[WildSpawnType.followerTagilla] = new BotVisionProfile { AdaptationSpeed = 1.2f, LightSensitivity = 1f, AggressionResponse = 1.6f, MaxBlindness = 1f, ClarityRecoverySpeed = 0.45f };
            temp[WildSpawnType.bossSanitar] = new BotVisionProfile { AdaptationSpeed = 1.4f, LightSensitivity = 0.95f, AggressionResponse = 2f, MaxBlindness = 0.95f, ClarityRecoverySpeed = 0.5f };
            temp[WildSpawnType.followerSanitar] = new BotVisionProfile { AdaptationSpeed = 1.3f, LightSensitivity = 1f, AggressionResponse = 1.7f, MaxBlindness = 1f, ClarityRecoverySpeed = 0.45f };
            temp[WildSpawnType.bossGluhar] = new BotVisionProfile { AdaptationSpeed = 1.4f, LightSensitivity = 1f, AggressionResponse = 2.2f, MaxBlindness = 1f, ClarityRecoverySpeed = 0.55f };
            temp[WildSpawnType.followerGluharAssault] = new BotVisionProfile { AdaptationSpeed = 1.2f, LightSensitivity = 1f, AggressionResponse = 1.5f, MaxBlindness = 1f, ClarityRecoverySpeed = 0.5f };
            temp[WildSpawnType.followerGluharScout] = new BotVisionProfile { AdaptationSpeed = 1.3f, LightSensitivity = 1f, AggressionResponse = 1.7f, MaxBlindness = 1f, ClarityRecoverySpeed = 0.5f };
            temp[WildSpawnType.followerGluharSecurity] = new BotVisionProfile { AdaptationSpeed = 1.1f, LightSensitivity = 1.1f, AggressionResponse = 1.6f, MaxBlindness = 1f, ClarityRecoverySpeed = 0.45f };
            temp[WildSpawnType.followerGluharSnipe] = new BotVisionProfile { AdaptationSpeed = 1f, LightSensitivity = 1.1f, AggressionResponse = 1.4f, MaxBlindness = 1f, ClarityRecoverySpeed = 0.4f };
            temp[WildSpawnType.bossKnight] = new BotVisionProfile { AdaptationSpeed = 1.5f, LightSensitivity = 1f, AggressionResponse = 2f, MaxBlindness = 0.9f, ClarityRecoverySpeed = 0.5f };
            temp[WildSpawnType.followerBigPipe] = new BotVisionProfile { AdaptationSpeed = 1.2f, LightSensitivity = 1f, AggressionResponse = 1.8f, MaxBlindness = 0.95f, ClarityRecoverySpeed = 0.45f };
            temp[WildSpawnType.followerBirdEye] = new BotVisionProfile { AdaptationSpeed = 1.2f, LightSensitivity = 1.1f, AggressionResponse = 1.6f, MaxBlindness = 1f, ClarityRecoverySpeed = 0.5f };
            temp[WildSpawnType.gifter] = new BotVisionProfile { AdaptationSpeed = 1f, LightSensitivity = 0.8f, AggressionResponse = 0.5f, MaxBlindness = 1.1f, ClarityRecoverySpeed = 0.3f };
            temp[WildSpawnType.arenaFighter] = new BotVisionProfile { AdaptationSpeed = 1.3f, LightSensitivity = 1f, AggressionResponse = 1.5f, MaxBlindness = 0.95f, ClarityRecoverySpeed = 0.45f };

            foreach (KeyValuePair<WildSpawnType, BotVisionProfile> kvp in temp)
            {
                result[kvp.Key] = kvp.Value;
            }

            TempDictionaryPool.Return(temp);
            return result;
        }

        #endregion
    }
}
