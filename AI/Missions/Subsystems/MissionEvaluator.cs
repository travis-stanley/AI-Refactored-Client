// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Bulletproof: No fallback logic. All navigation and stuck correction failures are locally contained and only log or skip.
// </auto-generated>

namespace AIRefactored.AI.Missions.Subsystems
{
    using System;
    using System.Collections.Generic;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Groups;
    using AIRefactored.AI.Helpers;
    using AIRefactored.AI.Navigation;
    using AIRefactored.Core;
    using AIRefactored.Pools;
    using AIRefactored.Runtime;
    using BepInEx.Logging;
    using EFT;
    using EFT.Interactive;
    using EFT.InventoryLogic;
    using UnityEngine;

    /// <summary>
    /// Evaluates combat, squad cohesion, loot status, and fallback triggers to adjust bot missions.
    /// All failures are locally isolated; cannot break or cascade into other systems.
    /// </summary>
    public sealed class MissionEvaluator
    {
        #region Constants

        private const int LootItemCountThreshold = 40;
        private const float SquadCohesionRange = 10f;
        private const float StuckCooldown = 30f;
        private const float StuckDuration = 25f;
        private const float MinMoveThreshold = 0.3f;

        #endregion

        #region Fields

        private static readonly ManualLogSource Logger = Plugin.LoggerInstance;

        private readonly BotOwner _bot;
        private readonly BotComponentCache _cache;
        private readonly BotGroupSyncCoordinator _group;
        private readonly BotPersonalityProfile _profile;

        private int _fallbackAttempts;
        private float _lastMoveTime;
        private float _stuckSince;
        private float _lastStuckFallbackTime;
        private Vector3 _lastPos;

        #endregion

        #region Constructor

        public MissionEvaluator(BotOwner bot, BotComponentCache cache)
        {
            if (!EFTPlayerUtil.IsValidBotOwner(bot) || cache == null)
            {
                Logger.LogError("[MissionEvaluator] Invalid bot or cache. Disabling mission evaluation for this bot.");
                throw new ArgumentException("[MissionEvaluator] Invalid bot or cache.");
            }

            _bot = bot;
            _cache = cache;
            _profile = BotRegistry.Get(bot.ProfileId);
            _group = BotCacheUtility.GetGroupSync(cache);
            _lastPos = bot.Position;
            _lastMoveTime = Time.time;
        }

        #endregion

        #region Mission Checks

        /// <summary>
        /// Returns true if enough squadmates are nearby for the bot to consider group actions.
        /// </summary>
        public bool IsGroupAligned()
        {
            try
            {
                if (_group == null)
                    return true;

                IReadOnlyList<BotOwner> squad = _group.GetTeammates();
                if (squad == null || squad.Count == 0)
                    return true;

                int nearby = 0;
                Vector3 selfPos = _bot.Position;
                float sqrRange = SquadCohesionRange * SquadCohesionRange;

                for (int i = 0; i < squad.Count; i++)
                {
                    BotOwner mate = squad[i];
                    if (mate != null && !mate.IsDead && (mate.Position - selfPos).sqrMagnitude <= sqrRange)
                        nearby++;
                }

                int required = Mathf.CeilToInt(squad.Count * 0.6f);
                return nearby >= required;
            }
            catch (Exception ex)
            {
                Logger.LogError($"[MissionEvaluator] IsGroupAligned failed: {ex}");
                return true;
            }
        }

        /// <summary>
        /// Returns true if the bot's loot threshold and profile suggest early extraction is best.
        /// </summary>
        public bool ShouldExtractEarly()
        {
            try
            {
                if (_profile == null || _profile.IsFrenzied || _profile.Caution <= 0.6f)
                    return false;

                Player player = _bot.GetPlayer;
                if (player?.Inventory?.Equipment == null)
                    return false;

                Slot backpackSlot = player.Inventory.Equipment.GetSlot(EquipmentSlot.Backpack);
                if (backpackSlot?.ContainedItem == null)
                    return false;

                List<Item> items = TempListPool.Rent<Item>();
                try
                {
                    backpackSlot.ContainedItem.GetAllItemsNonAlloc(items);
                    float fullness = (float)items.Count / LootItemCountThreshold;
                    return fullness >= _profile.RetreatThreshold;
                }
                finally
                {
                    TempListPool.Return(items);
                }
            }
            catch (Exception ex)
            {
                Logger.LogError($"[MissionEvaluator] ShouldExtractEarly failed: {ex}");
                return false;
            }
        }

        /// <summary>
        /// Attempts to extract the bot by sending it to the nearest valid extraction point, using validated, path-based helpers only.
        /// Never directly sets position; all navigation uses movement helpers.
        /// </summary>
        public void TryExtract()
        {
            try
            {
                ExfiltrationPoint[] allPoints = GameObject.FindObjectsOfType<ExfiltrationPoint>();
                if (allPoints == null || allPoints.Length == 0)
                    return;

                ExfiltrationPoint closest = null;
                float minDist = float.MaxValue;
                Vector3 myPos = _bot.Position;

                for (int i = 0; i < allPoints.Length; i++)
                {
                    ExfiltrationPoint point = allPoints[i];
                    if (point != null && point.Status == EExfiltrationStatus.RegularMode)
                    {
                        float dist = (point.transform.position - myPos).sqrMagnitude;
                        if (dist < minDist)
                        {
                            minDist = dist;
                            closest = point;
                        }
                    }
                }

                if (closest != null && _bot.Mover != null)
                {
                    // Always validate and move via helper—never direct position set or teleport!
                    if (BotNavHelper.TryGetSafeTarget(_bot, out Vector3 safeTarget))
                    {
                        BotMovementHelper.SmoothMoveTo(_bot, safeTarget);
                        Say(EPhraseTrigger.ExitLocated);
                    }
                }
            }
            catch (Exception ex)
            {
                Logger.LogWarning("[MissionEvaluator] Extraction failed: " + ex.Message);
            }
        }

        #endregion

        #region Stuck Detection

        /// <summary>
        /// Detects if the bot is stuck and triggers a short, human-like fallback movement if so.
        /// Never teleports or forces invalid positions; always uses path-based movement helpers.
        /// </summary>
        public void UpdateStuckCheck(float time)
        {
            try
            {
                float moved = Vector3.Distance(_bot.Position, _lastPos);

                if (moved > MinMoveThreshold)
                {
                    _lastPos = _bot.Position;
                    _lastMoveTime = time;
                    _fallbackAttempts = 0;
                    return;
                }

                bool cooldownPassed = time - _stuckSince > StuckCooldown;
                bool stuckLongEnough = time - _lastMoveTime > StuckDuration;
                bool notRecentlyFellback = time - _lastStuckFallbackTime > StuckCooldown;

                if (stuckLongEnough && cooldownPassed && notRecentlyFellback && _fallbackAttempts < 2)
                {
                    _stuckSince = time;
                    _lastStuckFallbackTime = time;
                    _fallbackAttempts++;

                    // Validate fallback via BotNavHelper—never use raw or invalid vectors.
                    if (BotNavHelper.TryGetSafeTarget(_bot, out Vector3 safeTarget))
                    {
                        if (_bot.Mover != null)
                        {
                            BotMovementHelper.SmoothMoveTo(_bot, safeTarget);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Logger.LogError($"[MissionEvaluator] UpdateStuckCheck failed: {ex}");
            }
        }

        #endregion

        #region Utilities

        /// <summary>
        /// Plays an in-character phrase if not in headless mode and bot is valid.
        /// </summary>
        private void Say(EPhraseTrigger phrase)
        {
            try
            {
                if (!FikaHeadlessDetector.IsHeadless && _bot?.BotTalk != null)
                {
                    _bot.BotTalk.TrySay(phrase);
                }
            }
            catch (Exception ex)
            {
                Logger.LogWarning("[MissionEvaluator] VO failed: " + ex.Message);
            }
        }

        #endregion
    }
}
