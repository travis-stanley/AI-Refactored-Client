// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Failures in AIRefactored logic must always trigger safe fallback to EFT base AI.
// </auto-generated>

namespace AIRefactored.AI.Movement
{
    using System;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Helpers;
    using AIRefactored.AI.Memory;
    using AIRefactored.AI.Navigation;
    using AIRefactored.Core;
    using AIRefactored.Pools;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Controls bot stance transitions (standing, crouching, prone) based on combat, panic, suppression, and cover logic.
    /// Smoothly blends transitions for realistic animation flow.
    /// </summary>
    public sealed class BotPoseController
    {
        #region Constants

        private const float FlankAngleThreshold = 120f;
        private const float MinPoseThreshold = 0.1f;
        private const float PoseBlendSpeedBase = 140f;
        private const float PoseCheckInterval = 0.3f;
        private const float SuppressionCrouchDuration = 2.5f;
        private const float CrouchPose = 50f;
        private const float PronePose = 0f;
        private const float StandPose = 100f;

        #endregion

        #region Fields

        private readonly BotOwner _bot;
        private readonly BotComponentCache _cache;
        private readonly MovementContext _movement;
        private readonly BotPersonalityProfile _personality;

        private float _currentPoseLevel;
        private float _targetPoseLevel;
        private float _nextPoseCheckTime;
        private float _lastTickTime;
        private float _suppressedUntil;
        private bool _isLocked;

        #endregion

        #region Constructor

        /// <summary>
        /// Creates a new BotPoseController with strict null-safety and correct references.
        /// </summary>
        public BotPoseController(BotOwner bot, BotComponentCache cache)
        {
            if (!EFTPlayerUtil.IsValidBotOwner(bot) || cache == null || cache.PersonalityProfile == null)
                throw new ArgumentException("[BotPoseController] Invalid initialization.");

            MovementContext movement = bot.GetPlayer?.MovementContext;
            if (movement == null)
                throw new ArgumentException("[BotPoseController] Missing MovementContext.");

            _bot = bot;
            _cache = cache;
            _movement = movement;
            _personality = cache.PersonalityProfile;

            _currentPoseLevel = _movement.PoseLevel;
            _targetPoseLevel = _currentPoseLevel;
            _lastTickTime = Time.time;
            _nextPoseCheckTime = _lastTickTime;
        }

        #endregion

        #region Public API

        /// <summary>
        /// Gets the bot's current pose level (0=prone, 50=crouch, 100=stand).
        /// </summary>
        public float GetPoseLevel()
        {
            return _movement.PoseLevel;
        }

        /// <summary>
        /// Locks the bot into a crouch pose until unlocked.
        /// </summary>
        public void LockCrouchPose()
        {
            _targetPoseLevel = CrouchPose;
            _isLocked = true;
        }

        /// <summary>
        /// Unlocks pose (returns to normal AI-driven logic).
        /// </summary>
        public void UnlockPose()
        {
            _isLocked = false;
        }

        /// <summary>
        /// Explicitly sets pose to crouch, optionally using anticipation value.
        /// </summary>
        public void SetCrouch(bool anticipate = false)
        {
            _targetPoseLevel = anticipate ? 60f : CrouchPose;
        }

        /// <summary>
        /// Explicitly sets pose to prone, optionally using anticipation value.
        /// </summary>
        public void SetProne(bool anticipate = false)
        {
            _targetPoseLevel = anticipate ? 20f : PronePose;
        }

        /// <summary>
        /// Explicitly sets pose to full standing.
        /// </summary>
        public void SetStand()
        {
            _targetPoseLevel = StandPose;
        }

        /// <summary>
        /// Main tick entry. Blends pose toward target, updates pose intent on interval.
        /// </summary>
        public void Tick(float currentTime)
        {
            if (_bot == null || _bot.IsDead || _movement == null)
                return;

            float deltaTime = currentTime - _lastTickTime;
            _lastTickTime = currentTime;

            if (_isLocked)
            {
                BlendPose(deltaTime);
                return;
            }

            if (currentTime >= _nextPoseCheckTime)
            {
                _nextPoseCheckTime = currentTime + PoseCheckInterval;
                EvaluatePoseIntent(currentTime);
            }

            BlendPose(deltaTime);
        }

        /// <summary>
        /// Examines cover near the given position and anticipates best pose.
        /// </summary>
        public void TrySetStanceFromNearbyCover(Vector3 position)
        {
            var points = NavPointRegistry.QueryNearby(
                position,
                4f,
                p =>
                {
                    float dSq = (p.Position - position).sqrMagnitude;
                    return dSq <= 16f &&
                           (BotCoverHelper.IsProneCover(p) || BotCoverHelper.IsLowCover(p));
                });

            for (int i = 0; i < points.Count; i++)
            {
                NavPointData p = points[i];
                if (BotCoverHelper.IsProneCover(p))
                {
                    SetProne(true);
                    break;
                }

                if (BotCoverHelper.IsLowCover(p))
                {
                    SetCrouch(true);
                    break;
                }
            }

            TempListPool.Return(points);
        }

        #endregion

        #region Internal Logic

        /// <summary>
        /// Blends pose smoothly towards the target, using panic/combat speed factors.
        /// </summary>
        private void BlendPose(float deltaTime)
        {
            if (Mathf.Abs(_currentPoseLevel - _targetPoseLevel) < MinPoseThreshold)
                return;

            float panicFactor = _cache.PanicHandler != null && _cache.PanicHandler.IsPanicking ? 0.6f : 1f;
            float combatFactor = _cache.Combat != null && _cache.Combat.IsInCombatState() ? 1f : 0.4f;
            float speed = PoseBlendSpeedBase * panicFactor * combatFactor;

            _currentPoseLevel = Mathf.MoveTowards(_currentPoseLevel, _targetPoseLevel, speed * deltaTime);
            _movement.SetPoseLevel(_currentPoseLevel);
        }

        /// <summary>
        /// Evaluates current threat/cover/suppression and sets pose intent.
        /// </summary>
        private void EvaluatePoseIntent(float currentTime)
        {
            // Highest: panic
            if (_cache.PanicHandler != null && _cache.PanicHandler.IsPanicking)
            {
                _targetPoseLevel = PronePose;
                return;
            }

            // Suppression crouch
            if (_cache.Suppression != null && _cache.Suppression.IsSuppressed())
            {
                _suppressedUntil = currentTime + SuppressionCrouchDuration;
            }

            if (currentTime < _suppressedUntil)
            {
                _targetPoseLevel = CrouchPose;
                return;
            }

            // Special: snipers, frenzied, fearful—prone when flanking
            if (_personality.IsFrenzied || _personality.IsFearful || _personality.Personality == PersonalityType.Sniper)
            {
                bool flankFound;
                Vector3 flankDir = _bot.TryGetFlankDirection(out flankFound);
                if (flankFound)
                {
                    float angle = Vector3.Angle(_bot.LookDirection, flankDir.normalized);
                    if (angle > FlankAngleThreshold)
                    {
                        _targetPoseLevel = PronePose;
                        return;
                    }
                }
            }

            // Recent/nearby cover
            if (_bot.Memory != null && _bot.Memory.BotCurrentCoverInfo != null)
            {
                CustomNavigationPoint lastCover = _bot.Memory.BotCurrentCoverInfo.LastCover;
                if (lastCover != null)
                {
                    NavPointData point = NavPointConverter.FromCustom(lastCover);
                    float dist = Vector3.Distance(_bot.Position, point.Position);

                    if (dist < 2.5f)
                    {
                        if (BotCoverHelper.IsProneCover(point))
                        {
                            _targetPoseLevel = PronePose;
                            return;
                        }

                        if (BotCoverHelper.IsLowCover(point))
                        {
                            _targetPoseLevel = CrouchPose;
                            return;
                        }
                    }
                }
            }

            // Default: caution/camper prefer crouch, others stand
            bool inCombat = _cache.Combat != null && _cache.Combat.IsInCombatState();
            bool prefersCrouch = _personality.Caution > 0.6f || _personality.IsCamper;

            _targetPoseLevel = inCombat && prefersCrouch ? CrouchPose : StandPose;
        }

        #endregion
    }
}
