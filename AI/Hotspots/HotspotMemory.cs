// <auto-generated>
//   AI-Refactored: HotspotMemory.cs (Beyond Diamond, Pooled Tactical History Registry)
//   Bulletproof: All logic is null-safe, zero throw/cascade, map-scoped, and TempDictionary pooled.
//   MIT License.
// </auto-generated>

namespace AIRefactored.AI.Hotspots
{
    using System;
    using System.Collections.Generic;
    using AIRefactored.Pools;
    using UnityEngine;

    /// <summary>
    /// Tracks recent hotspot visits on a per-map basis. Prevents looped routing or retargeting.
    /// Bulletproof: All logic is map-scoped, pooled, non-throwing, and isolation-safe.
    /// </summary>
    internal static class HotspotMemory
    {
        #region Constants

        private const float DefaultVisitLifetime = float.MaxValue;

        #endregion

        #region Fields

        /// <summary>
        /// Structure: mapId → (position → lastVisitTime)
        /// </summary>
        private static readonly Dictionary<string, Dictionary<Vector3, float>> VisitedMap =
            new Dictionary<string, Dictionary<Vector3, float>>(16);

        #endregion

        #region Public API

        /// <summary>
        /// Clears all map visit memory. Call on raid end or map unload.
        /// </summary>
        public static void Clear()
        {
            try
            {
                foreach (var kv in VisitedMap)
                {
                    try
                    {
                        kv.Value.Clear();
                        TempDictionaryPool.Return(kv.Value);
                    }
                    catch
                    {
                        // Continue even on pool error
                    }
                }
                VisitedMap.Clear();
            }
            catch
            {
                // Fully bulletproof
            }
        }

        /// <summary>
        /// Marks a position on a map as visited at current Time.time.
        /// </summary>
        public static void MarkVisited(string mapId, Vector3 position)
        {
            try
            {
                if (string.IsNullOrWhiteSpace(mapId))
                    return;

                string key = mapId.Trim().ToLowerInvariant();
                if (key.Length == 0)
                    return;

                if (!VisitedMap.TryGetValue(key, out var visits) || visits == null)
                {
                    visits = TempDictionaryPool.Rent<Vector3, float>();
                    VisitedMap[key] = visits;
                }

                visits[position] = Time.time;
            }
            catch
            {
                // Fail-safe
            }
        }

        /// <summary>
        /// Returns 1 if the hotspot was ever visited. Otherwise returns 0.
        /// </summary>
        public static float GetVisitCount(string mapId, Vector3 position)
        {
            try
            {
                return WasVisitedWithin(mapId, position, DefaultVisitLifetime) ? 1f : 0f;
            }
            catch
            {
                return 0f;
            }
        }

        /// <summary>
        /// Returns true if the position was visited within cooldownSeconds.
        /// </summary>
        public static bool WasVisitedRecently(string mapId, Vector3 position, float cooldownSeconds)
        {
            try
            {
                return WasVisitedWithin(mapId, position, cooldownSeconds);
            }
            catch
            {
                return false;
            }
        }

        #endregion

        #region Internal Logic

        private static bool WasVisitedWithin(string mapId, Vector3 position, float cooldown)
        {
            if (string.IsNullOrWhiteSpace(mapId))
                return false;

            string key = mapId.Trim().ToLowerInvariant();
            if (!VisitedMap.TryGetValue(key, out var visits) || visits == null)
                return false;

            return visits.TryGetValue(position, out float lastSeen) && (Time.time - lastSeen) < cooldown;
        }

        #endregion
    }
}
