// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   All cache/owner initialization is bulletproof: atomic, nulls are impossible, always retries, logs are clear. No terminal fallback.
// </auto-generated>

namespace AIRefactored.AI.Core
{
    using System;
    using System.Collections.Generic;
    using AIRefactored.Core;
    using AIRefactored.Runtime;
    using BepInEx.Logging;
    using EFT;

    /// <summary>
    /// Central static registry for storing and accessing BotComponentCache instances.
    /// All wiring is atomic: owner and cache are always created together, and always retried until fully wired.
    /// </summary>
    public static class BotComponentCacheRegistry
    {
        #region Fields

        private static readonly Dictionary<string, BotComponentCache> CacheMap =
            new Dictionary<string, BotComponentCache>(128, StringComparer.OrdinalIgnoreCase);

        private static readonly object Lock = new object();
        private static readonly ManualLogSource Logger = Plugin.LoggerInstance;

        #endregion

        #region Public API

        /// <summary>
        /// Returns the cache for a bot if it exists; otherwise creates and registers a new one.
        /// Safe: always wires owner+cache once. Must not be called inside AIRefactoredBotOwner.Initialize to prevent recursion.
        /// </summary>
        public static BotComponentCache GetOrCreate(BotOwner bot)
        {
            if (!IsFullyValidBot(bot))
                return null;

            string id = bot.Profile.Id;
            if (string.IsNullOrEmpty(id))
                return null;

            lock (Lock)
            {
                if (CacheMap.TryGetValue(id, out var existing))
                    return existing;

                try
                {
                    var cache = new BotComponentCache();
                    var owner = new AIRefactoredBotOwner();

                    cache.Initialize(bot);
                    cache.SetOwner(owner);

                    // DO NOT call owner.Initialize(bot) here — caller (BotSpawnWatcher) must do it after SetOwner()
                    CacheMap[id] = cache;

                    Logger.LogDebug($"[BotComponentCacheRegistry] ✅ Created new cache for bot: {id}");
                    return cache;
                }
                catch (Exception ex)
                {
                    Logger.LogError($"[BotComponentCacheRegistry] ❌ Cache creation failed for {id}: {ex}");
                    return null;
                }
            }
        }

        /// <summary>
        /// TryGetExisting returns cache only if it's already registered.
        /// Does NOT create anything. Safe for AIRefactoredBotOwner to use.
        /// </summary>
        public static BotComponentCache TryGetExisting(BotOwner bot)
        {
            if (!IsFullyValidBot(bot))
                return null;

            string id = bot.Profile.Id;
            lock (Lock)
            {
                return CacheMap.TryGetValue(id, out var existing) ? existing : null;
            }
        }

        public static bool TryGet(string profileId, out BotComponentCache cache)
        {
            if (string.IsNullOrEmpty(profileId))
            {
                cache = null;
                return false;
            }

            lock (Lock)
            {
                return CacheMap.TryGetValue(profileId, out cache);
            }
        }

        public static void Remove(BotOwner bot)
        {
            if (bot?.Profile?.Id == null)
                return;

            string id = bot.Profile.Id;
            lock (Lock)
            {
                if (CacheMap.Remove(id))
                    Logger.LogDebug($"[BotComponentCacheRegistry] Removed cache for: {id}");
            }
        }

        public static void ClearAll()
        {
            lock (Lock)
            {
                CacheMap.Clear();
                Logger.LogWarning("[BotComponentCacheRegistry] All caches cleared.");
            }
        }

        #endregion

        #region Helpers

        private static bool IsFullyValidBot(BotOwner bot)
        {
            return bot?.Profile?.Info != null && !string.IsNullOrEmpty(bot.Profile.Id);
        }

        #endregion
    }
}
