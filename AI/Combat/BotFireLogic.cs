// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Failures in AIRefactored logic must always trigger safe fallback to EFT base AI.
// </auto-generated>

namespace AIRefactored.AI.Combat
{
    using System;
    using System.Collections.Generic;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Helpers;
    using AIRefactored.AI.Navigation;
    using AIRefactored.AI.Optimization;
    using AIRefactored.Core;
    using AIRefactored.Pools;
    using EFT;
    using EFT.HealthSystem;
    using EFT.InventoryLogic;
    using UnityEngine;
    using GClass2814 = GClass2814<HealthControllerClass.GClass2819>;
    using Random = UnityEngine.Random;

    /// <summary>
    /// Controls bot firing, aiming, fire mode selection, and fallback behavior.
    /// Dynamically adjusts based on distance, suppression, weapon state, and bot personality.
    /// </summary>
    public sealed class BotFireLogic
    {
        #region Constants

        private const float MaxAimPitch = 70f;

        private static readonly EBodyPart[] AllBodyParts = (EBodyPart[])Enum.GetValues(typeof(EBodyPart));

        private static readonly Dictionary<string, float> WeaponTypeRanges = new Dictionary<string, float>(StringComparer.OrdinalIgnoreCase)
        {
            { "sniper", 180f },
            { "marksman", 150f },
            { "rifle", 120f },
            { "assault", 100f },
            { "smg", 75f },
            { "shotgun", 50f },
            { "pistol", 35f }
        };

        #endregion

        #region Fields

        private readonly BotOwner _bot;
        private readonly BotComponentCache _cache;

        private Vector3 _idleLookDirection = Vector3.forward;
        private float _lastLookAroundTime;
        private float _nextDecisionTime;

        #endregion

        #region Constructor

        public BotFireLogic(BotOwner bot, BotComponentCache cache)
        {
            if (bot == null || cache == null)
            {
                Plugin.LoggerInstance.LogError("[BotFireLogic] Null bot or cache during construction.");
                throw new ArgumentNullException("BotFireLogic requires a valid BotOwner and BotComponentCache.");
            }

            _bot = bot;
            _cache = cache;
        }

        #endregion

        #region Public Methods

        public void Tick(float time)
        {
            if (_bot.IsDead || !_bot.IsAI || _bot.Memory == null)
            {
                return;
            }

            BotWeaponManager weaponManager = _bot.WeaponManager;
            ShootData shootData = _bot.ShootData;
            BotWeaponInfo weaponInfo = weaponManager?._currentWeaponInfo;
            Weapon weapon = weaponInfo?.weapon;
            GClass592 settings = _bot.Settings?.FileSettings?.Core;
            BotPersonalityProfile profile = _cache.AIRefactoredBotOwner?.PersonalityProfile;

            if (weaponManager == null || shootData == null || weaponInfo == null || weapon == null || settings == null || profile == null)
            {
                return;
            }

            if (!TryResolveEnemy(out Player target))
            {
                return;
            }

            Vector3 aimPosition = GetValidatedAimPosition(target, time);
            UpdateBotAiming(aimPosition);

            if (!EFTPlayerUtil.IsValid(target))
            {
                return;
            }

            float distance = Vector3.Distance(_bot.Position, aimPosition);
            float weaponRange = EstimateWeaponRange(weapon);
            float maxRange = Mathf.Min(profile.EngagementRange, weaponRange, 200f);

            if (_bot.Memory.IsUnderFire && GetHealthRatio() <= profile.RetreatThreshold)
            {
                TriggerFallback();
                return;
            }

            if (distance > maxRange)
            {
                if (profile.ChaosFactor > 0f && Random.value < profile.ChaosFactor)
                {
                    BotMovementHelper.SmoothMoveTo(_bot, aimPosition, false, profile.Cohesion);
                }

                return;
            }

            if (time < _nextDecisionTime)
            {
                return;
            }

            _nextDecisionTime = time + GetBurstCadence(profile);

            if (weaponInfo.BulletCount <= 0 && !weaponInfo.CheckHaveAmmoForReload())
            {
                weaponManager.Selector?.TryChangeWeaponCauseNoAmmo();
                weaponManager.Melee?.Activate();
                return;
            }

            ApplyFireMode(weaponInfo, weapon, distance, profile, settings);

            if (weaponManager.IsWeaponReady)
            {
                shootData.Shoot();

                if (_cache.LastShotTracker != null && !string.IsNullOrEmpty(target.ProfileId))
                {
                    _cache.LastShotTracker.RegisterShot(target.ProfileId);
                }
            }
        }

        #endregion

        #region Private Methods

        private void UpdateBotAiming(Vector3 aimPosition)
        {
            Vector3 dir = aimPosition - _bot.Position;
            if (dir.sqrMagnitude < 0.01f)
            {
                return;
            }

            Quaternion rot = Quaternion.LookRotation(dir);
            float pitch = rot.eulerAngles.x > 180f ? rot.eulerAngles.x - 360f : rot.eulerAngles.x;
            pitch = Mathf.Clamp(pitch, -MaxAimPitch, MaxAimPitch);

            Vector3 forward = Quaternion.Euler(pitch, rot.eulerAngles.y, 0f) * Vector3.forward;
            _bot.AimingManager?.CurrentAiming?.SetTarget(forward);
        }

        private Vector3 GetValidatedAimPosition(Player target, float time)
        {
            if (EFTPlayerUtil.IsValid(target))
            {
                return EFTPlayerUtil.GetPosition(target);
            }

            Vector3 memory = _bot.Memory.LastEnemy?.CurrPosition ?? Vector3.zero;
            if (memory != Vector3.zero)
            {
                return memory;
            }

            if (time - _lastLookAroundTime > 1.5f)
            {
                float yaw = Random.Range(-75f, 75f);
                float pitch = Random.Range(-10f, 10f);
                Quaternion q = Quaternion.Euler(pitch, yaw, 0f);
                Vector3 baseDir = _bot.Transform != null ? _bot.Transform.forward : Vector3.forward;
                _idleLookDirection = q * baseDir;
                _lastLookAroundTime = time;
            }

            return _bot.Position + _idleLookDirection.normalized * 10f;
        }

        private void ApplyFireMode(BotWeaponInfo info, Weapon weapon, float distance, BotPersonalityProfile profile, GClass592 settings)
        {
            if (distance <= 40f)
            {
                SetFireMode(info, Weapon.EFireMode.fullauto);
                RecoverAccuracy(settings);
            }
            else if (distance <= 100f && SupportsFireMode(weapon, Weapon.EFireMode.burst))
            {
                SetFireMode(info, Weapon.EFireMode.burst);
                ApplyScatter(settings, true, profile);
            }
            else
            {
                SetFireMode(info, Weapon.EFireMode.single);
                ApplyScatter(settings, true, profile);
            }
        }

        private void SetFireMode(BotWeaponInfo info, Weapon.EFireMode mode)
        {
            if (info.weapon.SelectedFireMode != mode)
            {
                info.ChangeFireMode(mode);
            }
        }

        private bool SupportsFireMode(Weapon weapon, Weapon.EFireMode mode)
        {
            Weapon.EFireMode[] modes = weapon.WeapFireType;
            for (int i = 0; i < modes.Length; i++)
            {
                if (modes[i] == mode)
                {
                    return true;
                }
            }

            return false;
        }

        private void RecoverAccuracy(GClass592 settings)
        {
            settings.ScatteringPerMeter = Mathf.Clamp(settings.ScatteringPerMeter * 0.95f, 0.4f, 3.0f);
        }

        private void ApplyScatter(GClass592 settings, bool underFire, BotPersonalityProfile profile)
        {
            float composure = _cache.PanicHandler != null ? _cache.PanicHandler.GetComposureLevel() : 1f;
            float scatterPenalty = underFire ? (1f - profile.AccuracyUnderFire) * (1f - composure) : 0f;
            float scatterFactor = 1.1f + scatterPenalty;

            settings.ScatteringPerMeter = Mathf.Clamp(settings.ScatteringPerMeter * scatterFactor, 0.6f, 3.5f);
        }

        private float EstimateWeaponRange(Weapon weapon)
        {
            ItemTemplate template = weapon.Template;
            if (template == null || string.IsNullOrEmpty(template.Name))
            {
                return 90f;
            }

            foreach (var kv in WeaponTypeRanges)
            {
                if (template.Name.IndexOf(kv.Key, StringComparison.OrdinalIgnoreCase) >= 0)
                {
                    return kv.Value;
                }
            }

            return 90f;
        }

        private float GetBurstCadence(BotPersonalityProfile profile)
        {
            float baseDelay = Mathf.Lerp(0.75f, 0.25f, profile.AggressionLevel);
            float reactionDelay = Mathf.Lerp(0.15f, 0.35f, 1f - profile.ReactionTime);
            float chaosOffset = Random.Range(-0.08f, 0.2f) * profile.ChaosFactor;

            return Mathf.Clamp(baseDelay + reactionDelay + chaosOffset, 0.15f, 1.1f);
        }

        private float GetHealthRatio()
        {
            HealthControllerClass hc = _bot.HealthController as HealthControllerClass;
            if (hc == null || hc.Dictionary_0 == null)
            {
                return 1f;
            }

            float current = 0f;
            float max = 0f;

            for (int i = 0; i < AllBodyParts.Length; i++)
            {
                EBodyPart part = AllBodyParts[i];
                if (hc.Dictionary_0.TryGetValue(part, out var state) && state.Health != null)
                {
                    current += state.Health.Current;
                    max += state.Health.Maximum;
                }
            }

            return max > 0f ? current / max : 1f;
        }

        private void TriggerFallback()
        {
            if (_cache.Pathing == null)
            {
                return;
            }

            List<Vector3> retreatPath = BotCoverRetreatPlanner.GetCoverRetreatPath(_bot, _bot.LookDirection.normalized, _cache.Pathing);
            if (retreatPath == null || retreatPath.Count < 2)
            {
                return;
            }

            Vector3 fallback = retreatPath[retreatPath.Count - 1];
            if (!BotNavValidator.Validate(_bot, "BotFireLogic::TriggerFallback"))
            {
                fallback = FallbackNavPointProvider.GetSafePoint(_bot.Position);
            }

            BotMovementHelper.SmoothMoveTo(_bot, fallback, false);
            BotCoverHelper.TrySetStanceFromNearbyCover(_cache, fallback);

            if (!FikaHeadlessDetector.IsHeadless && _bot.BotTalk != null)
            {
                _bot.BotTalk.TrySay(EPhraseTrigger.OnLostVisual);
            }
        }

        private bool TryResolveEnemy(out Player result)
        {
            result = null;

            if (_cache.ThreatSelector?.CurrentTarget is Player direct && EFTPlayerUtil.IsValid(direct))
            {
                result = direct;
                return true;
            }

            if (_bot.Memory?.GoalEnemy?.Person is Player fallback && EFTPlayerUtil.IsValid(fallback))
            {
                result = fallback;
                return true;
            }

            return false;
        }

        #endregion
    }
}
