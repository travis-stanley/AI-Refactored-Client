// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   All navigation and fallback logic is bulletproof and fully isolated.
//   NavPointRegistry and custom navpoint logic have been removed: fallback is now pure NavMesh/EFT-native.
// </auto-generated>

namespace AIRefactored.AI.Optimization
{
	using System;
	using System.Collections.Generic;
	using AIRefactored.AI.Core;
	using AIRefactored.AI.Helpers;
	using AIRefactored.AI.Navigation;
	using AIRefactored.Core;
	using AIRefactored.Pools;
	using EFT;
	using UnityEngine;
	using UnityEngine.AI;

	/// <summary>
	/// Provides fallback path planning and squad-aware retreat evaluation for AI bots.
	/// All path/cover/fallback logic is routed through Unity NavMesh, BotNavHelper, and squad-safe helpers.
	/// Only runs on the authoritative host (headless, local-host, or client-host).
	/// All failures are strictly isolated to the affected bot and do not break parent or system logic.
	/// </summary>
	public static class BotCoverRetreatPlanner
	{
		private const float RetreatDistance = 12f;
		private const float SquadSpacingThreshold = 4.25f;
		private const float NavSampleRadius = 2f;
		private const int MaxSamples = 10;
		private const float MemoryClearInterval = 60f;
		private const float ChaosOffsetRadius = 2.5f;

		private static readonly Dictionary<string, Dictionary<string, List<Vector3>>> _squadRetreatCache = new Dictionary<string, Dictionary<string, List<Vector3>>>();
		private static float _lastClearTime = -999f;

		public static void Initialize()
		{
			try
			{
				_squadRetreatCache.Clear();
				_lastClearTime = Time.time;
			}
			catch (Exception ex)
			{
				Plugin.LoggerInstance.LogError("[BotCoverRetreatPlanner] Initialize failed: " + ex);
			}
		}

		/// <summary>
		/// Picks a retreat destination using Unity NavMesh and EFT-native squad-safe helpers.
		/// No custom nav registry or generated points are used.
		/// </summary>
		public static List<Vector3> GetCoverRetreatPath(BotOwner bot, Vector3 threatDir, BotOwnerPathfindingCache pathCache)
		{
			List<Vector3> result = TempListPool.Rent<Vector3>();
			try
			{
				if (!GameWorldHandler.IsLocalHost() || bot == null || bot.Transform == null)
					return result;

				string map = GameWorldHandler.TryGetValidMapName();
				if (string.IsNullOrEmpty(map))
					return result;

				ClearExpiredCache();

				string squadId = bot.Profile?.Info?.GroupId ?? bot.ProfileId;
				if (!_squadRetreatCache.TryGetValue(map, out Dictionary<string, List<Vector3>> squadCache))
				{
					squadCache = new Dictionary<string, List<Vector3>>();
					_squadRetreatCache[map] = squadCache;
				}

				// 1. Try cached squad retreat if not blocked/unsafe
				if (squadCache.TryGetValue(squadId, out List<Vector3> cached) &&
					cached.Count >= 2 &&
					!IsPathBlockedByDoor(cached))
				{
					result.AddRange(cached);
					return result;
				}

				squadCache.Remove(squadId);

				// 2. Try EFT native retreat path (uses BotNavHelper squad-safe points)
				List<Vector3> squadSafe = BotNavHelper.GetCurrentPathPoints(bot, 6) != null
					? GetSquadSafeRetreat(bot, 6, SquadSpacingThreshold)
					: null;

				if (squadSafe != null && squadSafe.Count >= 2)
				{
					squadCache[squadId] = squadSafe;
					result.AddRange(squadSafe);
					return result;
				}

				// 3. Try fallback via Unity NavMesh straight line
				if (TryNavMeshFallback(bot, threatDir, out List<Vector3> nativePath))
				{
					squadCache[squadId] = nativePath;
					result.AddRange(nativePath);
					return result;
				}

				// 4. Final fallback: move directly away, add chaos offset, sample position on navmesh
				Vector3 origin = bot.Position;
				Vector3 away = -threatDir.normalized;
				Vector3 fallback = origin + away * RetreatDistance + UnityEngine.Random.insideUnitSphere * ChaosOffsetRadius;
				fallback.y = origin.y; // Keep same height for stability

				// Use NavMesh sampling for the fallback point
				NavMeshHit hit;
				if (NavMesh.SamplePosition(fallback, out hit, NavSampleRadius, NavMesh.AllAreas))
					fallback = hit.position;

				result.Add(origin);
				result.Add(fallback);
				return result;
			}
			catch (Exception ex)
			{
				Plugin.LoggerInstance.LogError("[BotCoverRetreatPlanner] GetCoverRetreatPath failed: " + ex);
				return result;
			}
		}

		#region Internal Helpers

		private static void ClearExpiredCache()
		{
			if (Time.time - _lastClearTime > MemoryClearInterval)
			{
				_squadRetreatCache.Clear();
				_lastClearTime = Time.time;
			}
		}

		private static List<Vector3> GetSquadSafeRetreat(BotOwner bot, int maxPoints, float spacing)
		{
			List<Vector3> result = new List<Vector3>(maxPoints);
			Vector3[] points = BotNavHelper.GetCurrentPathPoints(bot, maxPoints);
			if (points == null || points.Length == 0)
				return result;

			BotsGroup group = bot.BotsGroup;
			int members = group != null ? group.MembersCount : 0;
			for (int i = 0; i < points.Length; i++)
			{
				bool safe = true;
				Vector3 candidate = points[i];
				for (int m = 0; m < members; m++)
				{
					BotOwner mate = group.Member(m);
					if (mate != null && mate != bot && (mate.Position - candidate).sqrMagnitude < spacing * spacing)
					{
						safe = false;
						break;
					}
				}
				if (safe)
					result.Add(candidate);
			}
			return result;
		}

		private static bool TryNavMeshFallback(BotOwner bot, Vector3 threatDir, out List<Vector3> result)
		{
			result = TempListPool.Rent<Vector3>();
			try
			{
				Vector3 from = bot.Position;
				Vector3 to = from - threatDir.normalized * RetreatDistance;

				NavMeshPath nav = new NavMeshPath();
				if (NavMesh.CalculatePath(from, to, NavMesh.AllAreas, nav) && nav.status == NavMeshPathStatus.PathComplete)
				{
					result.AddRange(nav.corners);
					return result.Count >= 2;
				}

				TempListPool.Return(result);
				result = null;
				return false;
			}
			catch
			{
				TempListPool.Return(result);
				result = null;
				return false;
			}
		}

		private static bool IsPathBlockedByDoor(List<Vector3> path)
		{
			try
			{
				if (path.Count < 2)
					return false;

				Vector3 origin = path[0] + Vector3.up * 1.2f;
				Vector3 target = path[1];
				Vector3 dir = (target - path[0]).normalized;
				float dist = Vector3.Distance(path[0], target) + 0.5f;

				if (Physics.Raycast(origin, dir, out RaycastHit hit, dist, AIRefactoredLayerMasks.DoorColliderMask))
					return AIRefactoredLayerMasks.IsDoorLayer(hit.collider.gameObject.layer);

				return false;
			}
			catch { return false; }
		}

		#endregion
	}
}
