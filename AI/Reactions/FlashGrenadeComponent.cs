// <auto-generated>
//   AI-Refactored: FlashGrenadeComponent.cs (Beyond Diamond, BotBrain Edition)
//   Detects sudden bright light exposure from flashlights or flashbangs.
//   Simulates temporary blindness and optionally applies suppression/fallback.
//   Bulletproof: all logic is fully null-guarded, local, and never breaks the AI stack.
// </auto-generated>

namespace AIRefactored.AI.Reactions
{
    using System;
    using System.Collections.Generic;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Helpers;
    using AIRefactored.Core;
    using EFT;
    using UnityEngine;

    public sealed class FlashGrenadeComponent
    {
        private const float BaseBlindDuration = 4.5f;
        private const float TriggerScoreThreshold = 0.35f;

        private BotOwner _bot;
        private BotComponentCache _cache;
        private bool _isBlinded;
        private float _lastFlashTime = -999f;
        private bool _failed;

        public void Initialize(BotComponentCache cache)
        {
            try
            {
                if (cache == null)
                    throw new ArgumentNullException(nameof(cache));
                if (cache.Bot == null)
                    throw new ArgumentException("Bot reference is null.");

                _cache = cache;
                _bot = cache.Bot;
                _isBlinded = false;
                _lastFlashTime = -999f;
                _failed = false;
            }
            catch (Exception ex)
            {
                _bot = null;
                _cache = null;
                _failed = true;
                Plugin.LoggerInstance.LogError($"[FlashGrenadeComponent] Initialize exception: {ex}");
            }
        }

        public bool IsFlashed()
        {
            return !_failed && _isBlinded;
        }

        public void ForceBlind(float duration = BaseBlindDuration, Vector3? source = null)
        {
            if (_failed || _bot == null || _bot.IsDead)
                return;

            try
            {
                _lastFlashTime = Time.time;
                _isBlinded = true;

                if (source.HasValue)
                {
                    Player player = EFTPlayerUtil.ResolvePlayer(_bot);
                    if (player != null)
                    {
                        BotSuppressionHelper.TrySuppressBot(player, source.Value);
                    }
                }
            }
            catch (Exception ex)
            {
                _failed = true;
                Plugin.LoggerInstance.LogError($"[FlashGrenadeComponent] ForceBlind exception: {ex}");
            }
        }

        public void Tick(float time)
        {
            if (_failed || _cache == null || _bot == null || _bot.IsDead)
                return;

            try
            {
                Player player = EFTPlayerUtil.ResolvePlayer(_bot);
                if (player == null || !player.IsAI || player.IsYourPlayer)
                    return;

                CheckFlashlightExposure();

                if (_isBlinded && (time - _lastFlashTime) > GetBlindRecoveryTime())
                    _isBlinded = false;
            }
            catch (Exception ex)
            {
                _failed = true;
                Plugin.LoggerInstance.LogError($"[FlashGrenadeComponent] Tick exception: {ex}");
            }
        }

        private void CheckFlashlightExposure()
        {
            try
            {
                if (_cache == null || _bot == null)
                    return;

                Transform head = BotCacheUtility.Head(_cache);
                if (head == null)
                    return;

                Vector3 eyePos = head.position + Vector3.up * 0.22f;
                IReadOnlyList<Vector3> sources = FlashlightRegistry.GetLastKnownFlashlightPositions();
                if (sources == null || sources.Count == 0)
                    return;

                for (int i = 0; i < sources.Count; i++)
                {
                    Vector3 lightPos = sources[i];
                    Vector3 toEye = eyePos - lightPos;

                    if (toEye.sqrMagnitude > 784f) // >28m^2
                        continue;

                    float angle = Vector3.Angle(toEye.normalized, head.forward);
                    if (angle > 35f)
                        continue;

                    if (Physics.Raycast(lightPos, toEye.normalized, out RaycastHit hit, toEye.magnitude + 0.1f, AIRefactoredLayerMasks.LineOfSightMask))
                    {
                        if (ReferenceEquals(hit.transform, head) || ReferenceEquals(hit.collider.transform, head))
                        {
                            TriggerBlind(lightPos);
                            return;
                        }
                    }
                    else if (angle < 15f && toEye.magnitude < 4.5f)
                    {
                        TriggerBlind(lightPos);
                        return;
                    }
                }
            }
            catch (Exception ex)
            {
                _failed = true;
                Plugin.LoggerInstance.LogError($"[FlashGrenadeComponent] CheckFlashlightExposure exception: {ex}");
            }
        }

        private void TriggerBlind(Vector3 source)
        {
            _lastFlashTime = Time.time;
            _isBlinded = true;

            Player player = EFTPlayerUtil.ResolvePlayer(_bot);
            if (player != null)
                BotSuppressionHelper.TrySuppressBot(player, source);
        }

        private float GetBlindRecoveryTime()
        {
            float composure = 1f;
            try
            {
                if (_cache != null && _cache.PanicHandler != null)
                    composure = Mathf.Clamp01(_cache.PanicHandler.GetComposureLevel());
            }
            catch
            {
                composure = 1f;
            }

            // Higher composure = faster recovery
            return Mathf.Lerp(2f, BaseBlindDuration, 1f - composure);
        }
    }
}
