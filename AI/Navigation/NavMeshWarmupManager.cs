// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

namespace AIRefactored.AI.Navigation
{
    using System;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Optimization;
    using AIRefactored.Core;
    using AIRefactored.Runtime;
    using BepInEx.Logging;
    using Unity.AI.Navigation;
    using UnityEngine;

    /// <summary>
    /// Immediately builds NavMesh surfaces once the map is known.
    /// Ensures NavMeshStatus is flagged and safe before bot AI is initialized.
    /// Also supports navpoint cache loading or generation.
    /// </summary>
    public static class NavMeshWarmupManager
    {
        #region Fields

        private static readonly ManualLogSource Logger = Plugin.LoggerInstance;
        private static bool _hasStarted;

        #endregion

        #region Public API

        /// <summary>
        /// Attempts to build the NavMesh and register navpoints after GameWorld is ready.
        /// Called from InitPhaseRunner before WorldBootstrapper starts.
        /// </summary>
        public static void TryPrebuildNavMesh()
        {
            if (_hasStarted || !GameWorldHandler.IsHost)
            {
                return;
            }

            if (FikaHeadlessDetector.IsHeadless && !FikaHeadlessDetector.HasRaidStarted())
            {
                Logger.LogWarning("[NavMeshWarmupManager] Skipped — raid not started in headless mode.");
                return;
            }

            if (!GameWorldHandler.IsHost || !GameWorldHandler.IsInitialized)
            {
                Logger.LogWarning("[NavMeshWarmupManager] Skipped — world not valid.");
                return;
            }


            _hasStarted = true;
            string mapId = GameWorldHandler.TryGetValidMapName();

            if (string.IsNullOrEmpty(mapId))
            {
                Logger.LogWarning("[NavMeshWarmupManager] Skipped — no valid map name.");
                return;
            }

            try
            {
                NavMeshSurface[] surfaces = UnityEngine.Object.FindObjectsOfType<NavMeshSurface>();
                if (surfaces == null || surfaces.Length == 0)
                {
                    Logger.LogWarning("[NavMeshWarmupManager] No NavMeshSurface found in scene.");
                    return;
                }

                bool builtAny = false;

                for (int i = 0; i < surfaces.Length; i++)
                {
                    NavMeshSurface surface = surfaces[i];
                    if (surface == null || !surface.enabled || !surface.gameObject.activeInHierarchy)
                    {
                        continue;
                    }

                    surface.BuildNavMesh();
                    BotCoverRetreatPlanner.RegisterSurface(mapId, surface);
                    builtAny = true;

                    Logger.LogDebug("[NavMeshWarmupManager] Built NavMeshSurface: " + surface.name);
                }

                if (!builtAny)
                {
                    Logger.LogWarning("[NavMeshWarmupManager] No valid NavMesh surfaces were built.");
                    return;
                }

                Logger.LogInfo("[NavMeshWarmupManager] ✅ NavMesh warmup complete.");
                NavMeshStatus.SetReady();

                if (NavPointCacheManager.TryLoad(mapId, out var cached))
                {
                    NavPointRegistry.LoadFrom(cached);
                    Logger.LogInfo("[NavMeshWarmupManager] ✅ Loaded cached navpoints for: " + mapId);
                    return;
                }

                NavPointRegistry.RegisterAll(mapId);

                if (NavPointRegistry.IsReady)
                {
                    var points = NavPointRegistry.GetAllPoints();
                    NavPointCacheManager.Save(mapId, points);
                    Logger.LogInfo("[NavMeshWarmupManager] ✅ Cached new navpoints for: " + mapId);
                }
                else
                {
                    Logger.LogWarning("[NavMeshWarmupManager] ⚠ NavPointRegistry was empty after build.");
                }
            }
            catch (Exception ex)
            {
                Logger.LogError("[NavMeshWarmupManager] ❌ NavMesh build failed: " + ex);
            }
        }

        /// <summary>
        /// Resets NavMesh warmup status before each raid start.
        /// </summary>
        public static void Reset()
        {
            _hasStarted = false;
            NavMeshStatus.Reset();
        }

        #endregion
    }
}
