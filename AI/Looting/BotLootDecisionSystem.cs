// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
//   All failures are locally isolated; only looting logic falls back or disables itself, never affecting the rest of the bot or mod.
// </auto-generated>

namespace AIRefactored.AI.Looting
{
    using System;
    using System.Collections.Generic;
    using AIRefactored.AI.Core;
    using AIRefactored.Pools;
    using AIRefactored.Runtime;
    using BepInEx.Logging;
    using EFT;
    using EFT.Interactive;
    using EFT.InventoryLogic;
    using UnityEngine;

    /// <summary>
    /// Makes dynamic decisions about whether a bot should loot.
    /// Considers mission context, recent threats, tactical memory, and loot value.
    /// Bulletproof fallback: all errors and failures are isolated and never cascade.
    /// </summary>
    public sealed class BotLootDecisionSystem
    {
        #region Constants

        private const float MaxLootDistance = 22f;
        private const float HighValueThreshold = 25000f;
        private const float CooldownTime = 14f;

        #endregion

        #region Fields

        private BotComponentCache _cache;
        private BotOwner _bot;
        private float _nextLootTime;

        private readonly HashSet<string> _recentLooted = new HashSet<string>(StringComparer.OrdinalIgnoreCase);

        private bool _isActive = true;
        private static ManualLogSource Logger => Plugin.LoggerInstance;

        #endregion

        #region Initialization

        /// <summary>
        /// Initializes the looting decision system for a bot.
        /// </summary>
        public void Initialize(BotComponentCache cache)
        {
            if (cache == null || cache.Bot == null)
            {
                _isActive = false;
                Logger.LogError("[BotLootDecisionSystem] Initialization failed: cache or bot is null. Disabling looting logic for this bot.");
                return;
            }

            _cache = cache;
            _bot = cache.Bot;
            _isActive = true;
        }

        #endregion

        #region Public Methods

        /// <summary>
        /// Determines whether the bot is eligible to begin looting.
        /// </summary>
        public bool ShouldLootNow()
        {
            if (!_isActive || _bot == null || _bot.IsDead)
                return false;

            if (Time.time < _nextLootTime)
                return false;

            try
            {
                if (_cache.PanicHandler != null && _cache.PanicHandler.IsPanicking)
                    return false;

                if (_bot.Memory != null && _bot.Memory.GoalEnemy != null)
                    return false;

                if (_bot.EnemiesController != null && _bot.EnemiesController.EnemyInfos != null && _bot.EnemiesController.EnemyInfos.Count > 0)
                    return false;

                return _cache.LootScanner != null && _cache.LootScanner.TotalLootValue >= HighValueThreshold;
            }
            catch (Exception ex)
            {
                _isActive = false;
                Logger.LogError($"[BotLootDecisionSystem] ShouldLootNow() failed: {ex}");
                return false;
            }
        }

        /// <summary>
        /// Finds the best nearby loot container destination based on value.
        /// </summary>
        public Vector3 GetLootDestination()
        {
            if (!_isActive || _cache == null || _cache.LootScanner == null || _bot == null)
                return Vector3.zero;

            try
            {
                float bestValue = 0f;
                Vector3 bestPoint = Vector3.zero;

                List<LootableContainer> containers = LootRegistry.GetAllContainers();
                if (containers == null)
                    return Vector3.zero;

                for (int i = 0; i < containers.Count; i++)
                {
                    LootableContainer container = containers[i];
                    if (container == null || !container.enabled || container.transform == null)
                        continue;

                    Vector3 pos = container.transform.position;
                    if ((_bot.Position - pos).sqrMagnitude > (MaxLootDistance * MaxLootDistance))
                        continue;

                    float value = EstimateValue(container);
                    if (value > bestValue)
                    {
                        bestValue = value;
                        bestPoint = pos;
                    }
                }

                return bestValue > 0f ? bestPoint : Vector3.zero;
            }
            catch (Exception ex)
            {
                _isActive = false;
                Logger.LogError($"[BotLootDecisionSystem] GetLootDestination() failed: {ex}");
                return Vector3.zero;
            }
        }

        /// <summary>
        /// Marks a container as recently looted and applies cooldown.
        /// </summary>
        public void MarkLooted(string lootId)
        {
            if (!_isActive || string.IsNullOrWhiteSpace(lootId))
                return;

            try
            {
                string id = lootId.Trim();
                _recentLooted.Add(id);
                _nextLootTime = Time.time + CooldownTime;
            }
            catch (Exception ex)
            {
                _isActive = false;
                Logger.LogError($"[BotLootDecisionSystem] MarkLooted() failed: {ex}");
            }
        }

        /// <summary>
        /// Checks if a container was recently looted.
        /// </summary>
        public bool WasRecentlyLooted(string lootId)
        {
            if (!_isActive || string.IsNullOrWhiteSpace(lootId))
                return false;

            try
            {
                return _recentLooted.Contains(lootId.Trim());
            }
            catch (Exception ex)
            {
                _isActive = false;
                Logger.LogError($"[BotLootDecisionSystem] WasRecentlyLooted() failed: {ex}");
                return false;
            }
        }

        #endregion

        #region Internal Helpers

        private static float EstimateValue(LootableContainer container)
        {
            if (container == null || container.ItemOwner == null || container.ItemOwner.RootItem == null)
                return 0f;

            float total = 0f;
            List<Item> items = null;

            try
            {
                items = TempListPool.Rent<Item>();
                container.ItemOwner.RootItem.GetAllItemsNonAlloc(items);

                for (int i = 0; i < items.Count; i++)
                {
                    Item item = items[i];
                    if (item != null && item.Template != null && item.Template.CreditsPrice > 0f)
                        total += item.Template.CreditsPrice;
                }
            }
            catch (Exception ex)
            {
                Logger.LogError($"[BotLootDecisionSystem] EstimateValue() failed: {ex}");
                return 0f;
            }
            finally
            {
                if (items != null)
                    TempListPool.Return(items);
            }

            return total;
        }

        #endregion
    }
}
