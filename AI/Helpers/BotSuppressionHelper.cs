// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

namespace AIRefactored.AI.Helpers
{
    using AIRefactored.AI.Core;
    using AIRefactored.Core;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Triggers suppression and panic behavior in AIRefactored bots.
    /// Simulates enemy fire pressure and flash-based fear effects.
    /// </summary>
    public static class BotSuppressionHelper
    {
        private const float FlashBlindDuration = 4.5f;

        /// <summary>
        /// Gets the BotOwner instance from a Player, if valid AI.
        /// </summary>
        public static BotOwner GetBotOwner(Player player)
        {
            return EFTPlayerUtil.IsValid(player) && player.IsAI
                ? player.AIData?.BotOwner
                : null;
        }

        /// <summary>
        /// Gets the BotComponentCache from a Player, if valid AI.
        /// </summary>
        public static BotComponentCache GetCache(Player player)
        {
            return EFTPlayerUtil.IsValid(player) && player.IsAI
                ? BotCacheUtility.GetCache(player)
                : null;
        }

        /// <summary>
        /// Evaluates whether suppression should occur based on bot visibility and ambient lighting.
        /// </summary>
        public static bool ShouldTriggerSuppression(Player player, float visibleDistThreshold = 12f, float ambientThreshold = 0.25f)
        {
            BotOwner owner = GetBotOwner(player);
            if (owner?.LookSensor == null)
                return false;

            float visibleDist = owner.LookSensor.ClearVisibleDist;

            float ambientLight = 0.5f;
            try
            {
                ambientLight = RenderSettings.ambientLight.grayscale;
            }
            catch
            {
                // Use default if RenderSettings not available
            }

            return visibleDist < visibleDistThreshold || ambientLight < ambientThreshold;
        }

        /// <summary>
        /// Triggers suppression effects for a bot from a threat source.
        /// Applies panic or flash-based blindness depending on bot state.
        /// </summary>
        public static void TrySuppressBot(Player player, Vector3 threatPosition, IPlayer source = null)
        {
            if (!EFTPlayerUtil.IsValid(player) || !player.IsAI)
                return;

            BotOwner owner = GetBotOwner(player);
            BotComponentCache cache = GetCache(player);

            if (owner == null || cache == null || owner.IsDead)
                return;

            if (owner.Memory != null)
            {
                owner.Memory.SetUnderFire(source);
            }

            if (cache.PanicHandler != null && !cache.PanicHandler.IsPanicking)
            {
                cache.PanicHandler.TriggerPanic();
                return;
            }

            if (cache.FlashGrenade != null)
            {
                cache.FlashGrenade.ForceBlind();
            }
        }
    }
}
