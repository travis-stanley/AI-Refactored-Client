// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   All fallback logic is removed: bot suppression logic is always eligible, self-recovering, and never disables the bot.
// </auto-generated>

namespace AIRefactored.AI.Combat
{
    using System;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Helpers;
    using AIRefactored.AI.Navigation;
    using AIRefactored.Core;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Handles bot suppression logic, including sprint retreat, composure impact,
    /// and panic escalation. Suppression is triggered by incoming fire or explosions.
    /// All failures are isolated; suppression logic never disables itself, never triggers fallback logic.
    /// </summary>
    public sealed class BotSuppressionReactionComponent
    {
        #region Constants

        private const float MinSuppressionRetreatDistance = 6.0f;
        private const float SuppressionDuration = 2.2f;
        private const float SquadSuppressionRadiusSqr = 144f;
        private const float SuppressionVoiceCooldown = 1.5f;

        #endregion

        #region Fields

        private BotOwner _bot;
        private BotComponentCache _cache;

        private bool _isSuppressed;
        private float _suppressionStartTime = float.NegativeInfinity;
        private float _lastVoiceTime = float.NegativeInfinity;

        #endregion

        #region Initialization

        public void Initialize(BotComponentCache componentCache)
        {
            if (componentCache == null || componentCache.Bot == null)
            {
                Plugin.LoggerInstance?.LogError("[Suppression] Bot or cache is null in Initialize.");
                return;
            }

            _cache = componentCache;
            _bot = componentCache.Bot;
            _isSuppressed = false;
            _suppressionStartTime = float.NegativeInfinity;
            _lastVoiceTime = float.NegativeInfinity;
        }

        #endregion

        #region Public API

        public bool IsSuppressed() => _isSuppressed;

        public void Tick(float time)
        {
            if (!_isSuppressed)
                return;

            try
            {
                if (!IsValid())
                {
                    _isSuppressed = false;
                    return;
                }

                // Human-like panic voice (client only)
                if (!FikaHeadlessDetector.IsHeadless &&
                    _bot.BotTalk != null &&
                    time - _lastVoiceTime > SuppressionVoiceCooldown &&
                    UnityEngine.Random.value < 0.28f)
                {
                    _lastVoiceTime = time;
                    try { _bot.BotTalk.TrySay(EPhraseTrigger.NeedHelp); } catch { }
                }

                // Recover after suppression duration
                if (time - _suppressionStartTime >= SuppressionDuration)
                {
                    _isSuppressed = false;
                }
            }
            catch (Exception ex)
            {
                Plugin.LoggerInstance?.LogError("[BotSuppression] Tick exception: " + ex);
                _isSuppressed = false;
            }
        }

        public void TriggerSuppression(Vector3? source)
        {
            if (_isSuppressed || !IsValid())
                return;

            try
            {
                var panic = _cache.PanicHandler;
                if (panic != null && panic.IsPanicking)
                    return;

                _isSuppressed = true;
                _suppressionStartTime = Time.time;

                // Directly reduce composure via internal field (reflection is required)
                if (panic != null)
                {
                    float loss = UnityEngine.Random.Range(0.12f, 0.25f);
                    float current = panic.GetComposureLevel();

                    typeof(BotPanicHandler).GetField("_composureLevel",
                        System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance)
                        ?.SetValue(panic, Mathf.Clamp01(current - loss));
                }

                // Always validate movement via BotMovementHelper and BotNavHelper only
                Vector3 retreat = source.HasValue
                    ? (_bot.Position - source.Value).normalized
                    : GetDefaultRetreatDirection();

                // Generate and validate retreat target
                Vector3 fallback = _bot.Position + retreat * MinSuppressionRetreatDistance;
                fallback.y = _bot.Position.y;

                // NavMesh-safe fallback position
                if (BotNavHelper.TryGetSafeTarget(_bot, out var navTarget) && IsVectorValid(navTarget))
                    fallback = navTarget;

                float cohesion = _cache.AIRefactoredBotOwner?.PersonalityProfile?.Cohesion ?? 1f;

                if (_bot.Mover != null)
                {
                    BotMovementHelper.SmoothMoveTo(_bot, fallback, false, cohesion);
                    _bot.Sprint(true);
                    BotCoverHelper.TrySetStanceFromNearbyCover(_cache, fallback);
                }

                // Escalate to panic if composure too low
                if (panic != null && panic.GetComposureLevel() < 0.18f)
                    panic.TriggerPanic();

                _cache.Escalation?.NotifyPanicTriggered();
                TryPropagateSuppression();

                if (!FikaHeadlessDetector.IsHeadless &&
                    _bot.BotTalk != null &&
                    Time.time - _lastVoiceTime > SuppressionVoiceCooldown)
                {
                    try { _bot.BotTalk.TrySay(EPhraseTrigger.NeedHelp); } catch { }
                    _lastVoiceTime = Time.time;
                }
            }
            catch (Exception ex)
            {
                Plugin.LoggerInstance?.LogError("[BotSuppression] TriggerSuppression failed: " + ex);
            }
        }

        #endregion

        #region Squad Propagation

        private void TryPropagateSuppression()
        {
            try
            {
                if (_bot?.BotsGroup == null)
                    return;

                Vector3 self = _bot.Position;
                int count = _bot.BotsGroup.MembersCount;

                for (int i = 0; i < count; i++)
                {
                    BotOwner mate = _bot.BotsGroup.Member(i);
                    if (mate == null || mate == _bot || mate.IsDead)
                        continue;

                    if ((mate.Position - self).sqrMagnitude > SquadSuppressionRadiusSqr)
                        continue;

                    BotComponentCache mateCache = BotCacheUtility.GetCache(mate);
                    if (mateCache?.Suppression != null && !mateCache.Suppression.IsSuppressed())
                    {
                        mateCache.Suppression.TriggerSuppression(self);
                    }
                }
            }
            catch (Exception ex)
            {
                Plugin.LoggerInstance?.LogError("[BotSuppression] Propagation error: " + ex);
            }
        }

        #endregion

        #region Helpers

        private static Vector3 GetDefaultRetreatDirection() => Vector3.back;

        private bool IsValid()
        {
            try
            {
                return _bot != null &&
                       _cache != null &&
                       !_bot.IsDead &&
                       _bot.GetPlayer is Player player &&
                       player.IsAI;
            }
            catch { return false; }
        }

        private static bool IsVectorValid(Vector3 v)
        {
            return !float.IsNaN(v.x) && !float.IsNaN(v.y) && !float.IsNaN(v.z);
        }

        #endregion
    }
}
