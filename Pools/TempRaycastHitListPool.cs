// <auto-generated>
//   AI-Refactored: TempRaycastHitListPool.cs (Beyond Diamond, Zero-Alloc & Parity Edition, June 2025)
//   Bulletproof pooling for List<RaycastHit> for high-performance suppression/occlusion/physics logic.
//   Thread-safe, teardown/reload safe, AI-Refactored compliant.
//   MIT License.
// </auto-generated>

namespace AIRefactored.Pools
{
    using System;
    using System.Collections.Generic;
    using UnityEngine;

    /// <summary>
    /// Pool for reusable <see cref="List{T}"/> of <see cref="RaycastHit"/>.
    /// Used for variable-length hit results in suppression, cover checks, grenade occlusion.
    /// </summary>
    public static class TempRaycastHitListPool
    {
        private static readonly Stack<List<RaycastHit>> Pool = new Stack<List<RaycastHit>>(32);
        private static readonly object SyncRoot = new object();

        static TempRaycastHitListPool()
        {
            try
            {
                AppDomain.CurrentDomain.DomainUnload += (_, __) => ClearAll();
            }
            catch { }
        }

        /// <summary>
        /// Retrieves a pooled list of <see cref="RaycastHit"/>, or allocates a new one.
        /// </summary>
        /// <returns>A cleared list ready for use.</returns>
        public static List<RaycastHit> Rent()
        {
            lock (SyncRoot)
            {
                if (Pool.Count > 0)
                    return Pool.Pop();
            }

            return new List<RaycastHit>(8);
        }

        /// <summary>
        /// Returns a <see cref="List{RaycastHit}"/> to the pool after clearing it.
        /// </summary>
        /// <param name="list">List to return.</param>
        public static void Return(List<RaycastHit> list)
        {
            if (list == null)
                return;

            list.Clear();

            lock (SyncRoot)
            {
                Pool.Push(list);
            }
        }

        /// <summary>
        /// Prewarms the pool with empty lists of <see cref="RaycastHit"/>.
        /// </summary>
        /// <param name="count">Number of lists to allocate.</param>
        public static void Prewarm(int count)
        {
            if (count <= 0)
                return;

            lock (SyncRoot)
            {
                for (int i = 0; i < count; i++)
                    Pool.Push(new List<RaycastHit>(8));
            }
        }

        /// <summary>
        /// Clears all pooled <see cref="RaycastHit"/> lists.
        /// </summary>
        public static void ClearAll()
        {
            lock (SyncRoot)
            {
                Pool.Clear();
            }
        }
    }
}
