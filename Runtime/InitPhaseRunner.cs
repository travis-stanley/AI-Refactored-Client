// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>

namespace AIRefactored.Runtime
{
    using System;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Navigation;
    using AIRefactored.Bootstrap;
    using AIRefactored.Core;
    using BepInEx.Logging;
    using Comfort.Common;
    using EFT;

    /// <summary>
    /// Orchestrates the full AI-Refactored initialization lifecycle using staged world boot phases.
    /// Triggered directly from GameWorldSpawnHook instead of polling.
    /// </summary>
    public static class InitPhaseRunner
    {
        #region Fields

        private static bool _hasStarted;

        #endregion

        #region Lifecycle

        /// <summary>
        /// Starts the full AI-Refactored boot sequence exactly once.
        /// </summary>
        /// <param name="logger">Logger for runtime diagnostics.</param>
        public static void Begin(ManualLogSource logger)
        {
            if (_hasStarted)
            {
                logger?.LogWarning("[InitPhaseRunner] Begin() already called — skipping.");
                return;
            }

            if (FikaHeadlessDetector.IsHeadless && !FikaHeadlessDetector.HasRaidStarted())
            {
                logger?.LogDebug("[InitPhaseRunner] Skipped — FIKA headless raid not started.");
                return;
            }

            _hasStarted = true;

            try
            {
                WorldInitState.SetPhase(WorldPhase.PreInit);
                logger?.LogDebug("[InitPhaseRunner] 🚀 Beginning AIRefactored world initialization...");

                if (!IsWorldSafe())
                {
                    logger?.LogWarning("[InitPhaseRunner] ❌ Unsafe world state — aborting.");
                    ResetInternal(logger);
                    return;
                }

                WorldInitState.SetPhase(WorldPhase.AwaitWorld);
                NavMeshStatus.Reset();

                string mapId = GameWorldHandler.TryGetValidMapName();
                if (string.IsNullOrEmpty(mapId))
                {
                    logger?.LogWarning("[InitPhaseRunner] ⚠ No valid map ID — NavMesh warmup skipped.");
                }

                GameWorldHandler.Initialize();
                WorldBootstrapper.Begin(logger, mapId);

                WorldInitState.SetPhase(WorldPhase.WorldReady);
                logger?.LogDebug("[InitPhaseRunner] ✅ World systems initialized.");

                WorldInitState.SetPhase(WorldPhase.PostInit);
            }
            catch (Exception ex)
            {
                logger?.LogError("[InitPhaseRunner] ❌ Fatal error during Begin(): " + ex);
                ResetInternal(logger);
            }
        }

        /// <summary>
        /// Stops and resets all world systems in preparation for a new raid.
        /// </summary>
        public static void Stop()
        {
            if (!_hasStarted)
            {
                return;
            }

            try
            {
                ResetInternal(Plugin.LoggerInstance);
            }
            catch (Exception ex)
            {
                Plugin.LoggerInstance.LogError("[InitPhaseRunner] ❌ Stop() error: " + ex);
            }
        }

        #endregion

        #region Internal Reset

        private static void ResetInternal(ManualLogSource logger)
        {
            _hasStarted = false;

            WorldInitState.Reset();
            WorldTickDispatcher.Reset();
            WorldBootstrapper.Stop();
            GameWorldHandler.Cleanup();
            NavMeshStatus.Reset();

            logger?.LogDebug("[InitPhaseRunner] 🧹 Cleanup complete — initialization state reset.");
        }

        #endregion

        #region Validation

        private static bool IsWorldSafe()
        {
            GameWorld world = Singleton<GameWorld>.Instantiated ? Singleton<GameWorld>.Instance : null;
            if (world == null || world.RegisteredPlayers == null || world.RegisteredPlayers.Count == 0)
            {
                return false;
            }

            for (int i = 0; i < world.RegisteredPlayers.Count; i++)
            {
                Player player = EFTPlayerUtil.AsEFTPlayer(world.RegisteredPlayers[i]);
                if (player != null && EFTPlayerUtil.IsValid(player))
                {
                    return true;
                }
            }

            return false;
        }

        #endregion
    }
}
