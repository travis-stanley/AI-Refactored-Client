// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Failures in AIRefactored logic must always trigger safe fallback to EFT base AI.
//   Bulletproof: All failures are locally contained, never break other subsystems, and always trigger fallback isolation.
// </auto-generated>

namespace AIRefactored.Runtime
{
    using System;
    using System.Collections.Generic;
    using AIRefactored.AI.Core;
    using AIRefactored.Bootstrap;
    using AIRefactored.Core;
    using BepInEx.Logging;
    using UnityEngine;

    /// <summary>
    /// Detects dynamic runtime loot additions (e.g. player death drops, mission rewards).
    /// Triggers a delayed loot registry refresh on authoritative hosts.
    /// Bulletproof: All errors are strictly contained; mod/global state is never at risk.
    /// </summary>
    public sealed class LootRuntimeWatcher : IAIWorldSystemBootstrapper
    {
        #region Constants

        private const float RefreshDelaySeconds = 0.15f;

        #endregion

        #region Static Fields

        private static readonly ManualLogSource Logger = Plugin.LoggerInstance;
        private static readonly HashSet<int> RegisteredInstanceIds = new HashSet<int>();

        private static float _nextAllowedRefreshTime = -1f;
        private static bool _isQueued;

        #endregion

        #region Lifecycle

        /// <inheritdoc />
        public void Initialize()
        {
            try
            {
                Reset();
                Logger.LogDebug("[LootRuntimeWatcher] ✅ Initialized.");
            }
            catch (Exception ex)
            {
                Logger.LogError("[LootRuntimeWatcher] ❌ Initialize error: " + ex);
            }
        }

        /// <inheritdoc />
        public void Tick(float deltaTime)
        {
            try
            {
                if (!_isQueued || Time.time < _nextAllowedRefreshTime)
                    return;

                if (!GameWorldHandler.IsReady() || !GameWorldHandler.IsHost)
                    return;

                _isQueued = false;
                try
                {
                    GameWorldHandler.RefreshLootRegistry();
                    Logger.LogDebug("[LootRuntimeWatcher] ✅ Loot registry refreshed.");
                }
                catch (Exception ex)
                {
                    Logger.LogError("[LootRuntimeWatcher] ❌ Loot registry refresh failed: " + ex);
                }
            }
            catch (Exception ex)
            {
                Logger.LogError("[LootRuntimeWatcher] ❌ Tick error: " + ex);
            }
        }

        /// <inheritdoc />
        public void OnRaidEnd()
        {
            try
            {
                Reset();
                Logger.LogDebug("[LootRuntimeWatcher] 🧹 Reset after raid.");
            }
            catch (Exception ex)
            {
                Logger.LogError("[LootRuntimeWatcher] ❌ OnRaidEnd error: " + ex);
            }
        }

        /// <inheritdoc />
        public bool IsReady()
        {
            return true;
        }

        /// <inheritdoc />
        public WorldPhase RequiredPhase()
        {
            return WorldPhase.WorldReady;
        }

        #endregion

        #region Public API

        /// <summary>
        /// Queues a delayed refresh of the loot registry.
        /// Bulletproof: All errors are locally contained.
        /// </summary>
        public static void TriggerQueuedRefresh()
        {
            try
            {
                if (_isQueued || !GameWorldHandler.IsReady() || !GameWorldHandler.IsHost)
                    return;

                _nextAllowedRefreshTime = Time.time + RefreshDelaySeconds;
                _isQueued = true;
            }
            catch (Exception ex)
            {
                Logger.LogError("[LootRuntimeWatcher] ❌ TriggerQueuedRefresh error: " + ex);
            }
        }

        /// <summary>
        /// Forces an immediate loot registry refresh.
        /// Bulletproof: All errors are locally contained.
        /// </summary>
        public static void TriggerManualRefresh()
        {
            try
            {
                if (!GameWorldHandler.IsReady() || !GameWorldHandler.IsHost)
                    return;

                _isQueued = false;
                try
                {
                    GameWorldHandler.RefreshLootRegistry();
                    Logger.LogDebug("[LootRuntimeWatcher] 🔁 Manual loot registry refresh triggered.");
                }
                catch (Exception ex)
                {
                    Logger.LogError("[LootRuntimeWatcher] ❌ Manual refresh failed: " + ex);
                }
            }
            catch (Exception ex)
            {
                Logger.LogError("[LootRuntimeWatcher] ❌ TriggerManualRefresh error: " + ex);
            }
        }

        /// <summary>
        /// Registers a GameObject for loot tracking. Triggers a refresh if new.
        /// Bulletproof: All errors are locally contained.
        /// </summary>
        /// <param name="go">GameObject representing loot.</param>
        public static void Register(GameObject go)
        {
            try
            {
                if (go == null)
                    return;

                int id = go.GetInstanceID();
                if (RegisteredInstanceIds.Add(id))
                {
                    TriggerQueuedRefresh();
                }
            }
            catch (Exception ex)
            {
                Logger.LogError("[LootRuntimeWatcher] ❌ Register error: " + ex);
            }
        }

        /// <summary>
        /// Unregisters a GameObject from loot tracking.
        /// Bulletproof: All errors are locally contained.
        /// </summary>
        /// <param name="go">GameObject previously registered as loot.</param>
        public static void Unregister(GameObject go)
        {
            try
            {
                if (go == null)
                    return;

                int id = go.GetInstanceID();
                if (RegisteredInstanceIds.Remove(id))
                {
                    try
                    {
                        Logger.LogDebug("[LootRuntimeWatcher] Unregistered loot object: " + go.name);
                    }
                    catch
                    {
                        // Logger may be disposed during teardown
                    }
                }
            }
            catch (Exception ex)
            {
                Logger.LogError("[LootRuntimeWatcher] ❌ Unregister error: " + ex);
            }
        }

        /// <summary>
        /// Resets internal state for new raids.
        /// Bulletproof: All errors are locally contained.
        /// </summary>
        public static void Reset()
        {
            try
            {
                RegisteredInstanceIds.Clear();
                _isQueued = false;
                _nextAllowedRefreshTime = -1f;

                Logger.LogDebug("[LootRuntimeWatcher] 🔄 Reset complete.");
            }
            catch
            {
                // Logger may be null during teardown
            }
        }

        #endregion
    }
}
