// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Do not use NavPointRegistry unless it is fully initialized and built.
// </auto-generated>

namespace AIRefactored.AI.Navigation
{
    using System.Collections.Generic;
    using AIRefactored.Core;
    using AIRefactored.Pools;
    using BepInEx.Logging;
    using Unity.AI.Navigation;
    using UnityEngine;
    using UnityEngine.AI;

    /// <summary>
    /// Provides fallback nav points if NavPointRegistry is unavailable or empty.
    /// If all else fails, disables all AIRefactored nav logic and lets vanilla EFT take over.
    /// </summary>
    public static class FallbackNavPointProvider
    {
        #region Constants

        private const float MaxFallbackSampleRadius = 1.5f;
        private const float LogCooldown = 2.0f;

        #endregion

        #region Fields

        private static readonly ManualLogSource Logger = Plugin.LoggerInstance;

        private static readonly Vector3[] StaticFallbackOffsets = new Vector3[]
        {
            new Vector3(5f, 0f, 5f),
            new Vector3(-5f, 0f, -5f),
            new Vector3(10f, 0f, -10f),
            new Vector3(-10f, 0f, 10f),
            new Vector3(0f, 0f, 15f),
        };

        private static float _lastLogTime;

        // Global flag: if true, disables all AIRefactored nav logic for this raid.
        public static bool AIRefactoredNavDisabled { get; private set; }

        #endregion

        #region Public API

        /// <summary>
        /// Returns a fallback nav point offset from a base position.
        /// If all else fails, disables all AIRefactored nav and lets vanilla take over.
        /// </summary>
        public static Vector3 GetSafePoint(Vector3 fromPosition)
        {
            if (AIRefactoredNavDisabled)
                return fromPosition;

            if (!IsValid(fromPosition))
            {
                AIRefactoredNavDisabled = true;
                TryLogOnce("[FallbackNavPointProvider] ❌ Invalid bot position detected — disabling AIRefactored nav logic.");
                return fromPosition;
            }

            if (NavPointRegistry.IsReady && !NavPointRegistry.IsEmpty)
            {
                List<Vector3> candidates = NavPointRegistry.QueryNearby(fromPosition, 12f, null, false);
                try
                {
                    for (int i = 0; i < candidates.Count; i++)
                    {
                        Vector3 candidate = candidates[i];
                        if (NavMesh.SamplePosition(candidate, out NavMeshHit hit, MaxFallbackSampleRadius, NavMesh.AllAreas))
                            return hit.position;
                    }
                }
                finally { TempListPool.Return(candidates); }
            }

            for (int i = 0; i < StaticFallbackOffsets.Length; i++)
            {
                Vector3 testPos = fromPosition + StaticFallbackOffsets[i];
                if (NavMesh.SamplePosition(testPos, out NavMeshHit hit, MaxFallbackSampleRadius, NavMesh.AllAreas))
                    return hit.position;
            }

            // Could not find a fallback, disable all custom nav for this raid
            AIRefactoredNavDisabled = true;
            TryLogOnce("[FallbackNavPointProvider] ❌ No valid fallback found — disabling AIRefactored nav logic for this raid.");
            return fromPosition;
        }

        /// <summary>
        /// Returns a static global fallback nav point near map origin.
        /// </summary>
        public static Vector3 GetSafeWorldPoint()
        {
            return new Vector3(5f, 1f, 5f);
        }

        /// <summary>
        /// Resets nav disable flag on new raid/load.
        /// </summary>
        public static void ResetNavDisableFlag()
        {
            AIRefactoredNavDisabled = false;
        }

        #endregion

        #region Internal

        private static bool IsValid(Vector3 pos)
        {
            return pos != Vector3.zero &&
                   !float.IsNaN(pos.x) &&
                   !float.IsNaN(pos.y) &&
                   !float.IsNaN(pos.z);
        }

        private static void TryLogOnce(string msg)
        {
            float now = Time.time;
            if (now - _lastLogTime > LogCooldown)
            {
                Logger.LogWarning(msg);
                _lastLogTime = now;
            }
        }

        #endregion
    }
}
