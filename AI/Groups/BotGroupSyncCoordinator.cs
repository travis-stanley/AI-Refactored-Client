// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Failures in AIRefactored logic must always trigger safe fallback to EFT base AI.
// </auto-generated>

namespace AIRefactored.AI.Groups
{
    using System;
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using AIRefactored.AI.Core;
    using AIRefactored.Core;
    using AIRefactored.Pools;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Coordinates squad-level signal sharing (loot targets, fallback points, danger events).
    /// Syncs between group members using staggered, randomized intervals.
    /// Bulletproof: all failures are strictly isolated to this bot; no error can break squad or parent logic.
    /// </summary>
    public sealed class BotGroupSyncCoordinator
    {
        #region Constants

        private const float BaseSyncInterval = 0.5f;
        private const float PositionEpsilonSqr = 0.0225f;

        #endregion

        #region Fields

        private readonly Dictionary<BotOwner, BotComponentCache> _teammateCaches = new Dictionary<BotOwner, BotComponentCache>(8);

        private BotOwner _bot;
        private BotComponentCache _cache;
        private BotsGroup _group;

        private Vector3 _fallbackPoint;
        private Vector3 _lootPoint;
        private Vector3 _extractPoint;

        private float _nextSyncTime;
        private bool _hasFallback;
        private bool _hasLoot;
        private bool _hasExtract;

        #endregion

        #region Properties

        public float LastDangerBroadcastTime { get; private set; }
        public Vector3 LastDangerPosition { get; private set; }

        public bool IsActive =>
            _bot != null && !_bot.IsDead && _group != null && _cache != null;

        #endregion

        #region Initialization

        public void Initialize(BotOwner botOwner)
        {
            try
            {
                if (botOwner == null || botOwner.GetPlayer == null || !botOwner.GetPlayer.IsAI)
                    throw new ArgumentException("[BotGroupSyncCoordinator] BotOwner is null or not AI.");

                _bot = botOwner;
                _group = botOwner.BotsGroup;

                if (_group == null)
                    throw new ArgumentException("[BotGroupSyncCoordinator] BotsGroup is null.");

                _group.OnMemberAdd += OnMemberAdded;
                _group.OnMemberRemove += OnMemberRemoved;

                LastDangerBroadcastTime = -999f;
            }
            catch
            {
                _bot = null;
                _group = null;
            }
        }

        public void InjectLocalCache(BotComponentCache localCache)
        {
            if (localCache == null)
                return;
            _cache = localCache;
        }

        #endregion

        #region Broadcasts

        public void BroadcastFallbackPoint(Vector3 point)
        {
            try
            {
                _fallbackPoint = point;
                _hasFallback = true;

                foreach (var kv in _teammateCaches)
                {
                    var mate = kv.Value;
                    if (mate?.Bot != null && !mate.Bot.IsDead)
                    {
                        try
                        {
                            mate.Combat?.TriggerFallback(point);
                            if (mate.PanicHandler != null && !mate.PanicHandler.IsPanicking)
                            {
                                mate.PanicHandler.TriggerPanic();
                            }
                        }
                        catch { }
                    }
                }
            }
            catch { }
        }

        public void BroadcastDanger(Vector3 position)
        {
            try
            {
                LastDangerPosition = position;
                LastDangerBroadcastTime = Time.time;

                foreach (var kv in _teammateCaches)
                {
                    var mate = kv.Value;
                    if (mate?.Bot != null && !mate.Bot.IsDead && mate.PanicHandler != null && !mate.PanicHandler.IsPanicking)
                    {
                        float delay = UnityEngine.Random.Range(0.1f, 0.35f);
                        TriggerDelayedPanic(mate, delay);
                    }
                }
            }
            catch { }
        }

        public void BroadcastLootPoint(Vector3 point)
        {
            _lootPoint = point;
            _hasLoot = true;
        }

        public void BroadcastExtractPoint(Vector3 point)
        {
            _extractPoint = point;
            _hasExtract = true;
        }

        #endregion

        #region Queries

        public Vector3? GetSharedFallbackTarget() => _hasFallback ? (Vector3?)_fallbackPoint : null;
        public Vector3? GetSharedLootTarget() => _hasLoot ? (Vector3?)_lootPoint : null;
        public Vector3? GetSharedExtractTarget() => _hasExtract ? (Vector3?)_extractPoint : null;

        public bool IsSquadReady() => _teammateCaches.Count > 0;

        public IReadOnlyList<BotOwner> GetTeammates()
        {
            var result = TempListPool.Rent<BotOwner>();
            try
            {
                foreach (var kv in _teammateCaches)
                {
                    var bot = kv.Key;
                    if (bot != null && !bot.IsDead && bot.GetPlayer?.IsAI == true)
                    {
                        result.Add(bot);
                    }
                }
                return result;
            }
            catch
            {
                result.Clear();
                return result;
            }
        }

        public BotComponentCache GetCache(BotOwner teammate)
        {
            if (teammate == null || !_teammateCaches.TryGetValue(teammate, out BotComponentCache cache) || cache == null)
                return BotComponentCache.Empty;

            return cache;
        }

        #endregion

        #region Tick

        public void Tick(float time)
        {
            try
            {
                if (!IsActive || _teammateCaches.Count == 0 || time < _nextSyncTime)
                    return;

                _nextSyncTime = time + BaseSyncInterval * UnityEngine.Random.Range(0.85f, 1.15f);

                if (_cache?.PanicHandler == null || !_cache.PanicHandler.IsPanicking)
                    return;

                Vector3 myPos = _bot.Position;

                if (!_hasFallback || (myPos - _fallbackPoint).sqrMagnitude > PositionEpsilonSqr)
                {
                    BroadcastFallbackPoint(myPos);
                }

                if ((myPos - LastDangerPosition).sqrMagnitude > PositionEpsilonSqr)
                {
                    BroadcastDanger(myPos);
                }
            }
            catch { }
        }

        #endregion

        #region Internal Logic

        private void OnMemberAdded(BotOwner teammate)
        {
            try
            {
                if (teammate == null || teammate == _bot || _teammateCaches.ContainsKey(teammate))
                    return;
                if (teammate.IsDead || teammate.GetPlayer?.IsAI != true)
                    return;
                string profileId = teammate.ProfileId;
                if (string.IsNullOrEmpty(profileId))
                    return;
                if (!BotRegistry.TryGetRefactoredOwner(profileId, out AIRefactoredBotOwner owner))
                    return;
                BotComponentCache cache = new BotComponentCache();
                cache.Initialize(teammate);
                cache.SetOwner(owner);
                _teammateCaches[teammate] = cache;
            }
            catch { }
        }

        private void OnMemberRemoved(BotOwner teammate)
        {
            try { _teammateCaches.Remove(teammate); }
            catch { }
        }

        private static void TriggerDelayedPanic(BotComponentCache cache, float delay)
        {
            if (cache == null)
                return;
            Task.Run(async () =>
            {
                try
                {
                    await Task.Delay((int)(delay * 1000f));
                    if (cache.Bot != null && !cache.Bot.IsDead && cache.PanicHandler != null && !cache.PanicHandler.IsPanicking)
                    {
                        cache.PanicHandler.TriggerPanic();
                    }
                }
                catch { }
            });
        }

        #endregion
    }
}
