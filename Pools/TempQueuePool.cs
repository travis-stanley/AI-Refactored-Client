// <auto-generated>
//   AI-Refactored: TempQueuePool.cs (Beyond Diamond, Zero-Alloc & Parity Edition, June 2025)
//   Bulletproof, zero-alloc generic Queue<T> pooling for ultra-high-performance AI logic.
//   Thread-safe, teardown/reload safe, AI-Refactored compliant.
//   MIT License.
// </auto-generated>

namespace AIRefactored.Pools
{
    using System;
    using System.Collections.Generic;

    /// <summary>
    /// Centralized pool for temporary <see cref="Queue{T}"/> reuse.
    /// Used to avoid heap allocations in tactical and pathing logic.
    /// </summary>
    public static class TempQueuePool
    {
        private static readonly Dictionary<Type, Stack<object>> PoolByType = new Dictionary<Type, Stack<object>>(128);
        private static readonly object SyncRoot = new object();

        static TempQueuePool()
        {
            try
            {
                AppDomain.CurrentDomain.DomainUnload += (_, __) => ClearAll();
            }
            catch { }
        }

        /// <summary>
        /// Retrieves a cleared queue instance from the pool.
        /// </summary>
        /// <typeparam name="T">Element type.</typeparam>
        /// <returns>A clean queue ready for use.</returns>
        public static Queue<T> Rent<T>()
        {
            lock (SyncRoot)
            {
                if (PoolByType.TryGetValue(typeof(T), out Stack<object> stack) && stack.Count > 0)
                    return (Queue<T>)stack.Pop();
            }

            return new Queue<T>();
        }

        /// <summary>
        /// Returns a queue to the pool after clearing it.
        /// </summary>
        /// <typeparam name="T">Element type.</typeparam>
        /// <param name="queue">Queue to return.</param>
        public static void Return<T>(Queue<T> queue)
        {
            if (queue == null)
                return;

            queue.Clear();

            lock (SyncRoot)
            {
                if (!PoolByType.TryGetValue(typeof(T), out Stack<object> stack))
                {
                    stack = new Stack<object>(32);
                    PoolByType[typeof(T)] = stack;
                }

                stack.Push(queue);
            }
        }

        /// <summary>
        /// Pre-warms the pool with empty queues.
        /// </summary>
        /// <typeparam name="T">Element type.</typeparam>
        /// <param name="count">Number of empty instances to pre-allocate.</param>
        public static void Prewarm<T>(int count)
        {
            if (count <= 0)
                return;

            lock (SyncRoot)
            {
                if (!PoolByType.TryGetValue(typeof(T), out Stack<object> stack))
                {
                    stack = new Stack<object>(count);
                    PoolByType[typeof(T)] = stack;
                }

                for (int i = 0; i < count; i++)
                    stack.Push(new Queue<T>());
            }
        }

        /// <summary>
        /// Clears all queued instances across all types.
        /// </summary>
        public static void ClearAll()
        {
            lock (SyncRoot)
            {
                foreach (var stack in PoolByType.Values)
                    stack.Clear();

                PoolByType.Clear();
            }
        }
    }
}
