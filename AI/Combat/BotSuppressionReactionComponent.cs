// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   All fallback logic is removed: bot suppression logic is always eligible, self-recovering, and never disables the bot.
// </auto-generated>

namespace AIRefactored.AI.Combat
{
    using System;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Helpers;
    using AIRefactored.AI.Navigation;
    using AIRefactored.Core;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Handles bot suppression logic, including sprint retreat, composure impact,
    /// and panic escalation. Suppression is triggered by incoming fire or explosions.
    /// All failures are isolated; suppression logic never disables itself, never triggers fallback logic.
    /// </summary>
    public sealed class BotSuppressionReactionComponent
    {
        private const float MinSuppressionRetreatDistance = 6.0f;
        private const float SuppressionDuration = 2.0f;

        private BotOwner _bot;
        private BotComponentCache _cache;
        private bool _isSuppressed;
        private float _suppressionStartTime = float.NegativeInfinity;

        public void Initialize(BotComponentCache componentCache)
        {
            if (componentCache == null || componentCache.Bot == null)
            {
                Plugin.LoggerInstance?.LogError("[Suppression] Bot or cache is null in Initialize.");
                return;
            }

            _cache = componentCache;
            _bot = componentCache.Bot;
            _isSuppressed = false;
            _suppressionStartTime = float.NegativeInfinity;
        }

        public bool IsSuppressed()
        {
            return _isSuppressed;
        }

        public void Tick(float time)
        {
            if (!_isSuppressed)
                return;

            try
            {
                if (!IsValid())
                {
                    _isSuppressed = false;
                    return;
                }

                if (time - _suppressionStartTime >= SuppressionDuration)
                {
                    _isSuppressed = false;
                }
            }
            catch (Exception ex)
            {
                Plugin.LoggerInstance?.LogError("[BotSuppression] Exception in Tick: " + ex);
                _isSuppressed = false;
            }
        }

        public void TriggerSuppression(Vector3? source)
        {
            if (_isSuppressed || !IsValid())
                return;

            try
            {
                var panic = _cache.PanicHandler;
                if (panic != null && panic.IsPanicking)
                    return;

                _isSuppressed = true;
                _suppressionStartTime = Time.time;

                Vector3 retreatDir = source.HasValue
                    ? (_bot.Position - source.Value).normalized
                    : GetDefaultRetreatDirection();

                Vector3 fallback = _bot.Position + retreatDir.normalized * MinSuppressionRetreatDistance;

                if (BotNavHelper.TryGetSafeTarget(_bot, out var navTarget) && IsVectorValid(navTarget))
                {
                    fallback = navTarget;
                }

                float cohesion = _cache.AIRefactoredBotOwner?.PersonalityProfile?.Cohesion ?? 1f;

                if (_bot.Mover != null)
                {
                    BotMovementHelper.SmoothMoveTo(_bot, fallback, false, cohesion);
                    _bot.Sprint(true);
                }

                panic?.TriggerPanic();
                _cache.Escalation?.NotifyPanicTriggered();

                if (!FikaHeadlessDetector.IsHeadless && _bot.BotTalk != null)
                {
                    try { _bot.BotTalk.TrySay(EPhraseTrigger.OnLostVisual); }
                    catch { }
                }
            }
            catch (Exception ex)
            {
                Plugin.LoggerInstance?.LogError("[BotSuppression] Exception in TriggerSuppression: " + ex);
            }
        }

        private static Vector3 GetDefaultRetreatDirection()
        {
            return Vector3.back;
        }

        private bool IsValid()
        {
            try
            {
                return _bot != null &&
                       _cache != null &&
                       !_bot.IsDead &&
                       _bot.GetPlayer is Player player &&
                       player.IsAI;
            }
            catch
            {
                return false;
            }
        }

        private static bool IsVectorValid(Vector3 v)
        {
            return !float.IsNaN(v.x) && !float.IsNaN(v.y) && !float.IsNaN(v.z);
        }
    }
}
