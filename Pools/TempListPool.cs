// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Please follow strict StyleCop, ReSharper, and AI-Refactored code standards for all modifications.
// </auto-generated>


namespace AIRefactored.Pools
{
    using System;
    using System.Collections.Generic;

    /// <summary>
    /// Centralized pool for temporary <see cref="List{T}"/> reuse.
    /// Prevents garbage collection churn during frequent AI logic operations.
    /// Designed for safe use in multithreaded and high-frequency scenarios.
    /// </summary>
    public static class TempListPool
    {
        private static readonly Dictionary<Type, Stack<object>> PoolByType = new Dictionary<Type, Stack<object>>(64);
        private static readonly object SyncRoot = new object();

        static TempListPool()
        {
            AppDomain.CurrentDomain.DomainUnload += (_, __) => ClearAll();
        }

        /// <summary>
        /// Retrieves a pooled list of type <typeparamref name="T"/>, or creates one if the pool is empty.
        /// </summary>
        /// <typeparam name="T">Element type.</typeparam>
        /// <returns>A cleared and ready-to-use list.</returns>
        public static List<T> Rent<T>()
        {
            lock (SyncRoot)
            {
                Stack<object> stack;
                if (PoolByType.TryGetValue(typeof(T), out stack) && stack.Count > 0)
                {
                    return (List<T>)stack.Pop();
                }
            }

            return new List<T>();
        }

        /// <summary>
        /// Returns a list to the pool after clearing it.
        /// </summary>
        /// <typeparam name="T">Element type.</typeparam>
        /// <param name="list">List to return. Will be cleared before pooling.</param>
        public static void Return<T>(List<T> list)
        {
            if (list == null)
            {
                return;
            }

            list.Clear();

            lock (SyncRoot)
            {
                Stack<object> stack;
                if (!PoolByType.TryGetValue(typeof(T), out stack))
                {
                    stack = new Stack<object>(32);
                    PoolByType[typeof(T)] = stack;
                }

                stack.Push(list);
            }
        }

        /// <summary>
        /// Pre-warms the pool for a specific type with a fixed number of lists.
        /// </summary>
        /// <typeparam name="T">Element type to prewarm.</typeparam>
        /// <param name="count">Number of empty lists to cache.</param>
        public static void Prewarm<T>(int count)
        {
            if (count <= 0)
            {
                return;
            }

            lock (SyncRoot)
            {
                Stack<object> stack;
                if (!PoolByType.TryGetValue(typeof(T), out stack))
                {
                    stack = new Stack<object>(count);
                    PoolByType[typeof(T)] = stack;
                }

                for (int i = 0; i < count; i++)
                {
                    stack.Push(new List<T>());
                }
            }
        }

        /// <summary>
        /// Clears all pooled data across all types. Use during teardown or reload.
        /// </summary>
        public static void ClearAll()
        {
            lock (SyncRoot)
            {
                foreach (KeyValuePair<Type, Stack<object>> kvp in PoolByType)
                {
                    kvp.Value.Clear();
                }

                PoolByType.Clear();
            }
        }
    }
}
