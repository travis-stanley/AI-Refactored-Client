// <auto-generated>
//   This file is part of AI-Refactored, an open-source project focused on realistic AI behavior in Escape from Tarkov.
//   Licensed under the MIT License. See LICENSE in the repository root for more information.
//
//   THIS FILE IS SYSTEMATICALLY MANAGED.
//   Bulletproof: No fallback logic exists. All navigation failures are isolated and only log or skip.
// </auto-generated>

namespace AIRefactored.AI.Helpers
{
    using System;
    using AIRefactored.AI.Combat;
    using AIRefactored.AI.Core;
    using AIRefactored.AI.Movement;
    using AIRefactored.AI.Navigation;
    using AIRefactored.Core;
    using EFT;
    using UnityEngine;

    /// <summary>
    /// Provides smooth, human-like movement and aim transitions for AIRefactored bots.
    /// Includes strafing, smooth look, and smooth go-to movement.
    /// Bulletproof: all errors and navigation failures are locally contained, never fallback to vanilla logic.
    /// </summary>
    public static class BotMovementHelper
    {
        #region Constants

        private const float DefaultLookSpeed = 4f;
        private const float DefaultRadius = 0.8f;
        private const float DefaultStrafeDistance = 3f;
        private const float RetreatDistance = 6f;

        #endregion

        #region Public Methods

        public static void Reset(BotOwner bot)
        {
            // Reserved for future mover override / reset.
        }

        public static void RetreatToCover(BotOwner bot, Vector3 threatDirection, float distance = RetreatDistance, bool sprint = true)
        {
            if (!IsAlive(bot))
                return;

            try
            {
                Vector3 fallback = bot.Position - threatDirection.normalized * distance;
                if (!BotNavHelper.TryGetSafeTarget(bot, out fallback))
                {
                    fallback = bot.Position - threatDirection.normalized * distance;
                }
                if (!IsValidTarget(fallback))
                    fallback = bot.Position;

                float cohesion = 1f;
                if (BotRegistry.TryGet(bot.ProfileId, out BotPersonalityProfile profile))
                {
                    cohesion = Mathf.Clamp(profile.Cohesion, 0.7f, 1.3f);
                    if (profile.IsFrenzied || profile.IsFearful)
                        sprint = true;
                }

                if (bot.Mover != null)
                {
                    bot.Mover.GoToPoint(fallback, true, cohesion);
                    if (sprint)
                        bot.Sprint(true);
                }
            }
            catch
            {
                // No fallback; error is ignored.
            }
        }

        public static void SmoothLookTo(BotOwner bot, Vector3 lookTarget, float speed = DefaultLookSpeed)
        {
            if (!IsAlive(bot) || !IsValidTarget(lookTarget))
                return;

            try
            {
                Transform transform = bot.Transform?.Original;
                if (transform == null)
                    return;

                Vector3 direction = lookTarget - bot.Position;
                direction.y = 0f;
                if (direction.sqrMagnitude < 0.01f)
                    return;

                Quaternion targetRotation = Quaternion.LookRotation(direction.normalized, Vector3.up);
                float t = Time.deltaTime * Mathf.Clamp(speed, 1f, 8f);
                transform.rotation = Quaternion.Slerp(transform.rotation, targetRotation, t);
            }
            catch
            {
                // Never break; just skip
            }
        }

        public static bool SmoothMoveToSafe(BotOwner bot, Vector3 target, bool slow = true, float cohesionScale = 1f)
        {
            if (!IsAlive(bot) || !IsValidTarget(target))
                return false;

            try
            {
                if (!BotNavHelper.TryGetSafeTarget(bot, out Vector3 safeTarget))
                {
                    safeTarget = target;
                }
                if (!IsValidTarget(safeTarget))
                    safeTarget = bot.Position;

                Vector3 position = bot.Position;
                float radius = DefaultRadius * Mathf.Clamp(cohesionScale, 0.7f, 1.3f);
                float dx = position.x - safeTarget.x;
                float dz = position.z - safeTarget.z;

                if ((dx * dx + dz * dz) < radius * radius)
                    return true;

                if (bot.Mover != null)
                {
                    bot.Mover.GoToPoint(safeTarget, slow, cohesionScale);
                    return true;
                }
            }
            catch
            {
                // Error is ignored
            }
            return false;
        }

        public static void SmoothMoveTo(BotOwner bot, Vector3 target, bool slow = true, float cohesionScale = 1f)
        {
            SmoothMoveToSafe(bot, target, slow, cohesionScale);
        }

        public static void SmoothStrafeFrom(BotOwner bot, Vector3 threatDirection, float scale = 1f)
        {
            if (!IsAlive(bot))
                return;

            try
            {
                Vector3 right = Vector3.Cross(Vector3.up, threatDirection.normalized);
                if (right.sqrMagnitude < 0.01f)
                    right = Vector3.right;

                Vector3 offset = right.normalized * DefaultStrafeDistance * Mathf.Clamp(scale, 0.75f, 1.25f);
                Vector3 target = bot.Position + offset;

                if (!BotNavHelper.TryGetSafeTarget(bot, out target))
                    target = bot.Position + offset;
                if (!IsValidTarget(target))
                    target = bot.Position;

                if (bot.Mover != null)
                {
                    bot.Mover.GoToPoint(target, false, 1f);
                }
            }
            catch
            {
                // Error is ignored
            }
        }

        public static void ForceFallbackMove(BotOwner bot)
        {
            if (!IsAlive(bot))
                return;

            try
            {
                Vector3 dir = bot.LookDirection;
                Vector3 target = bot.Position + dir.normalized * 5f;

                if (!BotNavHelper.TryGetSafeTarget(bot, out target))
                    target = bot.Position + dir.normalized * 5f;
                if (!IsValidTarget(target))
                    target = bot.Position;

                if (bot.Mover != null)
                {
                    bot.Mover.GoToPoint(target, true, 1f);
                }
            }
            catch
            {
                // Error is ignored
            }
        }

        public static void SmoothMoveToSafeExit(BotOwner bot)
        {
            if (!IsAlive(bot))
                return;

            try
            {
                Vector3 fallback = bot.Position + bot.LookDirection.normalized * 4f;

                if (!BotNavHelper.TryGetSafeTarget(bot, out fallback))
                    fallback = bot.Position + bot.LookDirection.normalized * 4f;
                if (!IsValidTarget(fallback))
                    fallback = bot.Position;

                if (bot.Mover != null)
                {
                    bot.Mover.GoToPoint(fallback, true, 1f);
                }
            }
            catch
            {
                // Error is ignored
            }
        }

        #endregion

        #region Internal Helpers

        private static bool IsAlive(BotOwner bot)
        {
            return bot != null &&
                   bot.GetPlayer != null &&
                   bot.GetPlayer.IsAI &&
                   !bot.IsDead;
        }

        private static bool IsValidTarget(Vector3 pos)
        {
            return pos != Vector3.zero &&
                   !float.IsNaN(pos.x) &&
                   !float.IsNaN(pos.y) &&
                   !float.IsNaN(pos.z);
        }

        #endregion
    }
}
